<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos7.x静默安装Oracle 12.2.0.1.0]]></title>
    <url>%2Farlo%2Fe3c25d94%2F</url>
    <content type="text"><![CDATA[今天项目上让安装一台12c的数据库，和之前的11g静默安装过程大致差不多，在此记录一下，方便日后查看。 关闭selinux和firewalld关闭selinux123sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/&apos; /etc/selinux/configgrep SELINUX=disabled /etc/selinux/configsetenforce 0 关闭firewalld12systemctl stop firewalld.servicesystemctl disable firewalld.service 系统基础信息配置基础软件安装12345#默认是不安装32位软件包的，添加此选项echo &apos;multilib_policy=all&apos; &gt;&gt; /etc/yum.confyum -y install binutils-* compat-libstdc++-* elfutils-libelf-* elfutils-libelf-devel-* gcc-* gcc-c++-* glibc-* glibc-common-* glibc-devel-* glibc-headers-* ksh-* libaio-* libaio-devel-* libgcc-* libstdc++* libstdc++-devel* make-* sysstat-* unixODBC-* unixODBC-devel-* compat-libcap1* mksh # 非必须要安装的包，个人习惯yum -y install vim unzip lrzsz 123456789101112131415161718192021222324#监测一下软件是否安装全rpm -q \binutils \compat-libstdc++-33 \elfutils-libelf \elfutils-libelf-devel \expat \gcc \gcc-c++ \glibc \glibc-common \glibc-devel \glibc-headers \libaio \libaio-devel \libgcc \libstdc++ \libstdc++-devel \make \pdksh \sysstat \unixODBC \unixODBC-devel \compat-libcap1 | grep &quot;not installed&quot; 配置主机名1hostnamectl set-hostname db-server 添加hosts记录vim /etc/hosts 123127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6127.0.0.1 db-server 修改PAM配置文件vim /etc/pam.d/login 12session required /lib64/security/pam_limits.sosession required pam_limits.so 修改内核参数vim /etc/sysctl.conf 123456789fs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048586 重新加载生效sysctl -p 修改系统资源限制vim /etc/security/limits.conf 12345oracle soft nproc 2047 oracle hard nproc 16384 oracle soft nofile 1024 oracle hard nofile 65536oracle soft stack 10240 Oracle相关环境配置新建用户12345groupadd -g 1000 oinstallgroupadd -g 1001 dbauseradd -u 1000 -g oinstall -G dba oracle#设置oracle用户密码为oracle#123echo &quot;oracle:oracle#123&quot; | chpasswd 修改用户配置文件vim /etc/profile 12345678910#添加到文件末尾即可if [ $USER = &quot;oracle&quot; ]; then if [ $SHELL = &quot;/bin/ksh&quot; ]; then ulimit -p 16384 ulimit -n 65536 else ulimit -u 16384 -n 65536 fifi 新建目录并设置权限12345mkdir -p /u01/app/oracle/product/12.2.0/db_1mkdir -p /u01/app/oraInventorychown -R oracle.oinstall /u01/app/oraclechown -R oracle.oinstall /u01/app/oraInventorychmod -R 775 /u01/app 设置oracle用户环境变量su - oraclevim ~/.bash_profile 123456export ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/product/12.2.0/db_1export ORACLE_SID=orclexport PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport NLS_LANG=American_America.ZHS16GBK 检查环境变量是否生效source ~/.bash_profileenv |grep ORA 123ORACLE_SID=orclORACLE_BASE=/u01/app/oracleORACLE_HOME=/u01/app/oracle/product/12.2.0/db_1 安装Oracle数据库下载地址：https://www.oracle.com/database/technologies/oracle-database-software-downloads.html 12.2.0.1.0只有一个软件包，(3,453,696,911 bytes) (cksum - 4170261901)，将linuxx64_12201_database.zip传到服务器/usr/local/src/ 目录下并解压。 1234[root@db-server src]# pwd/usr/local/src[root@db-server src]# unzip linuxx64_12201_database.zip …… 安装Oracle数据库软件解压后在/usr/local/src/database/response/ 目录下有三个rsp文件，用来作为静默安装时的应答文件的模板。 123db_install.rsp 安装应答netca.rsp 建立监听、本地服务名等网络设置的应答dbca.rsp 创建数据库应答 123--备份以下两个响应文件cp db_install.rsp db_install.bakcp dbca.rsp dbca.bak 修改db_install.rsp 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@db-server response]# egrep -v &quot;^#|^$&quot; db_install.rsp oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v12.2.0oracle.install.option=INSTALL_DB_SWONLYUNIX_GROUP_NAME=oinstallINVENTORY_LOCATION=/u01/app/oraInventoryORACLE_HOME=/u01/app/oracle/product/12.2.0/db_1ORACLE_BASE=/u01/app/oracle oracle.install.db.InstallEdition=EEoracle.install.db.OSDBA_GROUP=dbaoracle.install.db.OSOPER_GROUP=oracle.install.db.OSBACKUPDBA_GROUP=dbaoracle.install.db.OSDGDBA_GROUP=dbaoracle.install.db.OSKMDBA_GROUP=dbaoracle.install.db.OSRACDBA_GROUP=dbaoracle.install.db.rac.configurationType=oracle.install.db.CLUSTER_NODES=oracle.install.db.isRACOneInstall=falseoracle.install.db.racOneServiceName=oracle.install.db.rac.serverpoolName=oracle.install.db.rac.serverpoolCardinality=0oracle.install.db.config.starterdb.type=GENERAL_PURPOSEoracle.install.db.config.starterdb.globalDBName=oracle.install.db.config.starterdb.SID=oracle.install.db.ConfigureAsContainerDB=falseoracle.install.db.config.PDBName=oracle.install.db.config.starterdb.characterSet=ZHS16GBKoracle.install.db.config.starterdb.memoryOption=falseoracle.install.db.config.starterdb.memoryLimit=oracle.install.db.config.starterdb.installExampleSchemas=falseoracle.install.db.config.starterdb.password.ALL=oracle.install.db.config.starterdb.password.SYS=oracle.install.db.config.starterdb.password.SYSTEM=oracle.install.db.config.starterdb.password.DBSNMP=oracle.install.db.config.starterdb.password.PDBADMIN=oracle.install.db.config.starterdb.managementOption=DEFAULToracle.install.db.config.starterdb.omsHost=oracle.install.db.config.starterdb.omsPort=0oracle.install.db.config.starterdb.emAdminUser=oracle.install.db.config.starterdb.emAdminPassword=oracle.install.db.config.starterdb.enableRecovery=falseoracle.install.db.config.starterdb.storageType=oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation=oracle.install.db.config.asm.diskGroup=oracle.install.db.config.asm.ASMSNMPPassword=MYORACLESUPPORT_USERNAME=MYORACLESUPPORT_PASSWORD=SECURITY_UPDATES_VIA_MYORACLESUPPORT=falseDECLINE_SECURITY_UPDATES=truePROXY_HOST=PROXY_PORT=PROXY_USER=PROXY_PWD=COLLECTOR_SUPPORTHUB_URL= 执行静默安装12345678910111213141516171819[oracle@db-server database]$ pwd/usr/local/src/database[oracle@db-server database]$ ./runInstaller -silent -ignorePrereq -ignoreSysPrereqs -responseFile /usr/local/src/database/response/db_install.rsp Starting Oracle Universal Installer...Checking Temp space: must be greater than 500 MB. Actual 29865 MB PassedChecking swap space: must be greater than 150 MB. Actual 2047 MB PassedPreparing to launch Oracle Universal Installer from /tmp/OraInstall2020-06-18_03-36-22AM. Please wait ...[oracle@db-server database]$ You can find the log of this install session at: /u01/app/oraInventory/logs/installActions2020-06-18_03-36-22AM.logThe installation of Oracle Database 12c was successful.Please check &apos;/u01/app/oraInventory/logs/silentInstall2020-06-18_03-36-22AM.log&apos; for more details.As a root user, execute the following script(s): 1. /u01/app/oraInventory/orainstRoot.sh 2. /u01/app/oracle/product/12.2.0/db_1/root.shSuccessfully Setup Software. 安装过程中，我们可以另开一个终端查看安装日志 tail -f /u01/app/oraInventory/logs/silentInstall2020-06-18_03-36-22AM.log 以root身份执行以下脚本，然后在刚才的安装界面敲回车，完成安装123456789[root@db-server response]# /u01/app/oraInventory/orainstRoot.shChanging permissions of /u01/app/oraInventory.Adding read,write permissions for group.Removing read,write,execute permissions for world.Changing groupname of /u01/app/oraInventory to oinstall.The execution of the script is complete.[root@db-server response]# /u01/app/oracle/product/12.2.0/db_1/root.shCheck /u01/app/oracle/product/12.2.0/db_1/install/root_db-server_2020-06-18_03-46-08-638987704.log for the output of root script 静默安装监听安装监听静默安装使用默认的监听响应文件即可，不用修改。 12345678910111213[oracle@db-server ~]$ $ORACLE_HOME/bin/netca /silent /responseFile /usr/local/src/database/response/netca.rsp Parsing command line arguments: Parameter &quot;silent&quot; = true Parameter &quot;responsefile&quot; = /usr/local/src/database/response/netca.rspDone parsing command line arguments.Oracle Net Services Configuration:Profile configuration complete.Oracle Net Listener Startup:The information provided for this listener is currently in use by other software on this computer. Listener start failed.Check the trace file for details: /u01/app/oracle/cfgtoollogs/netca/trace_OraDB12Home1-2006183AM4751.logOracle Net Services configuration failed. The exit code is 1 启动监听12345678910111213141516171819202122232425262728293031[oracle@db-server ~]$ lsnrctl startLSNRCTL for Linux: Version 12.2.0.1.0 - Production on 18-JUN-2020 03:48:13Copyright (c) 1991, 2016, Oracle. All rights reserved.Starting /u01/app/oracle/product/12.2.0/db_1/bin/tnslsnr: please wait...TNSLSNR for Linux: Version 12.2.0.1.0 - ProductionSystem parameter file is /u01/app/oracle/product/12.2.0/db_1/network/admin/listener.oraLog messages written to /u01/app/oracle/diag/tnslsnr/db-server/listener/alert/log.xmlListening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=db-server)(PORT=1539)))Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1539)))STATUS of the LISTENER------------------------Alias LISTENERVersion TNSLSNR for Linux: Version 12.2.0.1.0 - ProductionStart Date 18-JUN-2020 03:48:14Uptime 0 days 0 hr. 0 min. 0 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/oracle/product/12.2.0/db_1/network/admin/listener.oraListener Log File /u01/app/oracle/diag/tnslsnr/db-server/listener/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=db-server)(PORT=1539))) (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))The listener supports no servicesThe command completed successfully ps:细心的朋友应该发现了，我这里有点问题，启动的是1539端口，不是响应文件里定义的1521端口，暂时还没找到原因，先手动修改了。 静默安装数据库修改安装数据库响应文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859[root@db-server ~]# egrep -v &quot;^#|^$&quot; /usr/local/src/database/response/dbca.rspresponseFileVersion=/oracle/assistants/rspfmt_dbca_response_schema_v12.2.0gdbName=orclsid=orcldatabaseConfigType=SIRACOneNodeServiceName=policyManaged=falsecreateServerPool=falseserverPoolName=cardinality=force=falsepqPoolName=pqCardinality=createAsContainerDatabase=falsenumberOfPDBs=0pdbName=useLocalUndoForPDBs=truepdbAdminPassword=nodelist=templateName=/u01/app/oracle/product/12.2.0/db_1/assistants/dbca/templates/General_Purpose.dbcsysPassword=Ths#123%systemPassword=Ths#123% serviceUserPassword=emConfiguration=emExpressPort=0runCVUChecks=falsedbsnmpPassword=omsHost=omsPort=0emUser=emPassword=dvConfiguration=falsedvUserName=dvUserPassword=dvAccountManagerName=dvAccountManagerPassword=olsConfiguration=falsedatafileJarLocation=&#123;ORACLE_HOME&#125;/assistants/dbca/templates/datafileDestination=&#123;ORACLE_BASE&#125;/oradata/&#123;DB_UNIQUE_NAME&#125;/recoveryAreaDestination=&#123;ORACLE_BASE&#125;/fast_recovery_area/&#123;DB_UNIQUE_NAME&#125;storageType=FSdiskGroupName=asmsnmpPassword=recoveryGroupName=characterSet=ZHS16GBKnationalCharacterSet=registerWithDirService=falsedirServiceUserName=dirServicePassword=walletPassword=listeners=variablesFile=variables=DB_UNIQUE_NAME=orcl,ORACLE_BASE=/u01/app/oracle,PDB_NAME=,DB_NAME=orcl,ORACLE_HOME=/u01/app/oracle/product/12.2.0/db_1,SID=orclinitParams=undo_tablespace=UNDOTBS1,memory_target=1577MB,processes=320,db_recovery_file_dest_size=8016MB,dispatchers=(PROTOCOL=TCP) (SERVICE=&#123;SID&#125;XDB),db_recovery_file_dest=&#123;ORACLE_BASE&#125;/fast_recovery_area/&#123;DB_UNIQUE_NAME&#125;,db_block_size=8KB,diagnostic_dest=&#123;ORACLE_BASE&#125;,audit_file_dest=&#123;ORACLE_BASE&#125;/admin/&#123;DB_UNIQUE_NAME&#125;/adump,db_create_file_dest=&#123;ORACLE_BASE&#125;/oradata/&#123;DB_UNIQUE_NAME&#125;/,compatible=12.2.0,db_name=orcl,audit_trail=db,remote_login_passwordfile=EXCLUSIVE,open_cursors=300sampleSchema=falsememoryPercentage=40databaseType=MULTIPURPOSEautomaticMemoryManagement=truetotalMemory=0 执行静默建库12c和11不同的地方就是在这里要加一个-createDatabase的参数。 12345678910111213141516171819202122232425[oracle@db-server ~]$ $ORACLE_HOME/bin/dbca -silent -createDatabase -responseFile /home/oracle/dbca.rsp Copying database files1% complete2% complete18% complete33% completeCreating and starting Oracle instance35% complete40% complete44% complete49% complete50% complete53% complete55% completeCompleting Database Creation56% complete57% complete58% complete62% complete65% complete66% completeExecuting Post Configuration Actions100% completeLook at the log file &quot;/u01/app/oracle/cfgtoollogs/dbca/orcl/orcl.log&quot; for further details. 1234567891011121314151617181920212223242526[oracle@db-server ~]$ lsnrctl statusLSNRCTL for Linux: Version 12.2.0.1.0 - Production on 17-JUN-2020 19:09:02Copyright (c) 1991, 2016, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))STATUS of the LISTENER------------------------Alias LISTENERVersion TNSLSNR for Linux: Version 12.2.0.1.0 - ProductionStart Date 17-JUN-2020 19:08:16Uptime 0 days 0 hr. 0 min. 46 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/oracle/product/12.2.0/db_1/network/admin/listener.oraListener Log File /u01/app/oracle/diag/tnslsnr/db-server/listener/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=db-server)(PORT=1521)))Services Summary...Service &quot;orcl&quot; has 1 instance(s). Instance &quot;orcl&quot;, status READY, has 1 handler(s) for this service...Service &quot;orclXDB&quot; has 1 instance(s). Instance &quot;orcl&quot;, status READY, has 1 handler(s) for this service...The command completed successfully 配置开机启动修改oratabvim /etc/oratab 1orcl:/u01/app/oracle/product/12.2.0/db_1:Y 修改dbstart文件vim /u01/app/oracle/product/12.2.0/db_1/bin/dbstart 修改第80行: ORACLE_HOME_LISTNER=$1为ORACLE_HOME_LISTNER=$ORACLE_HOME 修改dbshut文件vim /u01/app/oracle/product/12.2.0/db_1/bin/dbshut 修改第50行: ORACLE_HOME_LISTNER=$1为ORACLE_HOME_LISTNER=$ORACLE_HOME 修改开机启动文件vim /etc/rc.d/rc.local 12su - oracle -lc &quot;/u01/app/oracle/product/12.2.0/db_1/bin/lsnrctl start&quot;su - oracle -lc &quot;/u01/app/oracle/product/12.2.0/db_1/bin/dbstart&quot; 添加可执行权限 chmod +x /etc/rc.d/rc.local 关闭审计日志1234567由于默认审计日志默认是开启状态，长时间使用后会早上SYSTEM表空间撑爆，磁盘占用率高，建议关闭sqlplus / as sysdbaSQL&gt; show parameter audit_trailSQL&gt; alter system set audit_trail=none scope=spfile;SQL&gt; shutdown immediate;SQL&gt; startup 使SqlPlus工具支持上下左右键安装rlwrap： http://islocal.cc/arlo/d9547628/]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix(13)实现短信接口告警]]></title>
    <url>%2Farlo%2Fc254fd0e%2F</url>
    <content type="text"><![CDATA[最近有个内网项目搭建了一套zabbix监控，由于不能访问互联网，导致告警无法使用邮件，钉钉类的方式推送告警通知；了解到之前项目上采购过一个金笛短信设备，拿来一试。 官方文档说明123456短信发送URL：http://127.0.0.1:8060/send?password=[password]&amp;text=[text]&amp;recipient=[cell-phone number]&amp;encoding=U短信接收URL：http://127.0.0.1:8060/read?password=[password]&amp;gateway=modem[id]&amp;count=[number]短信发送状态URL：http://127.0.0.1:8060/sendstatus?msgid=[msgid] 使用浏览器测试短信发送1http://10.206.2.108:8060/send?password=1&amp;text=[tes20200611]&amp;recipient=18xxxxxxxxx&amp;encoding=U 手机可以正常收到。 编写短信发送脚本grep -E AlertScriptsPath /etc/zabbix/zabbix_server.confcd /usr/lib/zabbix/alertscripts vim sendSMS.sh 123456789101112131415161718192021222324[root@zw_zabbix_server alertscripts]# vim sendSMS.sh #!/bin/bash# 脚本的日志文件LOGFILE=&quot;/tmp/SMS.log&quot;:&gt;&quot;$LOGFILE&quot;exec 1&gt;&quot;$LOGFILE&quot;exec 2&gt;&amp;1MOBILE_NUMBER=$1 # 手机号码MESSAGE_UTF8=$3 # 短信内容XXD=&quot;/usr/bin/xxd&quot;CURL=&quot;/usr/bin/curl&quot;TIMEOUT=5# 短信内容要经过URL编码处理MESSAGE_ENCODE=$(echo &quot;$MESSAGE_UTF8&quot; | $&#123;XXD&#125; -ps | sed &apos;s/\(..\)/%\1/g&apos; | tr -d &apos;\n&apos;)# SMS APIURL=&quot;http://10.206.2.108:8060/send?password=1&amp;text=$&#123;MESSAGE_ENCODE&#125;&amp;recipient=$MOBILE_NUMBER&amp;encoding=U&quot;# Send itset -x$&#123;CURL&#125; -s --connect-timeout $&#123;TIMEOUT&#125; &quot;$&#123;URL&#125;&quot; chmod +x sendSMS.sh ./sendSMS.sh 18xxxxxxxxx &quot;&quot; &quot;test zabbix sendmail&quot; 手机可以正常收到。 配置zabbix管理-报警媒介类型-创建媒体类型 脚本参数 1234567名称：sendSMS类型：脚本脚本名称：sendSMS.sh添加以下3个参数，分别对应sendSMS.sh脚本需要的3个参数收短信电话号码:&#123;ALERT.SENDTO&#125;主题:&#123;ALERT.SUBJECT&#125; #好像没什么用短信内容:&#123;ALERT.MESSAGE&#125; 设置用户报警媒介 触发告警器 1234567891011默认接收人:藏_故障&#123;TRIGGER.STATUS&#125;:服务器 &#123;HOSTNAME1&#125;:&#123;TRIGGER.NAME&#125;默认信息:告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;请至Montoring-Events中查看详细情况。 12345678910默认接收人:藏_故障&#123;TRIGGER.STATUS&#125;:服务器 &#123;HOSTNAME1&#125;:&#123;TRIGGER.NAME&#125;告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;报警已恢复，请放松心情。 测试告警关闭agent，测试告警 测试成功。 ps：第二天测试的时候发现短信平台成功发送了，但是手机收不到短信，咨询厂家，怀疑是运营商拦截了。]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(12)升级php版本]]></title>
    <url>%2Farlo%2Faf5322c5%2F</url>
    <content type="text"><![CDATA[漏扫设备扫描处理zabbix服务器有很多漏洞，看了一眼基本上都是openssh和php相关的漏洞，决定升级一下版本。 zabbix4.4.8默认安装的php是5.4.16 查看php版本 升级php版本rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://rpms.remirepo.net/enterprise/remi-release-7.rpm 1234567891011121314151617181920cat &lt;&lt;EOF&gt; /etc/yum.repos.d/remi.repo[remi]name=Remi&apos;s RPM repository for Enterprise Linux 7 - $basearch#baseurl=http://rpms.remirepo.net/enterprise/7/remi/$basearch/#mirrorlist=https://rpms.remirepo.net/enterprise/7/remi/httpsmirrormirrorlist=http://cdn.remirepo.net/enterprise/7/remi/mirrorenabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remiEOFcat &lt;&lt;EOF&gt; /etc/yum.repos.d/remi-php73.repo[remi-php73]name=Remi&apos;s PHP 7.3 RPM repository for Enterprise Linux 7 - $basearch#baseurl=http://rpms.remirepo.net/enterprise/7/php73/$basearch/mirrorlist=https://rpms.remirepo.net/enterprise/7/php73/httpsmirrormirrorlist=http://cdn.remirepo.net/enterprise/7/php73/mirrorenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remiEOF yum -y upgrade php* 验证php版本]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thread 1 cannot allocate new log 故障处理]]></title>
    <url>%2Farlo%2F2cd5eb70%2F</url>
    <content type="text"><![CDATA[开发反馈业务系统无法登录，排查了到数据库部分时候，发现日志里有“ Thread 1 cannot allocate new log ”错误，该错误是redo日志组无法切换，初步查看了日志情况，没有可切换空余的日志组。 各种状态含义CURRENT：指当前的日志文件,在进行实例恢复时是必须的； ACTIVE：是指活动的非当前日志,在进行实例恢复时会被用到。Active状态意味着,Checkpoint尚未完成,因此该日志文件不能被覆盖。这时也不能drop掉,应该执行alter system checkpoint; –强制执行检查点;然后在操作。 INACTIVE：是非活动日志,在实例恢复时不再需要,但在介质恢复时可能需要。 UNUSED：表示该日志从未被写入,可能是刚添加的,或RESETLOGS后被重置。 查看日志状态12--查看日志组状态select group#,sequence#,bytes,members,status from v$log; 123--查看当前日志组成员select * from v$logfile;select * from v$log; 增加日志组12345SQL&gt; alter database add logfile group 4 (&apos;/u01/app/oracle/oradata/orcl/redo04.log&apos;) size 1024m;SQL&gt; alter database add logfile group 5 (&apos;/u01/app/oracle/oradata/orcl/redo05.log&apos;) size 1024m;SQL&gt; alter database add logfile group 6 (&apos;/u01/app/oracle/oradata/orcl/redo06.log&apos;) size 1024m; 切换到新增的日志组上1SQL&gt; alter system switch logfile; --可多次执行,直到CURRENT指向新建的日志组 删除日志组1234-- 只能删除INACTIVE状态日志， 只能从数据库中删除日志，并不删除物理文件，需要手动rm删除系统中的物理文件。alter database drop logfile group 1;alter database drop logfile group 2;alter database drop logfile group 3; ps： 查看占用资源较多的进程，根据进程系统进程id查看sql语句； 123SELECT addr FROM v$process WHERE spid=&apos;418736&apos;;SELECT sql_id FROM v$session WHERE paddr=&apos;0000000978F9B0E0&apos;SELECT sql_text FROM v$sql WHERE sql_id =&apos;0uy9j8b502c4r&apos;; 如果遇到复杂的性能问题，还是建议生成awr报告，更加详细的反馈数据库的性能，瓶颈，根据具体项去做优化。 1SYS@orcl&gt; @?/rdbms/admin/awrrpt.sql 参考链接： https://www.cnblogs.com/xqzt/p/5034826.html https://blog.51cto.com/4709096/1741983]]></content>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(11)使用zabbix监控VMware虚拟化]]></title>
    <url>%2Farlo%2F1faeef66%2F</url>
    <content type="text"><![CDATA[zabbix也可以监控VMware虚拟化，支持VMware vCenter或vSphere版本最低为4.1。 以下配置文件参数可用于调整虚拟机监控： StartVMwareCollectors - 预先启动Vmware collector收集器实例的数量。 此值取决于要监控的VMware服务的数量。在大多数情况下，这应该是： servicenum &lt; StartVMwareCollectors &lt; (servicenum * 2)其中 servicenum 是 VMware 服务的数量。例如：如果您有1个VMware服务，请将 StartVMwareCollectors 设置为 2，那么果您有 3 个 VMware 服务，请将其设置为 5。请注意，在大多数情况下，此值不应小于 2，不应大于 VMware 数量的 2 倍服务。还要记住，此值还取决于 VMware 环境大小和 VMwareFrequency 和 VMwarePerfFrequency 配置参数。 VMwareCacheSize - 用于存储VMware数据的缓存容量，默认为8M，取值范围：256K-2G。 VMwareFrequency - 接到VMware服务收集一个新数据的频率，默认为60秒，取值范围：10-86400。 VMwarePerfFrequency - 连接到VMware服务收集性能数据的频率，默认为60秒，取值范围：10-86400。 VMwareTimeout - VMware collector等待VMware服务响应的时间，默认为10秒，取值范围：1-300。 配置zabbix服务器egrep -v &quot;^#|^$&quot; /etc/zabbix/zabbix_server.conf |grep -i vmware 1234StartVMwareCollectors=5VMwareFrequency=60VMwarePerfFrequency=60VMwareTimeout=60 systemctl restart zabbix-server systemctl status zabbix-server 添加vCenter 关联模板 点击宏，添加以下内容 123&#123;$USERNAME&#125;：vcenter超管&#123;$PASSWORD&#125;：vcenter超管密码&#123;$URL&#125;：https://vcenterip/sdk 自动发现点击vcenter主机-自动发现规则-勾选自动发现规则-点击现在检查 至此，已经实现了对vmware虚拟化平台的监控，但是默认的模板里没有图形和触发器，我还需要继续研究一下。 可以参考： https://www.mr-mao.cn/archives/zabbix-monitor-vcenter-esxi-vm.html https://www.zabbix.com/documentation/4.0/zh/manual/config/items/itemtypes/simple_checks/vmware_keys]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[处理Oracle故障：error=27072 txt: 'Linux-x86_64 Error: 5: Input/output error]]></title>
    <url>%2Farlo%2Fbd0ffc81%2F</url>
    <content type="text"><![CDATA[今天周末，一大早开发经理发消息说项目上有个数据库连不上了，让上去排查一下。连上数据库之后，监听是启动状态，但是并没有注册数据库，看日志早上8点多的时候数据库出错，自动关掉了，错误日志如下 1tail -n 1000 /u01/app/oracle/diag/rdbms/orcl/orcl/trace/alert_orcl.log 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859Sat Apr 18 23:50:29 2020Thread 1 cannot allocate new log, sequence 11779Private strand flush not complete Current log# 3 seq# 11778 mem# 0: /u01/app/oracle/oradata/orcl/redo03.logThread 1 advanced to log sequence 11779 (LGWR switch) Current log# 1 seq# 11779 mem# 0: /u01/app/oracle/oradata/orcl/redo01.logSun Apr 19 01:29:06 2020Thread 1 advanced to log sequence 11780 (LGWR switch) Current log# 2 seq# 11780 mem# 0: /u01/app/oracle/oradata/orcl/redo02.logSun Apr 19 02:00:00 2020Closing scheduler windowClosing Resource Manager plan via scheduler windowClearing Resource Manager plan via parameterSun Apr 19 03:02:45 2020Thread 1 advanced to log sequence 11781 (LGWR switch) Current log# 3 seq# 11781 mem# 0: /u01/app/oracle/oradata/orcl/redo03.logSun Apr 19 04:49:42 2020Thread 1 advanced to log sequence 11782 (LGWR switch) Current log# 1 seq# 11782 mem# 0: /u01/app/oracle/oradata/orcl/redo01.logSun Apr 19 06:00:00 2020Setting Resource Manager plan SCHEDULER[0x32DF]:DEFAULT_MAINTENANCE_PLAN via scheduler windowSetting Resource Manager plan DEFAULT_MAINTENANCE_PLAN via parameterSun Apr 19 06:00:00 2020Starting background process VKRMSun Apr 19 06:00:00 2020VKRM started with pid=58, OS id=17023 Sun Apr 19 06:00:02 2020Begin automatic SQL Tuning Advisor run for special tuning task &quot;SYS_AUTO_SQL_TUNING_TASK&quot;Sun Apr 19 06:00:07 2020Thread 1 advanced to log sequence 11783 (LGWR switch) Current log# 2 seq# 11783 mem# 0: /u01/app/oracle/oradata/orcl/redo02.logSun Apr 19 06:00:51 2020End automatic SQL Tuning Advisor run for special tuning task &quot;SYS_AUTO_SQL_TUNING_TASK&quot;Sun Apr 19 07:10:49 2020Thread 1 advanced to log sequence 11784 (LGWR switch) Current log# 3 seq# 11784 mem# 0: /u01/app/oracle/oradata/orcl/redo03.logSun Apr 19 08:00:49 2020KCF: read, write or open error, block=0xe0 online=1 file=3 &apos;/u01/app/oracle/oradata/orcl/undotbs01.dbf&apos; error=27072 txt: &apos;Linux-x86_64 Error: 5: Input/output errorAdditional information: 4Additional information: 224Additional information: -1&apos;Errors in file /u01/app/oracle/diag/rdbms/orcl/orcl/trace/orcl_dbw1_19450.trc:Errors in file /u01/app/oracle/diag/rdbms/orcl/orcl/trace/orcl_dbw1_19450.trc:ORA-63999: data file suffered media failureORA-01114: IO error writing block to file 3 (block # 224)ORA-01110: data file 3: &apos;/u01/app/oracle/oradata/orcl/undotbs01.dbf&apos;ORA-27072: File I/O errorLinux-x86_64 Error: 5: Input/output errorAdditional information: 4Additional information: 224Additional information: -1DBW1 (ospid: 19450): terminating the instance due to error 63999Sun Apr 19 08:00:49 2020System state dump requested by (instance=1, osid=19450 (DBW1)), summary=[abnormal instance termination].System State dumped to trace file /u01/app/oracle/diag/rdbms/orcl/orcl/trace/orcl_diag_19440_20200419080049.trcDumping diagnostic data in directory=[cdmp_20200419080049], requested by (instance=1, osid=19450 (DBW1)), summary=[abnormal instance termination].Instance terminated by DBW1, pid = 19450 第一反应是磁盘空间是不是满了，查看了系统空间，/u01分区剩余还很多 经查看，这台机器是虚拟机环境，非实体机，可能存在存储超分的情况（分配出去的存储空间大于实际可用的物理空间，倒是物理空间被耗尽后，系统中依然看到存在富裕剩余空间） 12[root@db-23-200 ~]# dmidecode |grep -i prod Product Name: Bochs 为了进一步验证是否存在超分，删除了一个本地的备份文件，然后启动oracle数据库服务，居然拉起来了。原来这tmd就叫惊喜╰(°▽°)╯ 参考链接：https://blog.csdn.net/weixin_39133690/article/details/102799091]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker|4.Dockerfile编写]]></title>
    <url>%2Farlo%2Fd9e6ac98%2F</url>
    <content type="text"><![CDATA[Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。 Dockerfile构建过程解析Dockerfile基础知识 每条保留指令都必须为大写字母且后面要跟随至少一个参数 指令按照从上到下，顺序执行 #表示注释 每条指令都会创建一个新的镜像层，并对镜像进行提交 Docker执行Dockerfile的大概流程 docker从基础镜像运行一个容器 执行一条指令并对容器做出修改 执行类似docker commit的操作提交一个新的镜像层 docker再基于刚提交的镜像运行一个新容器 执行dockerfile中的下一条指令直到所有指令都执行完成 Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等； Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会真正开始提供服务； Docker容器，容器是直接提供服务的。 Dockerfile体系结构 保留字指令 含义 FROM 基础镜像，当前新镜像是基于哪个镜像的 MAINTAINER 镜像维护者的姓名和邮箱地址 RUN 容器构建时需要运行的指令 EXPOSE 容器对外暴漏的端口 WORKDIR 指定在创建容器后，终端默认登录进来的工作目录，一个落脚点 ENV 在构建镜像过程中设置环境变量 ADD 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包 COPY 类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中的&lt;原路径&gt;的文件/目标复制到新的一层的镜像内的&lt;目标路径&gt;位置 VOLUME 容器数据卷，用于数据保存和持久化工作 CMD 指定一个容器启动时要运行的命令。Dockfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换（替换） ENTRYPOINT 指定一个容器启动时要运行的命令。ENTRYPOINT的目标和CMD一样，都是在指定容器启动程序及参数（追加） ONBUILD 当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后父镜像的onbuild被触发。 编写tomcat dockerfile12345678[root@localhost tomcat]# pwd/root/mydocker/tomcat[root@localhost tomcat]# ls -ltotal 199896-rw-r--r-- 1 root root 9584807 Jul 6 2018 apache-tomcat-8.5.32.tar.gz-rw-r--r-- 1 root root 5 Feb 13 00:15 c.txt-rw-r--r-- 1 root root 614 Feb 13 00:21 dockerfile-rw-r--r-- 1 root root 195094741 Oct 31 15:00 jdk-8u221-linux-x64.tar.gz 1234567891011121314151617181920[root@localhost tomcat]# cat /root/mydocker/tomcat/dockerfile FROM centosMAINTAINER arlo&lt;10887272@qq.com&gt;WORKDIR /usr/local#安装vim,lsof软件RUN yum -y install vim lsof#拷贝并解压jdk,tomcatCOPY c.txt /usr/local/ctext.txtADD jdk-8u221-linux-x64.tar.gz /usr/local/ADD apache-tomcat-8.5.32.tar.gz /usr/local/#配置环境变量ENV JAVA_HOME /usr/local/jdk1.8.0_221/ENV CLASSPATH .:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.32ENV CATALINA_BASE /usr/local/apache-tomcat-8.5.32ENV PATH $JAVA_HOME/bin:$PATH#暴漏容器服务端口EXPOSE 8080#启动服务CMD [&quot;/usr/local/apache-tomcat-8.5.32/bin/catalina.sh&quot;,&quot;run&quot;] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117[root@localhost tomcat]# docker build -f /root/mydocker/tomcat/dockerfile -t test/tomcat .Sending build context to Docker daemon 204.7MBStep 1/14 : FROM centos ---&gt; 470671670cacStep 2/14 : MAINTAINER arlo&lt;10887272@qq.com&gt; ---&gt; Using cache ---&gt; 9fe35c7393cfStep 3/14 : WORKDIR /usr/local ---&gt; Running in 32918030b909Removing intermediate container 32918030b909 ---&gt; d3d46c9c0512Step 4/14 : RUN yum -y install vim lsof ---&gt; Running in 897a79906fc7CentOS-8 - AppStream 251 kB/s | 6.4 MB 00:26 CentOS-8 - Base 1.3 MB/s | 5.0 MB 00:03 CentOS-8 - Extras 907 B/s | 2.1 kB 00:02 Dependencies resolved.================================================================================ Package Arch Version Repository Size================================================================================Installing: vim-enhanced x86_64 2:8.0.1763-13.el8 AppStream 1.4 M lsof x86_64 4.91-2.el8 BaseOS 253 kInstalling dependencies: gpm-libs x86_64 1.20.7-15.el8 AppStream 39 k vim-common x86_64 2:8.0.1763-13.el8 AppStream 6.3 M vim-filesystem noarch 2:8.0.1763-13.el8 AppStream 48 k which x86_64 2.21-10.el8 BaseOS 49 kTransaction Summary================================================================================Install 6 PackagesTotal download size: 8.1 MInstalled size: 31 MDownloading Packages:(1/6): gpm-libs-1.20.7-15.el8.x86_64.rpm 212 kB/s | 39 kB 00:00 (2/6): vim-filesystem-8.0.1763-13.el8.noarch.rp 961 kB/s | 48 kB 00:00 (3/6): lsof-4.91-2.el8.x86_64.rpm 530 kB/s | 253 kB 00:00 (4/6): which-2.21-10.el8.x86_64.rpm 918 kB/s | 49 kB 00:00 (5/6): vim-common-8.0.1763-13.el8.x86_64.rpm 2.5 MB/s | 6.3 MB 00:02 (6/6): vim-enhanced-8.0.1763-13.el8.x86_64.rpm 538 kB/s | 1.4 MB 00:02 --------------------------------------------------------------------------------Total 2.0 MB/s | 8.1 MB 00:03 warning: /var/cache/dnf/AppStream-02e86d1c976ab532/packages/gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEYCentOS-8 - AppStream 1.6 MB/s | 1.6 kB 00:00 Importing GPG key 0x8483C65D: Userid : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot; Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D From : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialKey imported successfullyRunning transaction checkTransaction check succeeded.Running transaction testTransaction test succeeded.Running transaction Preparing : 1/1 Installing : which-2.21-10.el8.x86_64 1/6 Installing : vim-filesystem-2:8.0.1763-13.el8.noarch 2/6 Installing : vim-common-2:8.0.1763-13.el8.x86_64 3/6 Installing : gpm-libs-1.20.7-15.el8.x86_64 4/6 Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64 4/6 Installing : vim-enhanced-2:8.0.1763-13.el8.x86_64 5/6 Installing : lsof-4.91-2.el8.x86_64 6/6 Running scriptlet: lsof-4.91-2.el8.x86_64 6/6 Running scriptlet: vim-common-2:8.0.1763-13.el8.x86_64 6/6 Verifying : gpm-libs-1.20.7-15.el8.x86_64 1/6 Verifying : vim-common-2:8.0.1763-13.el8.x86_64 2/6 Verifying : vim-enhanced-2:8.0.1763-13.el8.x86_64 3/6 Verifying : vim-filesystem-2:8.0.1763-13.el8.noarch 4/6 Verifying : lsof-4.91-2.el8.x86_64 5/6 Verifying : which-2.21-10.el8.x86_64 6/6 Installed: vim-enhanced-2:8.0.1763-13.el8.x86_64 lsof-4.91-2.el8.x86_64 gpm-libs-1.20.7-15.el8.x86_64 vim-common-2:8.0.1763-13.el8.x86_64 vim-filesystem-2:8.0.1763-13.el8.noarch which-2.21-10.el8.x86_64 Complete!Removing intermediate container 897a79906fc7 ---&gt; 13121fca3153Step 5/14 : COPY c.txt /usr/local/ctext.txt ---&gt; 295b1db8995dStep 6/14 : ADD jdk-8u221-linux-x64.tar.gz /usr/local/ ---&gt; 8f55fab3cee8Step 7/14 : ADD apache-tomcat-8.5.32.tar.gz /usr/local/ ---&gt; 19390cab29cbStep 8/14 : ENV JAVA_HOME /usr/local/jdk1.8.0_221/ ---&gt; Running in d7db7c594c17Removing intermediate container d7db7c594c17 ---&gt; 0e316b643b87Step 9/14 : ENV CLASSPATH .:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/ ---&gt; Running in fb8be4c72efeRemoving intermediate container fb8be4c72efe ---&gt; 9b2d22114da9Step 10/14 : ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.32 ---&gt; Running in 0026d43d76efRemoving intermediate container 0026d43d76ef ---&gt; 1780fa4f640eStep 11/14 : ENV CATALINA_BASE /usr/local/apache-tomcat-8.5.32 ---&gt; Running in 2c843fa05104Removing intermediate container 2c843fa05104 ---&gt; b3e0da022f22Step 12/14 : ENV PATH $JAVA_HOME/bin:$PATH ---&gt; Running in 7366d7cb77a1Removing intermediate container 7366d7cb77a1 ---&gt; afefbc99ba9cStep 13/14 : EXPOSE 8080 ---&gt; Running in a65838b19573Removing intermediate container a65838b19573 ---&gt; cf9fbf0a77e9Step 14/14 : CMD [&quot;/usr/local/apache-tomcat-8.5.32/bin/startup.sh&quot;,&quot;run&quot;] ---&gt; Running in 51d8114e1305Removing intermediate container 51d8114e1305 ---&gt; fd478a528ca4Successfully built fd478a528ca4Successfully tagged test/tomcat:latest 12345678910111213141516171819202122232425[root@localhost tomcat]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEtest/tomcat latest fd478a528ca4 32 seconds ago 721MBtest/centos2 latest 9c47c178eb61 3 hours ago 314MBtest/centos latest c8ed8caf62e2 17 hours ago 237MBtomcat latest b56d8850aed5 5 days ago 529MBcentos latest 470671670cac 3 weeks ago 237MB[root@localhost tomcat]# docker history test/tomcatIMAGE CREATED CREATED BY SIZE COMMENTfd478a528ca4 42 seconds ago /bin/sh -c #(nop) CMD [&quot;/usr/local/apache-t… 0B cf9fbf0a77e9 46 seconds ago /bin/sh -c #(nop) EXPOSE 8080 0B afefbc99ba9c 49 seconds ago /bin/sh -c #(nop) ENV PATH=/usr/local/jdk1.… 0B b3e0da022f22 53 seconds ago /bin/sh -c #(nop) ENV CATALINA_BASE=/usr/lo… 0B 1780fa4f640e 57 seconds ago /bin/sh -c #(nop) ENV CATALINA_HOME=/usr/lo… 0B 9b2d22114da9 About a minute ago /bin/sh -c #(nop) ENV CLASSPATH=.:/usr/loca… 0B 0e316b643b87 About a minute ago /bin/sh -c #(nop) ENV JAVA_HOME=/usr/local/… 0B 19390cab29cb About a minute ago /bin/sh -c #(nop) ADD file:047cf33d1eac02dd1… 13.6MB 8f55fab3cee8 About a minute ago /bin/sh -c #(nop) ADD file:cd29f38ce9a4a50a3… 407MB 295b1db8995d About a minute ago /bin/sh -c #(nop) COPY file:ba9516c02edf6166… 5B 13121fca3153 About a minute ago /bin/sh -c yum -y install vim lsof 63.6MB d3d46c9c0512 2 minutes ago /bin/sh -c #(nop) WORKDIR /usr/local 0B 9fe35c7393cf 3 hours ago /bin/sh -c #(nop) MAINTAINER arlo&lt;10887272@… 0B 470671670cac 3 weeks ago /bin/sh -c #(nop) CMD [&quot;/bin/bash&quot;] 0B &lt;missing&gt; 3 weeks ago /bin/sh -c #(nop) LABEL org.label-schema.sc… 0B &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) ADD file:aa54047c80ba30064… 237MB 1[root@localhost tomcat]# docker run -d -p 8888:8080 --name tomcat0212 -v /data/tomcatwar:/usr/local/apache-tomcat-8.5.32/webapps -v /data/tomcatlogs:/usr/local/apache-tomcat-8.5.32/logs --privileged=true test/tomcat]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker|3.文件、数据共享]]></title>
    <url>%2Farlo%2Fa27711a4%2F</url>
    <content type="text"><![CDATA[文件拷贝docker cp 容器ID:/文件路径/文件名称 本地文件路径 docker cp 本地文件路径 容器ID:/文件路径/文件名称 123456#从容器内拷贝文件到本地[root@localhost ~]# docker cp cd7a272e8786:/etc/passwd /tmp[root@localhost ~]# head -3 /tmp/passwd root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin 12345#将本地文件拷贝到容器内[root@localhost ~]# echo &quot;123&quot; &gt; file1[root@localhost ~]# docker cp file1 cd7a272e8786:/tmp[root@localhost ~]# docker exec -it cd7a272e8786 cat /tmp/file1123 数据卷-v命令实现docker run -it -v /宿主机的绝对路径目录:/容器内目录 镜像名 #如果不能写，需要添加–privileged=true docker run -it -v /宿主机的绝对路径目录:/容器内目录:ro 镜像名 #容器内文件只读 12345678[root@localhost ~]# docker run --name centos0211 -it -v /HostDataVolume:/ContainerDataVolume centos[root@cde93366c404 /]# cd /ContainerDataVolume/[root@cde93366c404 ContainerDataVolume]# ls[root@cde93366c404 ContainerDataVolume]# echo &quot;123&quot; &gt; file1[root@cde93366c404 ContainerDataVolume]# exitexit[root@localhost ~]# cat /HostDataVolume/file1 123 dockerfile方式数据卷123456vim /root/mydocker/Dockerfile#volume testFROM centosVOLUME [&quot;/DataVolumeContainer1&quot;,&quot;/DataVolumeContainer2&quot;]CMD echo &quot;finished, ------success!&quot;CMD /bin/bash 123456789101112131415161718[root@localhost mydocker]# docker build -f /root/mydocker/Dockerfile -t test/centos .Sending build context to Docker daemon 2.048kBStep 1/4 : FROM centos ---&gt; 470671670cacStep 2/4 : VOLUME [&quot;/DataVolumeContainer1&quot;,&quot;/DataVolumeContainer2&quot;] ---&gt; Running in ad5cdf37264aRemoving intermediate container ad5cdf37264a ---&gt; 3e834cfa3923Step 3/4 : CMD echo &quot;finished, ------success!&quot; ---&gt; Running in 033f927a7220Removing intermediate container 033f927a7220 ---&gt; d1b3cc53d482Step 4/4 : CMD /bin/bash ---&gt; Running in 47ebcfb99158Removing intermediate container 47ebcfb99158 ---&gt; c8ed8caf62e2Successfully built c8ed8caf62e2Successfully tagged test/centos:latest 123[root@localhost mydocker]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEtest/centos latest c8ed8caf62e2 10 seconds ago 237MB 123456[root@localhost mydocker]# docker run -it test/centos[root@7f54ea649e73 /]# ls -ltotal 16drwxr-xr-x 2 root root 6 Feb 11 23:18 DataVolumeContainer1drwxr-xr-x 2 root root 6 Feb 11 23:18 DataVolumeContainer2…… 1234567891011121314151617181920212223242526[root@localhost ~]# docker inspect 7f54ea649e73…………&quot;Mounts&quot;: [ &#123; &quot;Type&quot;: &quot;volume&quot;, &quot;Name&quot;: &quot;db383db0ed0f634dca3b88ac7b1b5eb7aaf1eb45aa5e198c1dbb672717cbadc4&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/db383db0ed0f634dca3b88ac7b1b5eb7aaf1eb45aa5e198c1dbb672717cbadc4/_data&quot;, &quot;Destination&quot;: &quot;/DataVolumeContainer1&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125;, &#123; &quot;Type&quot;: &quot;volume&quot;, &quot;Name&quot;: &quot;ed238e4c4a3bf80274f6bd6dd5d4a1aa00020e081a38d9ae668567d9a9301344&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/ed238e4c4a3bf80274f6bd6dd5d4a1aa00020e081a38d9ae668567d9a9301344/_data&quot;, &quot;Destination&quot;: &quot;/DataVolumeContainer2&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125;………… 123[root@7f54ea649e73 /]# echo &quot;123&quot; &gt; /DataVolumeContainer1/file1[root@localhost ~]# cat /var/lib/docker/volumes/db383db0ed0f634dca3b88ac7b1b5eb7aaf1eb45aa5e198c1dbb672717cbadc4/_data/file1 123 数据卷容器命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。 先启动一个父容器12345[root@localhost ~]# docker run -it --name dc01 test/centos[root@fe649066e76e /]# cd DataVolumeContainer1/[root@fe649066e76e DataVolumeContainer1]# touch add_dc01.txt 新建dc02/dc03容器，继承dc01123456789101112131415#新建dc02[root@localhost ~]# docker run -it --name dc02 --volumes-from dc01 test/centos[root@c14197144fe7 /]# cd /DataVolumeContainer1/[root@c14197144fe7 DataVolumeContainer1]# touch add_dc02.txt#新建dc03[root@localhost ~]# docker run -it --name dc03 --volumes-from dc01 test/centos[root@c409dacf9084 /]# cd /DataVolumeContainer1/[root@c409dacf9084 DataVolumeContainer1]# touch add_dc03.txt 在dc01上查看数据1234567891011[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESc409dacf9084 test/centos &quot;/bin/sh -c /bin/bash&quot; 4 minutes ago Up 4 minutes dc03c14197144fe7 test/centos &quot;/bin/sh -c /bin/bash&quot; 4 minutes ago Up 4 minutes dc02fe649066e76e test/centos &quot;/bin/sh -c /bin/bash&quot; 9 minutes ago Up 9 minutes dc01[root@localhost ~]# docker attach fe649066e76e[root@fe649066e76e DataVolumeContainer1]# ls -ltotal 0-rw-r--r-- 1 root root 0 Feb 12 00:02 add_dc01.txt-rw-r--r-- 1 root root 0 Feb 12 00:09 add_dc02.txt-rw-r--r-- 1 root root 0 Feb 12 00:10 add_dc03.txt 删除dc01,在dc02上添加数据，在dc03上查看12345678910111213141516171819202122[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESc409dacf9084 test/centos &quot;/bin/sh -c /bin/bash&quot; 5 minutes ago Up 5 minutes dc03c14197144fe7 test/centos &quot;/bin/sh -c /bin/bash&quot; 5 minutes ago Up 5 minutes dc02fe649066e76e test/centos &quot;/bin/sh -c /bin/bash&quot; 10 minutes ago Up 10 minutes dc01[root@localhost ~]# docker rm -f fe649066e76efe649066e76e[root@localhost ~]# docker attach c14197144fe7[root@c14197144fe7 DataVolumeContainer1]# ls -ltotal 0-rw-r--r-- 1 root root 0 Feb 12 00:02 add_dc01.txt-rw-r--r-- 1 root root 0 Feb 12 00:09 add_dc02.txt-rw-r--r-- 1 root root 0 Feb 12 00:10 add_dc03.txt[root@c14197144fe7 DataVolumeContainer1]# touch update_dc02.txt[root@localhost ~]# docker attach dc03[root@c409dacf9084 DataVolumeContainer1]# ls -ltotal 0-rw-r--r-- 1 root root 0 Feb 12 00:02 add_dc01.txt-rw-r--r-- 1 root root 0 Feb 12 00:09 add_dc02.txt-rw-r--r-- 1 root root 0 Feb 12 00:10 add_dc03.txt-rw-r--r-- 1 root root 0 Feb 12 00:13 update_dc02.txt 删除dc02，测试dc03数据是否可以访问123456789101112[root@localhost ~]# docker rm -f dc02dc02[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESc409dacf9084 test/centos &quot;/bin/sh -c /bin/bash&quot; 10 minutes ago Up 10 minutes dc03[root@localhost ~]# docker attach dc03[root@c409dacf9084 DataVolumeContainer1]# ls -ltotal 0-rw-r--r-- 1 root root 0 Feb 12 00:02 add_dc01.txt-rw-r--r-- 1 root root 0 Feb 12 00:09 add_dc02.txt-rw-r--r-- 1 root root 0 Feb 12 00:10 add_dc03.txt-rw-r--r-- 1 root root 0 Feb 12 00:13 update_dc02.txt 新建dc04继承dc03，然后删除dc031234567891011121314[root@localhost ~]# docker run -it --name dc04 --volumes-from dc03 test/centos[root@localhost ~]# docker rm -f dc03dc03[root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES5156e4538e53 test/centos &quot;/bin/sh -c /bin/bash&quot; 59 seconds ago Up 58 seconds dc04[root@localhost ~]# docker attach dc04[root@5156e4538e53 DataVolumeContainer1]# cd /DataVolumeContainer1/[root@5156e4538e53 DataVolumeContainer1]# ls -ltotal 0-rw-r--r-- 1 root root 0 Feb 12 00:02 add_dc01.txt-rw-r--r-- 1 root root 0 Feb 12 00:09 add_dc02.txt-rw-r--r-- 1 root root 0 Feb 12 00:10 add_dc03.txt-rw-r--r-- 1 root root 0 Feb 12 00:13 update_dc02.txt 结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker|2.常用操作命令]]></title>
    <url>%2Farlo%2F4846dd1c%2F</url>
    <content type="text"><![CDATA[查看版本信息123docker versiondocker info 获取帮助1docker --help 镜像命令列出本地镜像docker images-a: 列出本地所有镜像（包含中间层镜像） -q：只显示镜像ID –digests: 显示镜像的摘要信息 –no-trunc: 显示完整的镜像信息 12345678910111213[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEtomcat latest b56d8850aed5 4 days ago 529MBcentos latest 470671670cac 3 weeks ago 237MBhello-world latest fce289e99eb9 13 months ago 1.84kBREPOSITORY: 镜像仓库源TAG：镜像标签IMAGE ID ：镜像IDCREATED：镜像创建时间SIZE: 镜像大小同一仓库源可以有多个TAG，代表这个仓库源的不同个版本，我们使用REPOSITORY:TAG来定义不同的镜像。如果不指定一个镜像的标签版本，docker将默认使用REPOSITORY:lastest镜像 查找镜像docker search虽然本地已经修改为阿里云加速镜像站，但是查询还是从https://hub.docker.com/上查找镜像。 –no-trunc: 显示完整的镜像描述 -s: 列出收藏数不小于指定的镜像 –automated: 只列出automated build类型的镜像 123456789101112[root@localhost ~]# docker search tomcat -s 50Flag --stars has been deprecated, use --filter=stars=3 insteadNAME DESCRIPTION STARS OFFICIAL AUTOMATEDtomcat Apache Tomcat is an open source implementati… 2637 [OK] tomee Apache TomEE is an all-Apache Java EE certif… 74 [OK] dordoka/tomcat Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 base… 53 [OK] NAME：镜像名称DESCRIPTION：镜像描述STARS：点赞数OFFICIAL：官方镜像AUTOMATED：自动更新 拉取镜像dockerpull下载镜像 docker pull 镜像名称[:TAG]，如果不指定TAG，默认为lastest 删除镜像docker rmi删除镜像： docker rmi 镜像名称/镜像ID 删除单个镜像： docker rmi -f 镜像名称/镜像ID 删除多个镜像： docker rmi -f 镜像名称1:TAG/镜像ID1[空格]镜像名称2:TAG/镜像ID2 删除全部镜像： docker rmi -f $(docker images -qa) 12345678910111213141516171819删除镜像[root@localhost ~]# docker rmi hello-worldError response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container c0c56d69276d is using its referenced image fce289e99eb9强行删除镜像[root@localhost ~]# docker rmi -f fce289e99eb9Untagged: hello-world:latestUntagged: hello-world@sha256:9572f7cdcee8591948c2963463447a53466950b3fc15a247fcad1917ca215a2fDeleted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e删除多个镜像[root@localhost ~]# docker rmi -f hello-world nginxUntagged: hello-world:latestUntagged: hello-world@sha256:9572f7cdcee8591948c2963463447a53466950b3fc15a247fcad1917ca215a2fDeleted: sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587eUntagged: nginx:latestUntagged: nginx@sha256:ad5552c786f128e389a0263104ae39f3d3c7895579d45ae716f528185b36bc6fDeleted: sha256:2073e0bcb60ee98548d313ead5eacbfe16d9054f8800a32bedd859922a99a6e1Deleted: sha256:a3136fbf38691346715cac8360bcdfca0fff812cede416469653670f04e2cab0Deleted: sha256:99360ffcb2da18fd9ede194efaf5d4b90e7aee99f45737e918113e6833dcf278Deleted: sha256:488dfecc21b1bc607e09368d2791cb784cf8c4ec5c05d2952b045b3e0f8cc01e 容器命令新建并启动容器启动容器必须有一个镜像，如果本地有镜像就从本地启动，如果本地没有则先去镜像站点拉取镜像然后启动，并保存镜像到本地； docker run 镜像名称 –name=”容器新名字”：为容器指定一个名称； -d：后台运行容器，并返回容器ID，即启动守护式容器； -i：已交互模式运行容器，通常与-t同时使用； -t：为容器重新分配一个伪输入终端，通常与-i同时使用； -P：随机端口映射； -p：指定端口映射，有以下四种格式 ip:hostPort:containerPort / ip::containerPort / hostPort:containerPort / containerPort 123456789101112131415[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEtomcat latest b56d8850aed5 4 days ago 529MBcentos latest 470671670cac 3 weeks ago 237MB# 启动交互式容器[root@localhost ~]# docker run -it --name centos20200211 470671670cac[root@8ec89289309a /]# pwd/[root@8ec89289309a /]# lsbin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var[root@8ec89289309a /]## 启动守护式容器docker run -d # 启动一个mysql容器docker run -p 3306:3306 --name db1 -v /data/mysql/conf:/etc/mysql/conf.d -v /data/mysql/logs:/logs -v /data/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=111 -d mysql:5.7.29 列出的容器docker ps -a： 列出所有的容器，包含已经停止的容器 -l： 显示最新创建的容器 -n： 显示最近n次创建的容器 -q： 静默模式，只显示容器编号 –no-trunc ：不截断输出 1234[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8ec89289309a 470671670cac &quot;/bin/bash&quot; 3 minutes ago Up 3 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 3 hours ago Up 3 hours centos0211 退出容器 exit 容器停止退出 Ctrl+P+Q 容器不停止退出 开两个终端做个操作 1234[root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8ec89289309a 470671670cac &quot;/bin/bash&quot; 6 minutes ago Up 6 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 3 hours ago Up 3 hours centos0211 123[root@8ec89289309a /]# exitexit[root@localhost ~]# 123[root@localhost ~]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES8a5da2a84c74 centos &quot;/bin/bash&quot; 3 hours ago Up 3 hours centos0211 启动容器docker start 容器id/容器名称 12345678[root@localhost ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 12 minutes ago Up 12 minutes centos20200211f34465900de2 centos &quot;/bin/bash&quot; 28 minutes ago Exited (127) 27 minutes ago stoic_ride8a5da2a84c74 centos &quot;/bin/bash&quot; 3 hours ago Up 3 hours centos0211899f21d7be4f 470671670cac &quot;/bin/bash&quot; 4 hours ago Exited (0) 3 hours ago dazzling_hypatia8821a07e9822 470671670cac &quot;/bin/bash&quot; 4 hours ago Exited (130) 4 hours ago infallible_jonesc0c56d69276d fce289e99eb9 &quot;/hello&quot; 31 hours ago Exited (0) 31 hours ago interesting_dirac 1234567[root@localhost ~]# docker start 899f21d7be4f899f21d7be4f[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 12 minutes ago Up 12 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 3 hours ago Up 3 hours centos0211899f21d7be4f 470671670cac &quot;/bin/bash&quot; 4 hours ago Up 5 seconds dazzling_hypatia 重启容器docker restart 容器id/容器名称 1234567[root@localhost ~]# docker restart 899f21d7be4f899f21d7be4f[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 14 minutes ago Up 14 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 4 hours ago Up 4 hours centos0211899f21d7be4f 470671670cac &quot;/bin/bash&quot; 4 hours ago Up 1 second dazzling_hypatia 停止容器docker stop 容器id/容器名称 1234567891011[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 16 minutes ago Up 16 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 4 hours ago Up 4 hours centos0211899f21d7be4f 470671670cac &quot;/bin/bash&quot; 4 hours ago Up About a minute dazzling_hypatia[root@localhost ~]# docker stop 899f21d7be4f899f21d7be4f[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 16 minutes ago Up 16 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 4 hours ago Up 4 hours centos0211 强行停止容器docker kill 容器id/容器名称 123456789[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 16 minutes ago Up 16 minutes centos202002118a5da2a84c74 centos &quot;/bin/bash&quot; 4 hours ago Up 4 hours centos0211[root@localhost ~]# docker kill 8a5da2a84c748a5da2a84c74[root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 18 minutes ago Up 18 minutes centos20200211 删除容器删除已经停止的单个容器 docker rm 容器id/容器名称 删除正在运行的单个容器 docker rm -f 容器id/容器名称 一次性删除多个容器 docker rm -f $(docker ps -a -q) / docker ps -a -q |xargs docker rm 12345678[root@localhost ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESba4a8278426e 470671670cac &quot;/bin/bash&quot; 43 minutes ago Up 43 minutes centos20200211# 不加-f，只会删除已经停止退出的容器[root@localhost ~]# docker rm -f $(docker ps -a -q)ba4a8278426e[root@localhost ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 查看容器日志docker logs 容器id -t 加入时间戳 -t 跟随最新的日志打印 –tail 数字显示最后的多少条 12345678910111213141516171819202122[root@localhost ~]# docker logs -t -f --tail 20 4f30ee04eac72020-02-11T17:00:51.830836896Z bash: ll: command not found2020-02-11T17:01:56.146309331Z [root@4f30ee04eac7 /]# ss2020-02-11T17:01:56.279428980Z Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port 2020-02-11T17:02:08.128296224Z [root@4f30ee04eac7 /]# ps2020-02-11T17:02:08.134374708Z bash: $&apos;\345\271ps&apos;: command not found2020-02-11T17:02:13.669104746Z [root@4f30ee04eac7 /]ps -ef2020-02-11T17:02:13.685931632Z UID PID PPID C STIME TTY TIME CMD2020-02-11T17:02:13.687150066Z root 1 0 0 16:59 pts/0 00:00:00 /bin/bash2020-02-11T17:02:13.687185878Z root 18 1 0 17:02 pts/0 00:00:00 ps -ef[root@4f30ee04eac7 /]# [root@4f30ee04eac7 /]# ps -ef2020-02-11T17:05:14.601317299Z UID PID PPID C STIME TTY TIME CMD2020-02-11T17:05:14.601362985Z root 1 0 0 16:59 pts/0 00:00:00 /bin/bash2020-02-11T17:05:14.601375403Z root 19 1 0 17:05 pts/0 00:00:00 ps -ef2020-02-11T17:05:15.511402720Z [root@4f30ee04eac7 /]# pwd2020-02-11T17:05:15.511432928Z /2020-02-11T17:05:16.155997418Z [root@4f30ee04eac7 /]# ls2020-02-11T17:05:16.160923769Z bin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var2020-02-11T17:05:18.225781961Z [root@4f30ee04eac7 /]# cd 2020-02-11T17:05:20.175387626Z [root@4f30ee04eac7 ~]# id2020-02-11T17:05:20.180529056Z uid=0(root) gid=0(root) groups=0(root) 查看容器内进程docker top 容器id 123[root@localhost ~]# docker top 4f30ee04eac7UID PID PPID C STIME TTY TIME CMDroot 4648 4631 0 00:59 pts/0 00:00:00 /bin/bash 进入容器docker exec -it 容器ID bashshell docker attach 容器ID attach 直接进入容器启动命令的终端，不会启动新的进程 exec 是在容器中打开新的终端，并且可以启动新的进程 123456789[root@localhost ~]# docker run -it centos[root@cd7a272e8786 /]# # 按Ctrl+P+Q退出容器[root@localhost ~]# [root@localhost ~]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMEScd7a272e8786 centos &quot;/bin/bash&quot; 12 seconds ago Up 11 seconds heuristic_perlman[root@localhost ~]# docker attach cd7a272e8786[root@cd7a272e8786 /]# 1234[root@localhost ~]# docker exec -it -t cd7a272e8786 ls -l /tmptotal 8-rwx------ 1 root root 671 Jan 13 21:49 ks-script-_srt3u3c-rwx------ 1 root root 1379 Jan 13 21:49 ks-script-gpqu_kuo 查看容器内部细节docker inspect 容器id 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206[root@localhost ~]# docker inspect 4f30ee04eac7[ &#123; &quot;Id&quot;: &quot;4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba&quot;, &quot;Created&quot;: &quot;2020-02-11T16:59:07.103035515Z&quot;, &quot;Path&quot;: &quot;/bin/bash&quot;, &quot;Args&quot;: [], &quot;State&quot;: &#123; &quot;Status&quot;: &quot;running&quot;, &quot;Running&quot;: true, &quot;Paused&quot;: false, &quot;Restarting&quot;: false, &quot;OOMKilled&quot;: false, &quot;Dead&quot;: false, &quot;Pid&quot;: 4648, &quot;ExitCode&quot;: 0, &quot;Error&quot;: &quot;&quot;, &quot;StartedAt&quot;: &quot;2020-02-11T16:59:07.625242514Z&quot;, &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot; &#125;, &quot;Image&quot;: &quot;sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee&quot;, &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba/resolv.conf&quot;, &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba/hostname&quot;, &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba/hosts&quot;, &quot;LogPath&quot;: &quot;/var/lib/docker/containers/4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba/4f30ee04eac790df1edc4d1ae87df1096cb4aac78f8b5a741602068f5a3ad1ba-json.log&quot;, &quot;Name&quot;: &quot;/centos20200211&quot;, &quot;RestartCount&quot;: 0, &quot;Driver&quot;: &quot;devicemapper&quot;, &quot;Platform&quot;: &quot;linux&quot;, &quot;MountLabel&quot;: &quot;&quot;, &quot;ProcessLabel&quot;: &quot;&quot;, &quot;AppArmorProfile&quot;: &quot;&quot;, &quot;ExecIDs&quot;: null, &quot;HostConfig&quot;: &#123; &quot;Binds&quot;: null, &quot;ContainerIDFile&quot;: &quot;&quot;, &quot;LogConfig&quot;: &#123; &quot;Type&quot;: &quot;json-file&quot;, &quot;Config&quot;: &#123;&#125; &#125;, &quot;NetworkMode&quot;: &quot;default&quot;, &quot;PortBindings&quot;: &#123;&#125;, &quot;RestartPolicy&quot;: &#123; &quot;Name&quot;: &quot;no&quot;, &quot;MaximumRetryCount&quot;: 0 &#125;, &quot;AutoRemove&quot;: false, &quot;VolumeDriver&quot;: &quot;&quot;, &quot;VolumesFrom&quot;: null, &quot;CapAdd&quot;: null, &quot;CapDrop&quot;: null, &quot;Capabilities&quot;: null, &quot;Dns&quot;: [], &quot;DnsOptions&quot;: [], &quot;DnsSearch&quot;: [], &quot;ExtraHosts&quot;: null, &quot;GroupAdd&quot;: null, &quot;IpcMode&quot;: &quot;private&quot;, &quot;Cgroup&quot;: &quot;&quot;, &quot;Links&quot;: null, &quot;OomScoreAdj&quot;: 0, &quot;PidMode&quot;: &quot;&quot;, &quot;Privileged&quot;: false, &quot;PublishAllPorts&quot;: false, &quot;ReadonlyRootfs&quot;: false, &quot;SecurityOpt&quot;: null, &quot;UTSMode&quot;: &quot;&quot;, &quot;UsernsMode&quot;: &quot;&quot;, &quot;ShmSize&quot;: 67108864, &quot;Runtime&quot;: &quot;runc&quot;, &quot;ConsoleSize&quot;: [ 0, 0 ], &quot;Isolation&quot;: &quot;&quot;, &quot;CpuShares&quot;: 0, &quot;Memory&quot;: 0, &quot;NanoCpus&quot;: 0, &quot;CgroupParent&quot;: &quot;&quot;, &quot;BlkioWeight&quot;: 0, &quot;BlkioWeightDevice&quot;: [], &quot;BlkioDeviceReadBps&quot;: null, &quot;BlkioDeviceWriteBps&quot;: null, &quot;BlkioDeviceReadIOps&quot;: null, &quot;BlkioDeviceWriteIOps&quot;: null, &quot;CpuPeriod&quot;: 0, &quot;CpuQuota&quot;: 0, &quot;CpuRealtimePeriod&quot;: 0, &quot;CpuRealtimeRuntime&quot;: 0, &quot;CpusetCpus&quot;: &quot;&quot;, &quot;CpusetMems&quot;: &quot;&quot;, &quot;Devices&quot;: [], &quot;DeviceCgroupRules&quot;: null, &quot;DeviceRequests&quot;: null, &quot;KernelMemory&quot;: 0, &quot;KernelMemoryTCP&quot;: 0, &quot;MemoryReservation&quot;: 0, &quot;MemorySwap&quot;: 0, &quot;MemorySwappiness&quot;: null, &quot;OomKillDisable&quot;: false, &quot;PidsLimit&quot;: null, &quot;Ulimits&quot;: null, &quot;CpuCount&quot;: 0, &quot;CpuPercent&quot;: 0, &quot;IOMaximumIOps&quot;: 0, &quot;IOMaximumBandwidth&quot;: 0, &quot;MaskedPaths&quot;: [ &quot;/proc/asound&quot;, &quot;/proc/acpi&quot;, &quot;/proc/kcore&quot;, &quot;/proc/keys&quot;, &quot;/proc/latency_stats&quot;, &quot;/proc/timer_list&quot;, &quot;/proc/timer_stats&quot;, &quot;/proc/sched_debug&quot;, &quot;/proc/scsi&quot;, &quot;/sys/firmware&quot; ], &quot;ReadonlyPaths&quot;: [ &quot;/proc/bus&quot;, &quot;/proc/fs&quot;, &quot;/proc/irq&quot;, &quot;/proc/sys&quot;, &quot;/proc/sysrq-trigger&quot; ] &#125;, &quot;GraphDriver&quot;: &#123; &quot;Data&quot;: &#123; &quot;DeviceId&quot;: &quot;32&quot;, &quot;DeviceName&quot;: &quot;docker-253:0-102243954-b0ecd426ae759df49cab32c752911e1dcd35a84afc31955ba49a4699db11092d&quot;, &quot;DeviceSize&quot;: &quot;10737418240&quot; &#125;, &quot;Name&quot;: &quot;devicemapper&quot; &#125;, &quot;Mounts&quot;: [], &quot;Config&quot;: &#123; &quot;Hostname&quot;: &quot;4f30ee04eac7&quot;, &quot;Domainname&quot;: &quot;&quot;, &quot;User&quot;: &quot;&quot;, &quot;AttachStdin&quot;: true, &quot;AttachStdout&quot;: true, &quot;AttachStderr&quot;: true, &quot;Tty&quot;: true, &quot;OpenStdin&quot;: true, &quot;StdinOnce&quot;: true, &quot;Env&quot;: [ &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot; ], &quot;Cmd&quot;: [ &quot;/bin/bash&quot; ], &quot;Image&quot;: &quot;470671670cac&quot;, &quot;Volumes&quot;: null, &quot;WorkingDir&quot;: &quot;&quot;, &quot;Entrypoint&quot;: null, &quot;OnBuild&quot;: null, &quot;Labels&quot;: &#123; &quot;org.label-schema.build-date&quot;: &quot;20200114&quot;, &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;, &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;, &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;, &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;, &quot;org.opencontainers.image.created&quot;: &quot;2020-01-14 00:00:00-08:00&quot;, &quot;org.opencontainers.image.licenses&quot;: &quot;GPL-2.0-only&quot;, &quot;org.opencontainers.image.title&quot;: &quot;CentOS Base Image&quot;, &quot;org.opencontainers.image.vendor&quot;: &quot;CentOS&quot; &#125; &#125;, &quot;NetworkSettings&quot;: &#123; &quot;Bridge&quot;: &quot;&quot;, &quot;SandboxID&quot;: &quot;6b6ff8333ff7e94732a09dddc37744728b0febc6c1bf06bfaaf54bf791e576d3&quot;, &quot;HairpinMode&quot;: false, &quot;LinkLocalIPv6Address&quot;: &quot;&quot;, &quot;LinkLocalIPv6PrefixLen&quot;: 0, &quot;Ports&quot;: &#123;&#125;, &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/6b6ff8333ff7&quot;, &quot;SecondaryIPAddresses&quot;: null, &quot;SecondaryIPv6Addresses&quot;: null, &quot;EndpointID&quot;: &quot;66edac9cd524223f0a57e4c58d5080114826f6a90db64f1e734f6f6f5371627e&quot;, &quot;Gateway&quot;: &quot;172.17.0.1&quot;, &quot;GlobalIPv6Address&quot;: &quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;: 0, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;: 16, &quot;IPv6Gateway&quot;: &quot;&quot;, &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;, &quot;Networks&quot;: &#123; &quot;bridge&quot;: &#123; &quot;IPAMConfig&quot;: null, &quot;Links&quot;: null, &quot;Aliases&quot;: null, &quot;NetworkID&quot;: &quot;cd648ca5b88f8ec9e946884ed18c21fe1f2bbf214a5e3bd0094bdd61cc36f41c&quot;, &quot;EndpointID&quot;: &quot;66edac9cd524223f0a57e4c58d5080114826f6a90db64f1e734f6f6f5371627e&quot;, &quot;Gateway&quot;: &quot;172.17.0.1&quot;, &quot;IPAddress&quot;: &quot;172.17.0.2&quot;, &quot;IPPrefixLen&quot;: 16, &quot;IPv6Gateway&quot;: &quot;&quot;, &quot;GlobalIPv6Address&quot;: &quot;&quot;, &quot;GlobalIPv6PrefixLen&quot;: 0, &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;, &quot;DriverOpts&quot;: null &#125; &#125; &#125; &#125;]]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker|1.安装部署]]></title>
    <url>%2Farlo%2F4470a347%2F</url>
    <content type="text"><![CDATA[CentOS7 安装Docker删掉之前的docker版本1yum remove docker docker-common docker-selinux docker-engine 安装相关依赖1yum install -y yum-utils device-mapper-persistent-data lvm2 添加软件源信息1yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新并安装Docker-CE12yum makecache fastsudo yum -y install docker-ce 开启Docker服务1systemctl start docker 查看安装信息12345678910111213141516171819202122232425262728[root@localhost ~]# docker versionClient: Docker Engine - Community Version: 19.03.5 API version: 1.40 Go version: go1.12.12 Git commit: 633a0ea Built: Wed Nov 13 07:25:41 2019 OS/Arch: linux/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 19.03.5 API version: 1.40 (minimum version 1.12) Go version: go1.12.12 Git commit: 633a0ea Built: Wed Nov 13 07:24:18 2019 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.2.10 GitCommit: b34a5c8af56e510852c35414db4c1f4fa6172339 runc: Version: 1.0.0-rc8+dev GitCommit: 3e425f80a8c931f88e6d94a8c831b9d5aa481657 docker-init: Version: 0.18.0 GitCommit: fec3683 配置阿里云镜像加速推荐安装1.10.0以上版本的Docker客户端 使用阿里云账号登录1https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors 配置镜像加速器12345678mkdir -p /etc/dockertee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;&#123; &quot;registry-mirrors&quot;: [&quot;https://yk5r9j0f.mirror.aliyuncs.com&quot;]&#125;EOFsystemctl daemon-reloadsystemctl restart docker]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具|利用GoAccess分析Nginx访问日志]]></title>
    <url>%2Farlo%2F85bf3410%2F</url>
    <content type="text"><![CDATA[项目上线之后，访问量逐渐增多，最近发现一些异常，从服务器监控zabbix没有发现比较有用的信息，链路监控pinpoint上发现访问量比之前增加了很多，所以想从入口方面分析一下来源，看看是不是被人抓取数据了。 Nginx日志格式我这里使用的是阿里开源的tengine，和nginx是一样的，默认的日志格式 1234567log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log logs/access.log main; error_log logs/error.log warn; access_log &quot;pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G&quot; main; 1113.200.77.134 - - [19/Dec/2019:10:45:39 +0800] &quot;GET /air/home/code/regions HTTP/1.1&quot; 200 1391 &quot;http://localhost:8080/app/tabs/home&quot; &quot;Mozilla/5.0 (Linux; Android 9; COL-AL10 Build/HUAWEICOL-AL10; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/72.0.3626.121 Mobile Safari/537.36&quot; &quot;-&quot; 参数 说明 实例 $remote_addr 客户端地址 113.200.77.134 $remote_user 客户端用户名称 - - $time_local 访问时间和时区 19/Dec/2019:10:45:39 +0800] $request 请求的URI和HTTP协议 GET /air/home/code/regions HTTP/1.1 $http_host 请求地址，即浏览器中你输入的地址（IP或域名） $status HTTP请求状态 200 $upstream_status upstream状态 $body_bytes_sent 发送给客户端文件内容大小 1391 $http_referer url跳转来源 http://localhost:8080/app/tabs/home $http_user_agent 用户终端浏览器等信息 Mozilla/5.0 (Linux; Android 9; COL-AL10 Build/HUAWEICOL-AL10; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/72.0.3626.121 Mobile Safari/537.36 $ssl_protocol SSL协议版本 $ssl_cipher 交换数据中的算法 $http_x_forwarded_for HTTP 扩展头部 $upstream_addr 后台upstream的地址，即真正提供服务的主机地址 $request_time Nginx处理整个请求所用总时间 $upstream_connect_time Nginx与upstream server建立连接所用时间 $upstream_header_time 从建立连接成功到接收第一个字节之间的时间 $upstream_response_time 从建立连接成功到接收第一个字节之间的时间 GoAccessGoAccess是一个开源的实时 Web日志分析器和交互式查看器，可在 nix系统的终端中或通过*浏览器运行。 它为需要实时可视服务器报告的系统管理员提供了快速而有价值的HTTP统计信息。 官网地址：https://goaccess.io/ github地址：https://github.com/allinurl/goaccess GoAccess日志规范：https://goaccess.io/man#custom-log 安装GoAccess1234567yum install geoip-devel ncurses-devel glib2 glib2-devel ncurses-devel zlib zlib-devel wget https://tar.goaccess.io/goaccess-1.3.tar.gztar -xzvf goaccess-1.3.tar.gzcd goaccess-1.3/./configure --prefix=/usr/local/goaccess --enable-utf8 --enable-geoip=legacymakemake install 1vim /usr/local/goaccess/etc/goaccess/goaccess.conf 配置日志格式，和nginx里的日志格式匹配起来，日志规范参考上述链接 123time-format %H:%M:%Sdate-format %d/%b/%Ylog-format %h %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%u&quot; 1234567891011121314%t 匹配time-format格式的时间字段%d 匹配date-format格式的日期字段%h host(客户端ip地址，包括ipv4和ipv6)%r 来自客户端的请求行%m 请求的方法%U URL路径%H 请求协议%s 服务器响应的状态码%b 服务器返回的内容大小%R HTTP请求头的referer字段%u 用户代理的HTTP请求报头%D 请求所花费的时间，单位微秒%T 请求所花费的时间，单位秒%^ 忽略这一字段 终端查看日志1/usr/local/goaccess/bin/goaccess -a -d -f /usr/local/tengine/logs/access.log -p /usr/local/goaccess/etc/goaccess/goaccess.conf F1或h：帮助 F5 ：刷新主界面 q：退出程序/当前窗口/折叠当前模块 o或Enter：展开选中的模块或窗口 0-9以及Shift + 0：将选中的模块或窗口激活 k和j：模块内部移动 c：修改配色 ^f和^b：模块中上下滚屏 tab shift+tab：前后切换模块 s：模块内部排序选择 /：在所有模块中搜索(支持正则) n：找到下个匹配 g和G：跳到第一项/最后一项 生成html格式1usr/local/goaccess/bin/goaccess -a -d -f /usr/local/tengine/logs/access_log.1 -p /usr/local/goaccess/etc/goaccess/goaccess.conf -o ~/sx.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Oracle自动删除归档日志]]></title>
    <url>%2Farlo%2F272be08f%2F</url>
    <content type="text"><![CDATA[Oracle日志的分类Alter log files：警报日志Trace files：跟踪日志（用户和进程）redo log ：重做日志（记录数据库的更改） 重做日志分为在线重做日志和归档重做日志在线重做日志：又称联机重做日志，指Oracle以SQL脚本的形式记录数据库的数据更新，换句话说，实时保存已执行的SQL脚本到在线日志文件中归档重做日志：简称归档日志，是指当条件满足时，Oracle将在线重做日志以文件形式保存到硬盘（持久化）重做日志的简单原理：在数据更新操作commit前，将更改的SQL脚本写入重做日志。主要用于数据库的增量备份和增量恢复。重做日志直接对应于硬盘的重做日志文件（有在线和归档俩种），重做日志文件以组的形式组织，一个重做日志组包括一个或多个日志文件。 归档重做日志其实，所谓的归档，就是指，将在线日志进行归档，持久化成固定的文件到硬盘，便于以后的恢复和查询。当然，前提条件是数据库要处于归档模式。在线重做日志大小毕竟是有限的，当都写满了的时候，就面临着俩个选择，第一个就是把以前在线重做日志从头擦除开始继续写，第二种就是把以前的在线重做日志先进行备份，然后对被备份的日志擦除开始写新的在线Redo File。这种备份的在线重做日志就是归档日志。而数据库如果采用这种生成归档日志的模式的话，就是归档日志模式（ARCHIVELOG模式），反之如果不生成归档日志，就是非归档日志模式（NOARCHIVELOG模式）。有了归档日志有什么好处？比如在这个月1号的时候备份了一次数据，然后过了10天，这个10天生成了很多在线重做日志，突然发现其中有一个数据磁盘出问题了，不能用了，那我该如何是好呢？如果没有采用归档日志，那么实际上磁盘中只会有几个最新的在线重做日志。那么我只能把出问题的数据磁盘上所占据的表空间都删除掉。但是如果是SYSTEM表空间所设计的磁盘出错了，就没办法这么做了，只能用第二种方法。第二种方法就是把1号备份的数据拿出来恢复。那么1号到10号之间的10天的数据都丢了，如果是关键系统，比如证券金融什么的系统，就要让你赔钱赔死掉。但是如果有了归档日志，那么你这10天的重做日志都会存放起来，那么DBA首先会把1号的备份数据恢复，然后再拿这10天的Redo日志来进行一次数据操作重放，那么就可以完全恢复最新的数据库，不会有什么后果了。在软件开发的时候，由于测试服务器的配置有限，特别是磁盘空间有限，所以可能要限制Redo文件的大小，有可能把系统设置为NOARCHIVELOG模式了。但是在实际的生产环境下，基本上一定要使用ARCHIVELOG模式，否则万一出了问题，真是苦都来不及。有人可能会怕归档日志造成性能损失。其实这个完全是杞人忧天的，归档日志只是做一个备份，其实也就是多耗一些磁盘空间而已。在当前的软件系统中，硬盘的存储容量成本已经属于低到可以忽略的地步，而最重要的是数据库的安全。DBA的任务本来就是确保数据的安全，如果连安全都保证不了，那点微乎其微的性能提高又有什么用呢。归档日志（Archive Log）是非活动的重做日志备份。通过使用归档日志，可以保留所有重做历史记录，当数据库处于Archive Log模式并进行日志切换时，后台进程ARCH会将重做日志的内容保存到归档日志中，当数据库出现介质失败时，使用数据文件备份，归档日志和重做日志可以完全恢复数据库。 查看数据库当前是否为归档模式SELECT LOG_MODE FROM V$DATABASE;ARCHIVELOG（归档模式）、NOARCHIVELOG（非归档模式） 切换数据库为归档模式shutdown immediate #关闭数据库startup mount #开启数据库到挂载状态alter database archivelog; #改变模式为ARCHIVELOGarchive log start; #开启归档日志alter datebase open; #打开数据库 查找归档日志目录SELECT destination FROM V$archive_dest; 在线重做日志的原理对于在线重做日志，Oracle 11g默认对于每个数据库实例，建立3个在线日志组，每组一个日志文件，文件名称为REDO01.LOG,REDO02.LOG,REDO03.LOG。（用户可以通过视图操作添加/修改/删除日志组合日志文件来自定义在线重做日志）每组内的日志文件的内容完全相同，且保存在不同的位置，用于磁盘日志镜像，以做多次备份提高安全性。默认情况这3组通常只有一组处于活动状态，不断地同步写入已操作的脚本，当日志文件写满时（达到指定的空间配额），如果当前数据库处于归档模式，则将在线日志归档到硬盘，成为归档日志；若当前数据库处于非归档模式，则不进行归档操作，而当前在线日志的内容会被下一次重新写入覆盖而无法保存。因此，通常数据库在运行时，是处于归档模式下的，以保存数据更新的日志。当前归档日志组写满够，Oracle会切换到下一日志组，继续写入，这样循环切换；处于归档模式下，切换至原已写满的日志组，若该日志组归档完毕则则覆盖写入，若没有则只能使用日志缓冲区，等待归档完毕之后才能覆盖写入。当然，处于非归档模式下是直接覆盖写入的。 删除归档日志由于归档日志日积月累，占用空间很大，我们只需要保留最近一段时间的日志即可，所以我们要对之前的内容做删除处理。 用oracle用户登陆rman并连接数据库hostname@oracle$ rman target / 列出并确认归档日志路径RMAN&gt;list archivelog all; 删除7天以前的归档日志RMAN&gt;DELETE ARCHIVELOG ALL COMPLETED BEFORE &#39;SYSDATE-7&#39;; 表明删除当前的系统时间7天前的日志 Windows下自动删除归档日志新建E:\database_backup\rm_archivelog.txt文件123456connect target /run&#123; crosscheck archivelog all; DELETE ARCHIVELOG ALL COMPLETED BEFORE &apos;SYSDATE-7&apos;; delete expired archivelog all;&#125; 新建E:\database_backup\rm_archivelog.bat文件123456789101112@echo offset &quot;filename=rm_archivelog_task_log_%date:~0,4%%date:~5,2%%date:~8,2%.txt&quot;(echo.echo ========================= 正在清除过期归档文件，请稍等...... %date% %time% =========================echo.rman cmdfile=E:\database_backup\rm_archivelog.txtecho.echo ========================= 【结束清理 %date% %time%】 =========================echo.)&gt;&gt;E:\database_backup\%filename% 2&gt;&amp;1&lt;nulpause 设置计划任务每日凌晨执行E:\database_backup\rm_archivelog.bat脚本 Linux下自动删除归档日志编写脚本vim /home/oracle/.rm_archivelog.sh1234567891011121314151617181920#!/bin/bash#Author 南山小樵#Date 2019/12/16if [ -f ~/.bash_profile ]; then . ~/.bash_profilefi#set envORACLE_SID=orclORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1/$ORACLE_HOME/bin/rman target sys/passwd@orcl log=/tmp/rman.log &lt;&lt;EOF run&#123;crosscheck archivelog all; delete noprompt expired archivelog all; delete noprompt archivelog all completed before &apos;sysdate - 7&apos;; &#125; exit;EOF 给脚本赋予可执行权限chmod +x /home/oracle/.rm_archivelog.sh 设置计划任务crontab -l100 3 * * * /home/oracle/.rm_archivelog.sh 参考链接：https://www.jianshu.com/p/3bc8f372fe16https://www.cnblogs.com/kerrycode/p/9046372.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有PE的情况下，如何强行修改Windows Server 2012密码？]]></title>
    <url>%2Farlo%2Ffba0cc3c%2F</url>
    <content type="text"><![CDATA[对windows环境比较熟悉的朋友都知道，windows下修改密码最常用的就是PE工具了，一键修改；最近服务器上有台Windows Server 2012的虚拟机密码忘记了，无奈又不能直接挂载PE上去，在网上看到这个方法，感觉很方便，在此记录一下！（服务器是Xen Server环境虚拟机，本教程是vmware workstations，方法差不多） 挂载iso镜像到虚拟机重启虚拟机，从cd/dvd-rom启动 引导至安装操作系统界面，点击下一步 进入安装界面，点击左下角开始修复 选择一个选项界面-“疑难杂症” 高级选项界面-命令提示符 在弹出的命令提示符窗口操作12345d:cd Windows\System32move Utilman.exe Utilman.exe.bakcopy cmd.exe Utilman.exeshutdown /r /t 0 重启虚拟机点击左下角，弹出命令行提示框 将administrator密码修改为111.com？ 1net user administrator 111.com? 成功登录操作系统。]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle单实例配置多个监听]]></title>
    <url>%2Farlo%2F1651f01e%2F</url>
    <content type="text"><![CDATA[监听注册Oracle的注册就是将数据库作为一个服务注册到监听程序，而客户端不需要知道数据库名和实例名，只需要知道改数据库对外提供的服务名就可以申请连接到数据库。 动态注册：由PMON进程动态注册至监听中静态注册：通过解析listene.ora文件 在没有listener.ora配置文件的情况下，如果启动监听，则监听为动态注册。用图形化netca创建的监听，默认也为动态注册；监听的配置文件都在$ORACLE_HOME/network/admin目录下，默认监听名为LISTENER，端口为1521 动态监听在动态注册监听的环境中，listener.ora文件可以不包括当前数据库的实例信息，所以这个文件不必要。实例启动时，会由Oracle PMON进程将数据库实例信息动态注册至监听上。当Oracle实例关闭时，会再次由PMON进程自动从监听里面撤销当前实例信息。动态注册成功大概需要一分钟时间，注册成功状态为READY； 一般有3种状态：READY、BLOCKED和RESTRICEDREADY：表示数据库实例已经处于mount或者open状态，可以接受客户端连接BLOCKED：表示数据库实例还处于nomount状态或者该实例类型为ASM实例，不接受客户端连接，如果这时候客户端去连接数据库会报ora-12528错误RESTRICED：表示数据库处于RESTRICED模式，不接受普通权限的远程客户端连接，如果这时候客户端去连接数据库会报ora-12526错误 编辑监听文件listener.ora[oracle@dbserver admin]$ cat listener.ora12345678910111213141516171819# listener.ora Network Configuration File: /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.ora# Generated by Oracle configuration tools.LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1521)) ) )LISTENER2 = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1522)) (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1522)) ) )ADR_BASE_LISTENER = /u01/app/oracle 编辑tnsnames.ora[oracle@dbserver admin]$ cat tnsnames.ora1234567891011121314151617181920# tnsnames.ora Network Configuration File: /u01/app/oracle/product/11.2.0/db_1/network/admin/tnsnames.ora# Generated by Oracle configuration tools.ORCL = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) ) )TEST = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1522)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl) ) ) 启动新创建的监听LISTENER2[oracle@dbserver admin]$ lsnrctl start LISTENER2123456789101112131415161718192021222324252627282930LSNRCTL for Linux: Version 11.2.0.4.0 - Production on 05-SEP-2019 21:01:25Copyright (c) 1991, 2013, Oracle. All rights reserved.Starting /u01/app/oracle/product/11.2.0/db_1/bin/tnslsnr: please wait...TNSLSNR for Linux: Version 11.2.0.4.0 - ProductionSystem parameter file is /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.oraLog messages written to /u01/app/oracle/diag/tnslsnr/dbserver/listener2/alert/log.xmlListening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1522)))Listening on: (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=dbserver)(PORT=1522)))Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1522)))STATUS of the LISTENER------------------------Alias LISTENER2Version TNSLSNR for Linux: Version 11.2.0.4.0 - ProductionStart Date 05-SEP-2019 21:01:25Uptime 0 days 0 hr. 0 min. 0 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.oraListener Log File /u01/app/oracle/diag/tnslsnr/dbserver/listener2/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1522))) (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=dbserver)(PORT=1522)))The listener supports no servicesThe command completed successfully 修改实例注册到新创建的监听LISTENER21234567891011121314151617181920212223242526[oracle@dbserver admin]$ sqlplus / as sysdbaSQL*Plus: Release 11.2.0.4.0 Production on Thu Sep 5 21:05:56 2019Copyright (c) 1982, 2013, Oracle. All rights reserved.Connected to:Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL&gt; show parameter local_listener;NAME TYPE VALUE------------------------------------ ----------- ------------------------------local_listener stringSQL&gt; alter system set local_listener=&apos;TEST&apos;;System altered.SQL&gt; show parameter local_listener;NAME TYPE VALUE------------------------------------ ----------- ------------------------------local_listener string TESTSQL&gt; 修改之后，我们查看监听状态，可以发现orcl实例已经从默认的监听LISTENER修改为LISTENER2了。 注册多个端口1234567891011121314151617SQL&gt; ALTER SYSTEM SET LOCAL_LISTENER=&apos;(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.100.132)(PORT=1521))&apos;,&apos;(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.100.132)(PORT=1522))&apos;;System altered.SQL&gt; show parameter local_listener;NAME TYPE VALUE------------------------------------ ----------- ------------------------------local_listener string (ADDRESS=(PROTOCOL=TCP)(HOST=1 92.168.100.132)(PORT=1521)), ( ADDRESS=(PROTOCOL=TCP)(HOST=19 2.168.100.132)(PORT=1522))SQL&gt; alter system register;System altered.SQL&gt; 静态监听静态注册不管实例是否启动，在启动监听的时候都会将实例名称注册到监听中，主要用于DBA远程启动数据库实例。 编辑监听配置文件listener.ora1234567891011121314151617181920212223242526272829303132333435363738[oracle@dbserver admin]$ cat listener.ora # listener.ora Network Configuration File: /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.ora# Generated by Oracle configuration tools.LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1521)) ) )SID_LIST_LISTENER = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = orcl) (SID_NAME = orcl) (ORACLE_HOME = /u01/app/oracle/product/11.2.0/db_1 ) ) )LISTENER2 = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1522)) (ADDRESS = (PROTOCOL = TCP)(HOST = dbserver)(PORT = 1522)) ) )SID_LIST_LISTENER2 = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = orcl) (SID_NAME = orcl) (ORACLE_HOME = /u01/app/oracle/product/11.2.0/db_1 ) ) )ADR_BASE_LISTENER = /u01/app/oracle 启动服务]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle解锁用户和表]]></title>
    <url>%2Farlo%2F5b695efc%2F</url>
    <content type="text"><![CDATA[解锁用户1alter user arlo account unlock; 数据级别解锁表锁表查询的代码有以下的形式12select count(*) from v$locked_object;select * from v$locked_object; 查看哪个表被锁123select b.owner,b.object_name,a.session_id,a.locked_mode from v$locked_object a,dba_objects b where b.object_id = a.object_id;--select b.owner TABLEOWNER, b.object_name TABLENAME, c.OSUSER LOCKBY,c.USERNAME LOGINID, c.sid SID, c.SERIAL# SERIAL from v$locked_object a,dba_objects b, v$session c where b.object_id = a.object_id AND a.SESSION_ID =c.sid; 查看是哪个session引起的1select b.username,b.sid,b.serial#,logon_time from v$locked_object a,v$session b where a.session_id = b.sid order by b.logon_time; 查看是哪个sql引起的1select b.username,b.sid,b.serial#,c.* from v$locked_object a,v$session b,v$sql c where a.session_id = b.sid and b.SQL_ID = c.sql_id and c.sql_id = &apos;&apos; order by b.logon_time; 杀掉对应进程1alter system kill session&apos;1025,41&apos;; --其中1025为sid,41为serial# 系统界别解锁表今天在使用上述方法解锁用户的时候报错 1234alter system kill session &apos;2293,85&apos;*ERROR at line 1:ORA-00031: session marked for kill 查找进程id如果利用上面的命令杀死一个进程后，进程状态被置为”killed”，但是锁定的资源很长时间没有被释放，那么可以在os一级再杀死相应的进程（线程），首先执行下面的语句获得进程（线程）号：2293 1234SYS@orcl&gt; select spid, osuser, s.program from v$session s,v$process p where s.paddr=p.addr and s.sid=2293;SPID OSUSER PROGRAM-------- ----------------------- ---------------------------------------------384159 Administrator SQL Developer 在Linux中结束进程在Linux操作系统中执行命令杀掉进程 1kill -9 384159 在Windows中结束进程在windows（unix也适用）用orakill杀死线程，orakill是oracle提供的一个可执行命令，语法为：orakill sid thread – sid：表示要杀死的进程属于的实例名 thread：是要杀掉的线程号1C:&gt; orakill orcl 384159 查看Oracle链接客户端的IP等信息查看每个oracle帐户的连接总数1234567891011121314151617181920212223242526--查看当前连接数select count(*) from v$process;--查看会话session：select * from v$session where username is not null;select username,count(username) from v$session where username is not null group by username;--查看最大连接数select value from v$parameter where name =&apos;processes&apos;;--查看并发连接数Select count(*) from v$session where status=&apos;ACTIVE&apos;;--查询：客户端设备标识、客户端程序、oracle用户名、消耗的连接数量SELECT B.MACHINE 机器名, B.PROGRAM 程序名, B.USERNAME 用户名, COUNT(*) 连接数 FROM V$PROCESS A, V$SESSION B WHERE A.ADDR = B.PADDR AND B.USERNAME IS NOT NULL GROUP BY B.MACHINE, B.PROGRAM, B.USERNAME ORDER BY COUNT(*) DESC;--杀死指定的进程alter system kill session &apos;sid,serial#&apos; immediate; 缺省从 v$session 中不能直接获得客户端 IP，可以在数据库中创建一个追踪客户端IP地址的触发器1234create or replace trigger on_logon_trigger after logon on database begin dbms_application_info.set_client_info(sys_context(&apos;userenv&apos;, &apos;ip_address&apos;)); end; 比较常用的显示客户端信息的sql1234select sid,serial#,username,program,machine,client_info from v$session where username is not null order by username,program,machine; connection、process和session的基本知识每个sql login称为一个连接（connection)，而每个连接，可以产生一个或多个会话，如果数据库运行在专用服务器方式，一个会话对应一个服务器进程（process)，如果数据库运行在共享服务器方式，一个服务器进程可以为多个会话服务。 Connection并不是直接建立在用户进程和数据库实例之间的。而是在用户进程和Server Process（服务器进程）之间的，因此有一个Connection就一定会有一个用户进程和一个服务器进程，但不一定会存在Session。比如，如果需要将东西从A运到B，Connection可以看成是一座“桥”，而卡车把东西从A运到B后并返回A，这就是Session。所以，只要不断开连接，随时都可以在这个连接上创建出会话。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(10)使用zabbix监控IPMI]]></title>
    <url>%2Farlo%2F6abfbe9a%2F</url>
    <content type="text"><![CDATA[IPMI介绍 IPMI（Intelligent Platform Management Interface）即智能平台管理接口是使硬件管理具备“智能化”的新一代通用接口标准。用户可以利用 IPMI 监视服务器的物理特征，如温度、电压、电扇工作状态、电源供应以及机箱入侵等。Ipmi 最大的优势在于它是独立于 CPU BIOS 和 OS 的，所以用户无论在开机还是关机的状态下，只要接通电源就可以实现对服务器的监控。Ipmi 是一种规范的标准，其中最重要的物理部件就是BMC(Baseboard Management Controller 如图1)，一种嵌入式管理微控制器，它相当于整个平台管理的“大脑”，通过它 ipmi 可以监控各个传感器的数据并记录各种事件的日志。 配置服务器IPMI使用服务器默认的ipmi地址登录，然后进入到ipmi登录界面，修改规划的ip地址，我这里以浪潮服务器为例 修改zabbix server配置文件1sed -i &apos;/# StartIPMIPollers=0/aStartIPMIPollers=3&apos; /etc/zabbix/zabbix_server.conf /etc/init.d/zabbix-server restart 安装IPMI相关软件yum -y install OpenIPMI OpenIPMI-devel ipmitool freeipmi 获取IPMI传感器参数ipmitool -I lanplus -H 10.206.2.52 -U admin -P passwd sensor 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111CPU0_Temp | 55.000 | degrees C | ok | na | na | na | 101.000 | 103.000 | na CPU1_Temp | 52.000 | degrees C | ok | na | na | na | 101.000 | 103.000 | na PCH_Temp | 50.000 | degrees C | ok | na | na | na | 95.000 | 100.000 | na DIMMG0_Temp | 45.000 | degrees C | ok | na | na | na | 83.000 | 93.000 | na DIMMG1_Temp | 43.000 | degrees C | ok | na | na | na | 83.000 | 93.000 | na Inlet_Temp | 25.000 | degrees C | ok | na | na | na | 40.000 | 42.000 | na Outlet_Temp | 48.000 | degrees C | ok | na | na | na | na | na | na SYS0_Temp | 42.000 | degrees C | ok | na | na | na | na | na | na SYS1_Temp | 35.000 | degrees C | ok | na | na | na | na | na | na RAID_Temp | na | degrees C | na | na | na | na | 105.000 | 115.000 | na GPU0_Temp | na | degrees C | na | na | na | na | 82.000 | 92.000 | na GPU1_Temp | na | degrees C | na | na | na | na | 82.000 | 92.000 | na MIC0_Temp | na | degrees C | na | na | na | na | 104.000 | 114.000 | na MIC1_Temp | na | degrees C | na | na | na | na | 104.000 | 114.000 | na SYS_VCCIO | 0.950 | Volts | ok | 0.690 | 0.770 | 0.850 | 1.170 | 1.250 | 1.330 SYS_12V | 12.126 | Volts | ok | 9.024 | 9.776 | 10.528 | 13.536 | 14.288 | 15.040 SYS_3.3V | 3.360 | Volts | ok | 2.660 | 2.800 | 2.940 | 3.658 | 3.798 | 3.938 SYS_5V | 5.220 | Volts | ok | 3.888 | 4.176 | 4.464 | 5.544 | 5.832 | 6.120 PCH_P1V05 | 1.050 | Volts | ok | 0.770 | 0.850 | 0.930 | 1.170 | 1.250 | 1.330 PCH_P1V5 | 1.540 | Volts | ok | 1.180 | 1.260 | 1.340 | 1.670 | 1.750 | 1.830 CPU0_VCORE | 1.770 | Volts | ok | 1.040 | 1.120 | 1.200 | 2.300 | 2.380 | 2.460 CPU1_VCORE | 1.780 | Volts | ok | 1.040 | 1.120 | 1.200 | 2.300 | 2.380 | 2.460 CPU0_DDR_VDDQAB | 1.210 | Volts | ok | 0.910 | 0.990 | 1.070 | 1.330 | 1.410 | 1.490 CPU0_DDR_VDDQCD | 1.230 | Volts | ok | 0.910 | 0.990 | 1.070 | 1.330 | 1.410 | 1.490 CPU1_DDR_VDDQEF | 1.230 | Volts | ok | 0.910 | 0.990 | 1.070 | 1.330 | 1.410 | 1.490 CPU1_DDR_VDDQGH | 1.220 | Volts | ok | 0.910 | 0.990 | 1.070 | 1.330 | 1.410 | 1.490 FAN_0 | 5760.000 | RPM | ok | na | 0.000 | na | na | na | na FAN_1 | na | RPM | na | na | 0.000 | na | na | na | na FAN_2 | 5760.000 | RPM | ok | na | 0.000 | na | na | na | na FAN_3 | na | RPM | na | na | 0.000 | na | na | na | na FAN_4 | 5952.000 | RPM | ok | na | 0.000 | na | na | na | na FAN_5 | na | RPM | na | na | 0.000 | na | na | na | na FAN_6 | 5952.000 | RPM | ok | na | 0.000 | na | na | na | na FAN_7 | na | RPM | na | na | 0.000 | na | na | na | na CPU0_Status | 0x0 | discrete | 0x8080| na | na | na | na | na | na CPU1_Status | 0x0 | discrete | 0x8080| na | na | na | na | na | na MEM_CHA0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHA1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHA2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHB0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHB1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHB2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHC0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHC1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHC2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHD0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHD1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHD2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHE0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHE1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHE2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHF0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHF1_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHF2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHG0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHG1_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHG2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHH0_Status | 0x0 | discrete | 0x4080| na | na | na | na | na | na MEM_CHH1_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na MEM_CHH2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD0_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD1_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD2_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD3_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD4_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD5_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD6_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD7_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD8_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD9_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD10_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD11_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD12_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD13_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD14_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD15_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD16_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD17_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD18_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD19_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD20_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD21_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD22_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD23_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD24_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD0_Rear_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD1_Rear_Status | 0x0 | discrete | 0x0180| na | na | na | na | na | na HDD2_Rear_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na HDD3_Rear_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na Total_Power | 335.000 | Watts | ok | na | na | na | na | na | na PSU0_Supply | 0x0 | discrete | 0x0180| na | na | na | na | na | na PSU1_Supply | 0x0 | discrete | 0x0180| na | na | na | na | na | na PSU0_Unit | 0x0 | discrete | 0x0080| na | na | na | na | na | na PSU1_Unit | 0x0 | discrete | 0x0080| na | na | na | na | na | na EventLog | 0x0 | discrete | 0x0080| na | na | na | na | na | na ME_FW_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na BMC_Boot_Up | 0x0 | discrete | 0x0280| na | na | na | na | na | na IPMI_Watchdog | 0x0 | discrete | 0x0080| na | na | na | na | na | na RISER0_Temp | 48.000 | degrees C | ok | na | na | na | na | na | na RISER1_Temp | na | degrees C | na | na | na | na | na | na | na HDD_REAR0_Temp | 36.000 | degrees C | ok | na | na | na | 60.000 | 70.000 | na HDD_REAR1_Temp | na | degrees C | na | na | na | na | 60.000 | 70.000 | na NVME_0_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_1_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_2_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_3_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_4_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_5_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_6_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na NVME_7_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na All_Unit_Status | 0x0 | discrete | 0x0080| na | na | na | na | na | na Zabbix web界面添加主机 修改模板，添加监控项由于默认自带的模板很多监控项获取不到数据，这里我手动监测一下传感器，自己把传感器能获取的数据添加到模板里去 ipmitool -I lanplus -H 10.206.2.52 -U admin -P admin sensor list ipmitool -I lanplus -H 10.206.2.52 -U admin -P admin sensor get &quot;CPU0_Temp&quot; 扩展打印当前 BMC 配置 ipmitool lan print 1 使用静态IP地址 ipmitool lan set 1 ipsrc static 设置 IP ipmitool lan set 1 ipaddr 172.16.10.205 设置掩码 ipmitool lan set 1 netmask 255.255.0.0 ipmitool lan set 1 access on 配置网关 ipmitool lan set 1 defgw ipaddr 172.16.10.1列出当前用户列表 ipmitool user list 1 其中 2 为要设置密原的用户 ID 号，设置密码为 111.com ipmitool user set password 2 “111.com” 重启BMC ipmitool -H 10.206.2.52 -U admin -P admin -I lanplus mc reset warm 参考资料: https://www.cnblogs.com/kaishirenshi/p/9703127.html]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins插件“Publish Over SSH”拷贝文件到远程服务器并执行脚本]]></title>
    <url>%2Farlo%2Fe68b6718%2F</url>
    <content type="text"><![CDATA[之前的java项目打出来的是war包，通过插件”Deploy to container”部署到tomcat下，近期项目组使用到spring boot项目，打出来的是jar包，需要远程发布，网上找了下，基本上都是通过”Publish Over SSH”插件，将jar包拷贝到远程服务器上，然后通过执行shell脚本启动jar项目，这里记录一下过程。 安装 Publish Over SSH 插件Manage Jenkins –&gt;Manage Plugins–&gt;可选插件–&gt;Publish Over SSH–&gt;直接安装 添加Linux主机Manage Jenkins –&gt;Configure System –&gt;Publish Over SSH这这里我们需要设置远程主机相关信息，如主机名，用户，密码，远程主机目录；高级选项选项中，我们可以选择key和密码两种方式访问远程linux主机，还可以设置跳转机 构建项目构建一个maven项目，其他信息和之前的一样，配置好svn地址，相关用户获取代码。Build阶段参数设置为：-e clean package -Dmaven.test.skip=trueSource Files：需要发布的jar包位置，需要写相对（当前项目目录）路径；如：当前项目名称是monitor-cloud，jar包的位置是/var/lib/jenkins/workspace/monitor-cloud/monitor-gateway/target/monitor-gateway.jar，在Source Files填写 monitor-gateway/target/monitor-gateway.jar即可Remove prefix：表示需要移除的目录，比如这里填写monitor-gateway/target，则表示发布时，只把monitor-gateway.jar.jar发布到远程linux，而不包含monitor-gateway/target目录结构Remote directory：表示需要把编译好的war包发布到远程linux的哪个目录下 (我刚才在全局属性里设置了，这里就留空了)Exec command：需要执行的shell命令，shell命令在远程linux服务器上. 123456789101112131415echo &quot;deploy monitor-gateway.jar&quot; pid=`ps -ef|grep monitor-gateway|grep -v grep|awk &apos;&#123;print $2&#125;&apos;` if [ -n &quot;$pid&quot; ] then echo &apos;The pid: server&apos; $pid &apos; will be killed....&apos; kill -9 $pid echo &apos;The pid: server&apos; $pid &apos; will be start&apos; nohup /usr/local/jdk1.8.0_202/bin/java -jar /usr/local/ths/monitor-gateway.jar &gt; /dev/null &amp; else echo &apos;The pid: server&apos; $pid &apos; not exist , will be start&apos; nohup /usr/local/jdk1.8.0_202/bin/java -jar /usr/local/ths/monitor-gateway.jar &gt; /dev/null &amp;fi echo &apos;The pid: server&apos; $pid &apos; started&apos; 参考：https://blog.csdn.net/l848168/article/details/85261514]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[持续检测端口连通性]]></title>
    <url>%2Farlo%2F50806164%2F</url>
    <content type="text"><![CDATA[一个地址端口有时候可以通，有时候不行，telnet只能检测某一时刻的连通状态；为了持续检测，我这边写了一个shell脚本，内容如下。 编写一个非交互式shell检测脚本vim check_port.sh 12345678910111213#!/bin/bashIP=&apos;192.168.100.130&apos;PORT_LIST=&quot;22 8080&quot;TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;`for PORT in $PORT_LISTdo RESULT=`echo &quot;&quot; | telnet $IP $PORT 2&gt;/dev/null | grep &quot;]&quot; | wc -l` if [ $RESULT -eq 1 ];then echo &quot;$TIME_STAMP $IP的$PORT端口可以连通&quot; &gt;&gt; /tmp/1.txt else echo &quot;$TIME_STAMP $IP的$PORT端口不能连通&quot; &gt;&gt; /tmp/1.txt fidone 添加执行权限chmod +x /opt/check_post.sh 使用crontab定时执行脚本crontab -l 1*/5 * * * * /opt/check_post.sh 参考：https://www.jianshu.com/p/92adf516a62d]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenVPN使用用户名密码验证登录]]></title>
    <url>%2Farlo%2Fb525080b%2F</url>
    <content type="text"><![CDATA[书接上文，咱们说到Centos7下OpenVpn服务器搭建 ，使用证书验证，如果偷懒多人使用同一个证书，感觉不是很安全，如果新建多个账号，也不是很方便，所以想着使用用户名密码去验证。使用用户名密码验证的常见做法有两种，一种是借助pam_mysql.so,另一种是使用checkpsw方式，本文使用第二种方式，比较简单。搭建过程和上文基本一样，只需要创建服务器端证书，不需要客户端证书。 修改服务端配置文件修改服务器端配置文件vim /etc/openvpn/server.conf123456789101112131415161718192021222324252627282930313233343536373839local 192.168.6.23port 11094proto tcpdev tunca /etc/openvpn/certs/ca.crtcert /etc/openvpn/certs/server.crtkey /etc/openvpn/certs/server.keydh /etc/openvpn/certs/dh.pemtls-auth ta.key 0cipher AES-256-GCMifconfig-pool-persist /etc/openvpn/ipp.txt#以下四行配置文件未新添加的的auth-user-pass-verify /etc/openvpn/checkpsw.sh via-envverify-client-cert noneusername-as-common-namescript-security 3server 10.66.66.0 255.255.255.0push &quot;route 192.168.6.0 255.255.255.0&quot;push &quot;route 192.168.10.0 255.255.255.0&quot;#push &quot;redirect-gateway def1 bypass-dhcp&quot;push &quot;dhcp-option DNS 223.5.5.5&quot;push &quot;dhcp-option DNS 223.6.6.6&quot;topology subnetclient-to-clientkeepalive 20 120comp-lzoduplicate-cnuser openvpngroup openvpnpersist-keypersist-tunstatus openvpn-status.loglog-append openvpn.logverb 3mute 20 新建一个keytls-auth 在 SSL/TLS 握手包的基础上增加了额外的签名，以提供更高的安全性1openvpn --genkey --secret /etc/openvpn/ta.key 新建shell脚本123456789101112131415161718192021222324252627#!/bin/sh############################################################ checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;## This script will authenticate OpenVPN users against# a plain text file. The passfile should simply contain# one row per user with the username first followed by# one or more space(s) or tab(s) and then the password.PASSFILE=&quot;/etc/openvpn/psw-file&quot;LOG_FILE=&quot;/etc/openvpn/openvpn-password.log&quot;TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;`###########################################################if [ ! -r &quot;$&#123;PASSFILE&#125;&quot; ]; then echo &quot;$&#123;TIME_STAMP&#125;: Could not open password file \&quot;$&#123;PASSFILE&#125;\&quot; for reading.&quot; &gt;&gt; $&#123;LOG_FILE&#125; exit 1fiCORRECT_PASSWORD=`awk &apos;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&apos;$&#123;username&#125;&apos;&quot;&#123;print $2;exit&#125;&apos; $&#123;PASSFILE&#125;`if [ &quot;$&#123;CORRECT_PASSWORD&#125;&quot; = &quot;&quot; ]; then echo &quot;$&#123;TIME_STAMP&#125;: User does not exist: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125; exit 1fiif [ &quot;$&#123;password&#125;&quot; = &quot;$&#123;CORRECT_PASSWORD&#125;&quot; ]; then echo &quot;$&#123;TIME_STAMP&#125;: Successful authentication: username=\&quot;$&#123;username&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125; exit 0fiecho &quot;$&#123;TIME_STAMP&#125;: Incorrect password: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;exit 1 赋予脚本权限chmod 755 checkpsw.sh 新建用户密码配置文件psw-file1234#用户名 密码ths1 123456ths2 123456ths3 123456 chmod 600 /etc/openvpn/psw-filechown openvpn.openvpn /etc/openvpn/psw-filetouch /etc/openvpn/openvpn-password.logchown openvpn.openvpn /etc/openvpn/openvpn-password.logchmod 644 /etc/openvpn/openvpn-password.log 重启服务systemctl restart openvpn@serversystemctl enable openvpn@server 客户端测试编辑C:\Program Files\OpenVPN\config\sx3.ovpn12345678910111213141516171819202122232425262728293031323334353637client proto tcp dev tun remote 192.168.6.23 11094ca ca.crt auth-user-pass #使用密码验证，主要是这行tls-auth ta.key 1cipher AES-256-GCMresolv-retry infinitenobindmute-replay-warningskeepalive 20 120comp-lzo#user openvpn#group openvpnpersist-keypersist-tunstatus openvpn-status.loglog-append openvpn.logverb 3mute 20route-method exeroute-delay 2&lt;ca&gt;-----BEGIN CERTIFICATE-----……ABCDEFG……-----END CERTIFICATE-----&lt;/ca&gt;&lt;tls-auth&gt;## 2048 bit OpenVPN static key#-----BEGIN OpenVPN Static key V1-----……ABCDEFG……-----END OpenVPN Static key V1-----&lt;/tls-auth&gt; 客户端测试]]></content>
  </entry>
  <entry>
    <title><![CDATA[fping批量检测主机存活]]></title>
    <url>%2Farlo%2F52a5c096%2F</url>
    <content type="text"><![CDATA[fping是一个小型命令行工具，用于向网络主机发送ICMP （ Internet控制消息协议 ）回应请求，类似于ping，但在ping多个主机时性能要高得多。 fping完全不同于ping，因为您可以在命令行上定义任意数量的主机，或者指定包含要ping的IP地址或主机列表的文件。 安装fping工具windows环境我在fping官网没找到下载地址，可以从这里下载：http://blog.perceptus.ca/wp-content/uploads/2017/11/fping300.zip Linux（centos）环境yum -y install epel-releaseyum -y install fping fping用法123456-a 仅显示存活主机-u 仅显示不存活主机-g 指定网段-r 重复检测网段次数（一般和-g结合使用，-g -r 1）-C 检测主机次数-s 显示统计信息 ping多主机fping www.baidu.com 163.com qq.com t.cn google.com facebook.com123456www.baidu.com is alive163.com is aliveqq.com is alivet.cn is alivegoogle.com is unreachablefacebook.com is unreachable ping区间fping -C 1 -g 192.168.6.1 192.168.6.5123456192.168.6.1 : [0], 84 bytes, 0.58 ms (0.58 avg, 0% loss)192.168.6.1 : 0.58192.168.6.2 : -192.168.6.3 : -192.168.6.4 : -192.168.6.5 : - ping网段fping -g -r 1 192.168.6.0/24123456789192.168.6.1 is alive……192.168.6.121 is aliveICMP Host Unreachable from 192.168.6.23 for ICMP Echo sent to 192.168.6.2……ICMP Host Unreachable from 192.168.6.23 for ICMP Echo sent to 192.168.6.148192.168.6.2 is unreachable……192.168.6.252 is unreachable ping文件cat 1.txt12345192.168.1.1192.168.10.33223.5.5.5114.114.114.114221.11.1.67 fping &lt; 1.txtfping -f 1.txt123456789ICMP Time Exceeded from 192.168.0.253 for ICMP Echo sent to 192.168.1.1192.168.10.33 is alive114.114.114.114 is alive223.5.5.5 is alive221.11.1.67 is aliveICMP Time Exceeded from 192.168.0.253 for ICMP Echo sent to 192.168.1.1ICMP Time Exceeded from 192.168.0.253 for ICMP Echo sent to 192.168.1.1ICMP Time Exceeded from 192.168.0.253 for ICMP Echo sent to 192.168.1.1192.168.1.1 is unreachable]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7下OpenVpn服务器搭建]]></title>
    <url>%2Farlo%2Ffd972502%2F</url>
    <content type="text"><![CDATA[背景项目实施过程中，远程访问服务器方式有windows远程桌面、VNC、盗版teamviewer，向日葵、anydesk，甚至还有qq远程桌面的，错综复杂，杂乱无章，项目上没有购置硬件vpn的预算，为了结束这一尴尬的局面，决定使用开源软件openvpn自建vpn环境。 系统环境OS：CentOS Linux release 7.4.1708 (Core)SELinux：disabledfirewalld：activeopenvpn：2.4.7easy-rsa：3.0.3 部署openvpn软件安装openvpn &amp; easy-rsa 软件yum install epel-releaseyum install openvpn easy-rsacp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsacd /etc/openvpn/easy-rsa/3.0.3cp /usr/share/doc/easy-rsa-3.0.3/vars.example vars 创建证书创建ca证书编辑vars文件，根据自己的环境配置ps:这一步不是必须滴，不填写也可以123456set_var EASYRSA_REQ_COUNTRY &quot;CN&quot;set_var EASYRSA_REQ_PROVINCE &quot;ShaanXi&quot;set_var EASYRSA_REQ_CITY &quot;Xi&apos;an&quot;set_var EASYRSA_REQ_ORG &quot;islocal.cc&quot;set_var EASYRSA_REQ_EMAIL &quot;xx@islocal.cc&quot;set_var EASYRSA_REQ_OU &quot;My OpenVPN&quot; source /vars进入/etc/openvpn/easy-rsa/3.0.3目录目录初始化./easyra init-pki创建ca证书./easyra build-ca nopass 创建服务器证书和key./easyrsa gen-req server nopass #生成下列两个文件12req: /etc/openvpn/easy-rsa/3.0.3/pki/reqs/server.reqkey: /etc/openvpn/easy-rsa/3.0.3/pki/private/server.key 签约服务端证书生成服务器证书文件./easyrsa sign server server1/etc/openvpn/easy-rsa/3.0.3/pki/issued/server.crt 生成vpn密钥协议交换文件./easyrsa gen-dh #可以看到我们生成的是2048位的加密文件1/etc/openvpn/easy-rsa/3.0.3/pki/dh.pem 创建客户端证书拷贝easy-rsa到client目录下cp -r /usr/share/easy-rsa/ /etc/openvpn/client/初始化目录./easyrsa init-pki1/etc/openvpn/client/easy-rsa/3.0.3/pki 新建用户，创建客户端证书./easyrsa gen-req ths nopass12req: /etc/openvpn/client/easy-rsa/3.0.3/pki/reqs/ths.reqkey: /etc/openvpn/client/easy-rsa/3.0.3/pki/private/ths.key 签约客户端证书注意：返回到服务器目录下操作！！！cd /etc/openvpn/easy-rsa/3.0.3./easyrsa import-req /etc/openvpn/client/easy-rsa/3.0.3/pki/reqs/ths.req ths1/etc/openvpn/easy-rsa/3.0.3/pki/issued/ths.crt 整理一下所有证书服务器端证书mkdir /etc/openvpn/certscd /etc/openvpn/certscp /etc/openvpn/easy-rsa/3.0.3/pki/ca.crt .cp /etc/openvpn/easy-rsa/3.0.3/pki/dh.pem .cp /etc/openvpn/easy-rsa/3.0.3/pki/issued/server.crt .cp /etc/openvpn/easy-rsa/3.0.3/pki/private/server.key . 客户端证书mkdir /etc/openvpn/client/thscd /etc/openvpn/client/thscp /etc/openvpn/easy-rsa/3.0.3/pki/ca.crt .cp /etc/openvpn/easy-rsa/3.0.3/pki/issued/ths.crt .cp /etc/openvpn/client/easy-rsa/3.0.3/pki/private/ths.key . 服务器端配置文件cat /etc/openvpn/server.conf1234567891011121314151617181920212223242526272829303132333435local 192.168.6.23 #填写自己的openvpn服务器ip地址，默认侦听服务器上所有的ipport 11094 #侦听端口，默认为1194，据说网上会过滤1194端口流量，我这里修改为11094proto tcp #端口协议，默认udp，开启tcp方便映射转发dev tun #创建一个路由ip隧道,路由模式有tun/tapca /etc/openvpn/certs/ca.crt #根证书路径cert /etc/openvpn/certs/server.crt #证书key /etc/openvpn/certs/server.key #私钥文件（保密）dh /etc/openvpn/certs/dh.pem #协议交换文件ifconfig-pool-persist /etc/openvpn/ipp.txt #记录客户端和虚拟ip的对应关系。当重启OpenVPN时，再次连接的客户端将分配到与上一次分配相同的虚拟IP地址server 10.66.66.0 255.255.255.0 #设置服务器端模式，并提供一个VPN子网，以便于从中为客户端分配IP地址。服务器会获取10.66.66.1 push &quot;route 192.168.6.0 255.255.255.0&quot; #推送路由信息到客户端，以允许客户端能够连接到服务器背后的其他私有子网。#push &quot;redirect-gateway def1 bypass-dhcp&quot; # 启用该指令，所有客户端的默认网关都将重定向到VPN，这将导致诸如web浏览器、DNS查询等所有客户端流量都经过VPN。push &quot;dhcp-option DNS 223.5.5.5&quot; push &quot;dhcp-option DNS 223.6.6.6&quot;client-to-client #允许拨号连接vpn的客户端之间相互通信keepalive 10 120 # 默认每10秒钟ping一次，如果120秒内都没有收到对方的回复，则表示远程连接已经关闭comp-lzo # 在VPN连接上启用压缩。如果你在此处启用了该指令，那么也应该在每个客户端配置文件中启用它。#duplicate-cn #打开后允许多个客户端使用同一个帐号连接user openvpngroup openvpnmax-clients 100persist-key persist-tun #通过keepalive检测vpn超时后，当重新启动vpn后，保持tun或者tap设备自动连接状态status openvpn-status.log # 状态日志log-append openvpn.logverb 1 #指定日志文件冗余# 为日志文件设置适当的冗余级别(0~9)。冗余级别越高，输出的信息越详细。# 0 表示静默运行，只记录致命错误。# 4 表示合理的常规用法。# 5 和 6 可以帮助调试连接错误。# 9 表示极度冗余，输出非常详细的日志信息。mute 20 #相同类别的信息只有前20条会输出到日志文件中。 启动openvpn服务systemctl start openvpn@server启动服务器后，我们可以监控/etc/openvpn/openvpn.log日志，如果有异常，可根据日志排查。我们查看一下ip地址，可以看到tun0获取到的是10.66.66.1 设置开机自启动服务systemctl enable openvpn@server 防火墙策略开启内核路由转发echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.confsysctl -p 开放vpn监听端口firewall-cmd --zone=public --add-port=11094/tcp --permanentfirewall-cmd --permanent --zone=public --add-masqueradefirewall-cmd --permanent --zone=public --add-rich-rule=&#39;rule family=ipv4 source address=10.66.66.0/24 masquerade&#39;firewall-cmd --reload 客户端测试安装Windows客户端https://build.openvpn.net/downloads/releases/openvpn-install-2.4.7-I607-Win7.exehttps://build.openvpn.net/downloads/releases/openvpn-install-2.4.7-I607-Win10.exe将/etc/openvpn/client/ths目录下的ca.crt、ths.crt、ths.key复制到“C:\Program Files\OpenVPN\config”目录下在此目录下新建一个client.ovpn文件1234567891011121314151617181920client proto tcp dev tun remote 192.168.6.23 11094ca ca.crt cert ths.crtkey ths.key resolv-retry infinitenobindmute-replay-warningskeepalive 20 120comp-lzo#user openvpn#group openvpnpersist-keypersist-tunstatus openvpn-status.loglog-append openvpn.logverb 3mute 20 使用管理员权限启动“OpenVPN GUI” 参考链接:https://build.openvpn.net/downloads/releases/https://www.cnblogs.com/irockcode/p/7587421.htmlhttps://www.cnblogs.com/tielemao/p/9603696.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[fio 存储性能测试]]></title>
    <url>%2Farlo%2F687d8f2c%2F</url>
    <content type="text"><![CDATA[测试环境 硬件环境 CPU Intel(R) Xeon(R) Gold 5120 CPU @ 2.20GHz * 4 (逻辑cpu112核) 内存 256GB 磁盘 数普DS5760，单块10TB 7200RPM NL-SAS磁盘，划分3个RAID6 lun ，通过56GB InfiniBand网络挂载到操作系统 软件环境 操作系统 CentOS Linux release 7.5.1804 测试软件 fio-3.1 友情提示：性能测试建议直接通过写裸盘的方式进行测试（systemrescuecd+fio），会得到较为真实的数据。但直接测试裸盘会破坏文件系统结构，导致数据丢失，请在测试前确认磁盘中数据已备份； dd 测试首先使用dd简单的测试一下写入速度dd if=/dev/zero of=/opt/file1 bs=1M count=1024001234# dd if=/dev/zero of=/opt/file1 bs=1M count=102400 102400+0 records in102400+0 records out107374182400 bytes (107 GB) copied, 70.5689 s, 1.5 GB/s fio安装为了看到更详细，更精准的存储性能，我们选用fio作为测试工具；fio 是测试 IOPS 的非常好的工具，用来对硬件进行压力测试和验证，支持 19种不同的 I/O 引擎，包括: sync,mmap, libaio, posixaio, SG v3, splice, null, network, syslet, guasi, solarisaio 等等。它支持 Linux 、FreeBSD 、NetBSD、 OpenBSD、 OS X、 OpenSolaris、 AIX、 HP-UX、 Android 以及 Windows操作系统。 硬盘性能指标顺序读写（bw吞吐量，常用单位为 MB/s）：文件在硬盘上存储位置是连续的。随机读写（iops磁盘的每秒读写次数，常用单位为次）：在硬盘上随机位置读写数据，默认4KB fio安装yum -y install epel-releaseyum -y install fio fio命令格式fio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=test fio参数详解filename: 指定文件 (设备) 的名称。可以通过冒号分割同时指定多个文件，如 filename=/dev/sda:/dev/sdb。name: 指定 job 的名字，在命令行中表示新启动一个 job。direct: bool 类型，如果设置成 true (1)，表示不使用 io buffer。iodepth: 如果 ioengine 采用异步方式，该参数表示一批提交保持的 io 单元数。该参数可参考文章“Fio 压测工具和 io 队列深度理解和误区”。http://blog.yufeng.info/archives/2104ioengine: I/O 引擎，现在 fio 支持 19 种 ioengine。默认值是 sync 同步阻塞 I/O，libaio 是 Linux 的 native 异步 I/O。关于同步异步，阻塞和非阻塞模型可以参考文章“使用异步 I/O 大大提高应用程序的性能”。http://www.ibm.com/developerworks/cn/linux/l-async/rw: I/O 模式，顺序读(read)、顺序写(write)、随机读(randread)、随机写(randwrite)、随机读写(randrw)。rwmixread: 随机读写模式中读占比，默认为50%bs: I/O block 大小，默认是 4k。bsrange：指定数据块的大小范围size: 指定 job 处理的文件的大小。numjobs: 指定 job 的线程数。runtime: 指定在多少秒后停止进程。如果未指定该参数，fio 将执行至指定的文件读写完全完成。time_based: 如果在 runtime 指定的时间还没到时文件就被读写完成，将继续重复知道 runtime 时间结束。group_reporting: 当同时指定了 numjobs 了时，输出结果按组显示。 fio测试结果我们需要根据自己业务场景来看待测试结果，如果是数据库业务的话，对随机读写要求比较高。如果是视频业务的话，对顺序读要求比较高。为了确认不同参数对测试结果的影响有多大，我这里针对ioengine、iodepth、numjobs和bs参数进行了单独测试，测试结果如下:从测试结果来看，我们可以得出以下结论： 在同步模式（psync）和异步模式（libaio）下测试，在顺序写的时候同步模式iops会低于异步模式，其他基本无差异 队列深度（iodepth）对测试影响不大，网上说法是一般设置32个 线程数（numjobs）对测试效果影响较大，建议设置为逻辑cpu核数 文件块大小（bs）可以看到块越小，iops越高 fio详细测试过程测试iodepthfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 1 -thread -rw=read -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 16 -thread -rw=read -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 1 -thread -rw=write -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 16 -thread -rw=write -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 1 -thread -rw=randread -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 16 -thread -rw=randread -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 1 -thread -rw=randwrite -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 16 -thread -rw=randwrite -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 1 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 16 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=test 测试ioengine(psync/libaio)fio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=libaio -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=libaio -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=libaio -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=libaio -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=libaio -bs=16k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=test 测试numjobs 1/30/112fio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=psync -bs=16k -size=200G -numjobs=1 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=psync -bs=16k -size=200G -numjobs=1 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=psync -bs=16k -size=200G -numjobs=1 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=psync -bs=16k -size=200G -numjobs=1 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=1 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=16k -size=200G -numjobs=30 -runtime=300 -group_reporting -name=test 测试bsfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=psync -bs=64k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=read -ioengine=psync -bs=1024k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=psync -bs=64k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=write -ioengine=psync -bs=1024k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=psync -bs=64k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randread -ioengine=psync -bs=1024k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=psync -bs=64k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randwrite -ioengine=psync -bs=1024k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=64k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=testfio -filename=/dev/mapper/mpatha -direct=1 -iodepth 32 -thread -rw=randrw -ioengine=psync -bs=1024k -size=200G -numjobs=112 -runtime=300 -group_reporting -name=test参考链接：https://wsgzao.github.io/post/fio/​ https://linux.cn/article-9912-1.html​ http://www.178pt.com/204.html http://blog.yufeng.info/archives/741]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>性能</tag>
        <tag>fio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora 快捷键]]></title>
    <url>%2Farlo%2Fe402bc62%2F</url>
    <content type="text"><![CDATA[生成目录: [TOC] 无序列表：输入-之后输入空格 有序列表：输入数字+“.”之后输入空格 任务列表：-[空格]空格 文字 标题：Ctrl+数字[1-6] 字体加粗：Ctrl+B 字体倾斜：Ctrl+I 字体下划线：Ctrl+U 字体删除线：Alt+Shift+5 表格：Ctrl+T 代码：Ctrl+Shift+` 代码块：Ctrl+Shift+K 公式块：Ctrl+Shift+M 插入图片：直接拖动到指定位置即可或者Ctrl+Shift+I 插入超级链接: Ctrl+K]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用sqlldr导入txt数据]]></title>
    <url>%2Farlo%2F2d7abdb2%2F</url>
    <content type="text"><![CDATA[将txt或者csv数据导入数据库最方便的方法就是使用sqlldr，使用sqlldr必须有一个控制文件，控制文件能把外部数据和数据库的表和列联系起来。 新建数据表12345678910111213141516171819CREATE TABLE &quot;TENVAIR&quot;.&quot;TEST&quot; (&quot;EMISS_GRIDID&quot; NUMBER(*,0) NOT NULL ENABLE,&quot;X&quot; NUMBER(*,0) NOT NULL ENABLE,&quot;Y&quot; NUMBER(*,0) NOT NULL ENABLE,&quot;EMISS_TYPE&quot; VARCHAR2(16) NOT NULL ENABLE,&quot;POLLUTION_TYPE&quot; VARCHAR2(16) NOT NULL ENABLE,&quot;JAN&quot; NUMBER(20,10),&quot;FEB&quot; NUMBER(20,10),&quot;MAR&quot; NUMBER(20,10),&quot;APR&quot; NUMBER(20,10),&quot;MAY&quot; NUMBER(20,10),&quot;JUN&quot; NUMBER(20,10),&quot;JUL&quot; NUMBER(20,10),&quot;AUG&quot; NUMBER(20,10),&quot;SEP&quot; NUMBER(20,10),&quot;OCT&quot; NUMBER(20,10),&quot;NOV&quot; NUMBER(20,10),&quot;DEC&quot; NUMBER(20,10),&quot;TOTAL&quot; NUMBER(20,10)); 数据格式12345EMISS_GRIDID,X,Y,EMISS_TYPE,POLLUTION_TYPE,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC,TOTAL10398,158,33,agriculture,NH3,,,,,,,,,,,,,57.556552887010398,158,33,industry,ALD2,,,,,,,,,,,,,0.008129582710398,158,33,industry,ALDX,,,,,,,,,,,,,0.078255377710398,158,33,industry,BC,,,,,,,,,,,,,2.5780515671 编写控制文件t.ctl1234567891011121314151617181920212223load dataappend into table TENVAIR.TESTfields terminated by &apos;,&apos;TRAILING NULLCOLS(EMISS_GRIDID,X,Y,EMISS_TYPE,POLLUTION_TYPE,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC,TOTAL) infile ‘EMISS_MEIC.txt’ 表示要导入的文本名为EMISS_MEIC.txt，也可以在执行sqlldr的时候加data=EMISS_MEIC.txtappend/insert/replace/truncate into table TABLE_NAME append表示使用追加的方式将数据写入表中；insert 表示导入空表，有数据则停止；replace表示原来表中如果有数据，则会被删除（用delete from table语句）;truncate表示原来表中如果有数据，则会被清除（用truncate table语句）fields terminated by ‘,’ 数据中每行记录用”,”分隔TRAILING NULLCOLS 表的字段没有对应的值时允许为空 使用sqlldr导入如果数据文件是从windows传到linux操作系统上的，需要转换一下文件格式dos2unix EMISS_MEIC.txtsqlldr userid=user/&#39;passwd&#39; control=t.ctl data=EMISS_MEIC.txt readsize=4194304 查看导入结果从日志文件中我们可以看到导入详情，导入1279319条数据，耗时33秒，效率还是非常高的！]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle开启归档日志模式]]></title>
    <url>%2Farlo%2F60a79bb7%2F</url>
    <content type="text"><![CDATA[在默认情况下，oracle数据库是在非归日志档模式中创建的，在非归档日志模式中，进行日志切换时会直接重写redo log，如果此时数据文件因为介质失败被损坏，则数据库恢复时会丢失掉被重写的数据；在归档日志模式下，数据库可以应用最近一次数据库备份开始生成的所有归档日志文件，保证数据无丢失；大部分的生产数据库以archivelog模式运行。oracle数据库在开启归档日志模式后，会自动启动新的进程：归档器ARCn。默认情况下是开启4个进程，在实际应用中最多可以启动30个归档器进程。 12345$ ps -ef |grep arcoracle 22248 1 0 11:35 ? 00:00:00 ora_arc0_airforecastoracle 22250 1 0 11:35 ? 00:00:00 ora_arc1_airforecastoracle 22252 1 0 11:35 ? 00:00:00 ora_arc2_airforecastoracle 22254 1 0 11:35 ? 00:00:00 ora_arc3_airforecast 新建归档模式目录1mkdir /u01/app/oracle/oradata/airforecast/archivelog 设置实例参数从9i开始后，oracle数据库可以指定10个归档目的地，但实例log_archive_dest_n中的n最大为30，通常情况下需要指定2个或者多个归档目的地来多路复用归档日志文件；在理想情况下，这些归档日志文件应当位于不同的磁盘存储上；实际应用中，一般还是指定一个，非常重要的数据库一般有data guard来保证高可用性。 变量 描述 %d 唯一的数据看标志符，如果多个数据库归档到同一目录，这是必须要的 %t 线程号，适用于RAC数据看，无实际意义 %r 场景（incarnation）号，在不完全恢复时需要用到 %s 日志切换序列号，保证同一个库中的归档日志不会彼此重写 修改操作步骤如下：123SYS@airforecast&gt; conn / as sysdbaSYS@airforecast&gt; alter system set log_archive_dest_1=&apos;location=/u01/app/oracle/oradata/airforecast/archivelog&apos; scope = spfile;SYS@airforecast&gt; alter system set log_archive_format=&apos;arch_%d_%t_%r_%s.log&apos; scope = spfile; 重启数据库并开启归档日志模式1234567891011121314151617181920SYS@airforecast&gt; shutdown immediateDatabase closed.Database dismounted.ORACLE instance shut down.SYS@airforecast&gt; startup mount;ORACLE instance started.Total System Global Area 4977278976 bytesFixed Size 2261768 bytesVariable Size 1006636280 bytesDatabase Buffers 3959422976 bytesRedo Buffers 8957952 bytesDatabase mounted.SYS@airforecast&gt; alter database archivelog;Database altered.SYS@airforecast&gt; alter database open;Database altered. 确认数据库是否为归档模式1234567891011SYS@airforecast&gt; select log_mode from v$database;LOG_MODE------------ARCHIVELOGSYS@airforecast&gt; select archiver from v$instance;ARCHIVE-------STARTED 切换日志检查归档日志是否正常12345678910SYS@airforecast&gt; alter system switch logfile;System altered.SYS@airforecast&gt; select name from v$archived_log;NAME------------------------------------------------------------------------------------------------------------------------/u01/app/oracle/oradata/airforecast/archivelog/arch_a9652e7f_1_1000805313_5.log/u01/app/oracle/oradata/airforecast/archivelog/arch_a9652e7f_1_1000805313_6.log 参考链接：https://www.jianshu.com/p/f8c0e9309ce2]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表空间操作常用语句]]></title>
    <url>%2Farlo%2Fb76e9b6%2F</url>
    <content type="text"><![CDATA[创建表空间T_WORKcreate tablespace T_WORK_DATA datafile &#39;/u01/app/oracle/oradata/airforecast/t_work01.dbf&#39; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 32767M EXTENT MANAGEMENT LOCAL;alter tablespace T_WORK_DATA add datafile &#39;/u01/app/oracle/oradata/airforecast/t_work02.dbf&#39; size 5M autoextend on maxsize 32767M; 创建临时表空间CREATE TEMPORARY TABLESPACE T_WORK_TEMP TEMPFILE &#39;/u01/app/oracle/oradata/airforecast/t_work_tmp01.dbf&#39; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 2048m EXTENT MANAGEMENT LOCAL; 创建T_WORK用户CREATE USER T_WORK IDENTIFIED BY solution#123 DEFAULT TABLESPACE T_WORK_DATA TEMPORARY TABLESPACE T_WORK_TEMP; 赋予权限GRANT CONNECT,RESOURCE TO T_WORK; 修改用户表所属表空间alter table TABLE_NAME move tablespace TABLESPACENAME 删除表空间DROP USER T_WORK CASCADE;DROP TABLESPACE T_WORK_DATA INCLUDING CONTENTS AND DATAFILES; 删除临时表空间DROP TABLESPACE T_WORK_TEMP INCLUDING CONTENTS AND DATAFILES; 开启自动扩展功能语法alter database datafile &#39;对应的数据文件路径信息&#39; autoextend on; 关闭自动扩展功能语法alter database datafile &#39;对应的数据文件路径信息&#39; autoextend off; 查看默认数据表空间SELECT PROPERTY_NAME, PROPERTY_VALUE FROM DATABASE_PROPERTIES; 查看默认临时表空间SELECT PROPERTY_NAME, PROPERTY_VALUE FROM DATABASE_PROPERTIES WHERE PROPERTY_NAME=&#39;DEFAULT_TEMP_TABLESPACE&#39;; 查看普通用户的默认表空间和临时表空间SELECT USERNAME, DEFAULT_TABLESPACE, TEMPORARY_TABLESPACE FROM DBA_USERS;SELECT DEFAULT_TABLESPACE,TEMPORARY_TABLESPACE FROM DBA_USERS WHERE USERNAME=&#39;T_WORK&#39;; 修改表空间名称alter tablespace T_WORK RENAME TO T_WORK_DATA;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 11.2.0.4.0打PSU24006111(11.2.0.4.161018)]]></title>
    <url>%2Farlo%2F582decea%2F</url>
    <content type="text"><![CDATA[系统环境：CentOS 6.9 / Oracle 11.2.0.4 x64 软件链接: https://pan.baidu.com/s/16dlRzILi7p3LTd6lXVQy_g 提取码: fkrj Oracle补丁术语介绍补丁概念请参考：https://blog.csdn.net/DBDeep/article/details/72904608我们今天安装的是打PSU补丁，就是DBA&amp;DMA们常论道的PSU。Oracle 选取在每个季度用户下载数量最多，并且得到验证具有较低风险的补丁放入到每个季度的PSU中，修复比较严重的一些问题，包含每个季度的CPU，是累积型的。虽然在描述PSU的时候会用到数据库版本第5位，比如Database PSU 11.2.0.3.5，但实际上打完PSU后并不会真正改变数据库的版本，从v$version中看到的版本还是4位的(11.2.0.3.0)，第5位仍然是0。(1)Windows上没有CPU和PSU，对于Windows和Exadata，Oracle使用Bundle Patch代替PSU，Bundle Patch会包含PSU的内容(2)从11.2.0.2版本开始，一个新的补丁策略被引入，11.2.0.1之后发布的Patch Set本身就是一个完整的安装包，不再需要基础的Release 版本安装。 Note 2118136.2 psu补丁号快速查询Quick Reference to Patch Numbers for Database PSU, SPU(CPU), Bundle Patches and Patchsets (文档 ID 1454618.1) 查看当前补丁状态检查环境变量确保$PATH中包含以下可执行文件:make,ar,ld和nm12345678[oracle@ora1 ~]$ which make/usr/bin/make[oracle@ora1 ~]$ which ar/usr/bin/ar[oracle@ora1 ~]$ which ld/usr/bin/ld[oracle@ora1 ~]$ which nm/usr/bin/nm 检查&amp;升级OPatch版本必须使用OPatch实用程序版本11.2.0.3.6或更高版本$ORACLE_HOME/OPatch/opatch version1OPatch Version: 11.2.0.3.4 这个版本不满足我们的要求，我们需要下载p6880880_112000_Linux-x86-64.zip，替换当前的OPatchcd $ORACLE_HOMEmv OPatch OPatch_bakunzip p6880880_112000_Linux-x86-64.zip -d $ORACLE_HOME$ORACLE_HOME/OPatch/opatch version1OPatch Version: 11.2.0.3.19 查看当前补丁状态opatch lsinventory1234567891011121314151617181920212223242526272829303132[oracle@ora1 sf]$ opatch lsinventoryOracle Interim Patch Installer version 11.2.0.3.19Copyright (c) 2019, Oracle Corporation. All rights reserved.Oracle Home : /u01/app/oracle/product/11.2.0.4/db_1Central Inventory : /u01/app/oraInventory from : /u01/app/oracle/product/11.2.0.4/db_1/oraInst.locOPatch version : 11.2.0.3.19OUI version : 11.2.0.4.0Log file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/opatch2019-01-24_22-21-59PM_1.logLsinventory Output file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/lsinv/lsinventory2019-01-24_22-21-59PM.txt--------------------------------------------------------------------------------Local Machine Information::Hostname: localhostARU platform id: 226ARU platform description:: Linux x86-64Installed Top-level Products (1): Oracle Database 11g 11.2.0.4.0There are 1 products installed in this Oracle Home.There are no Interim patches installed in this Oracle Home.--------------------------------------------------------------------------------OPatch succeeded. 检测补丁兼容性检查补丁是否冲突首先我们上传补丁文件p24006111_112040_Linux-x86-64.zip到数据库服务器上unzip p24006111_112040_Linux-x86-64.zipcd 24006111opatch prereq CheckConflictAgainstOHWithDetail -ph ./123456789101112131415161718[oracle@ora1 24006111]$ opatch prereq CheckConflictAgainstOHWithDetail -ph ./Oracle Interim Patch Installer version 11.2.0.3.19Copyright (c) 2019, Oracle Corporation. All rights reserved.PREREQ sessionOracle Home : /u01/app/oracle/product/11.2.0.4/db_1Central Inventory : /u01/app/oraInventory from : /u01/app/oracle/product/11.2.0.4/db_1/oraInst.locOPatch version : 11.2.0.3.19OUI version : 11.2.0.4.0Log file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/opatch2019-01-24_22-22-48PM_1.logInvoking prereq &quot;checkconflictagainstohwithdetail&quot;Prereq &quot;checkConflictAgainstOHWithDetail&quot; passed.OPatch succeeded. 查看组件信息1234set linesize 150;set pagesize 9999;col comp_name format a40;SELECT COMP_NAME, VERSION, STATUS FROM SYS.DBA_REGISTRY; 查看补丁状态1234set linesize 500 pagesize 600col ACTION_TIME for a30col COMMENTS for a30select ACTION_TIME, ACTION,version, COMMENTS from sys.DBA_REGISTRY_HISTORY; 打补丁关闭数据库和监听123456789[oracle@ora1 24006111]$ sqlplus / as sysdbaSQL*Plus: Release 11.2.0.4.0 Production on Thu Jan 24 23:03:01 2019Copyright (c) 1982, 2013, Oracle. All rights reserved.SYS@@orcl&gt; shutdown immediateDatabase closed.Database dismounted.ORACLE instance shut down. 12345678[oracle@ora1 24006111]$ lsnrctl stopLSNRCTL for Linux: Version 11.2.0.4.0 - Production on 24-JAN-2019 23:03:45Copyright (c) 1991, 2013, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))The command completed successfully 查看数据库和监听是否彻底关闭，如果未关闭，打补丁过程中会报错。12345[oracle@ora1 24006111]$ ps -ef |grep ora_oracle 45322 42120 2 23:04 pts/0 00:00:00 grep ora_[oracle@ora1 24006111]$ ps -ef |grep tnsroot 21 2 0 16:29 ? 00:00:00 [netns]oracle 45324 42120 0 23:04 pts/0 00:00:00 grep tns 开始打补丁每个补丁包里都有Readme.html文件，文件中有很详细的说明和操作流程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[oracle@ora1 24006111]$ opatch applyOracle Interim Patch Installer version 11.2.0.3.19Copyright (c) 2019, Oracle Corporation. All rights reserved.Oracle Home : /u01/app/oracle/product/11.2.0.4/db_1Central Inventory : /u01/app/oraInventory from : /u01/app/oracle/product/11.2.0.4/db_1/oraInst.locOPatch version : 11.2.0.3.19OUI version : 11.2.0.4.0Log file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/opatch2019-01-24_23-15-07PM_1.logVerifying environment and performing prerequisite checks...OPatch continues with these patches: 17478514 18031668 18522509 19121551 19769489 20299013 20760982 21352635 21948347 22502456 23054359 24006111 Do you want to proceed? [y|n]yUser Responded with: YAll checks passed.Provide your email address to be informed of security issues, install andinitiate Oracle Configuration Manager. Easier for you if you use your MyOracle Support Email address/User Name.Visit http://www.oracle.com/support/policies.html for details.Email address/User Name: You have not provided an email address for notification of security issues.Do you wish to remain uninformed of security issues ([Y]es, [N]o) [N]: yPlease shutdown Oracle instances running out of this ORACLE_HOME on the local system.(Oracle Home = &apos;/u01/app/oracle/product/11.2.0.4/db_1&apos;)Is the local system ready for patching? [y|n]yUser Responded with: YBacking up files...Applying sub-patch &apos;17478514&apos; to OH &apos;/u01/app/oracle/product/11.2.0.4/db_1&apos;Patching component oracle.rdbms, 11.2.0.4.0...……Patching component oracle.rdbms.dbscripts, 11.2.0.4.0...Composite patch 24006111 successfully applied.Log file location: /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/opatch2019-01-24_23-15-07PM_1.logOPatch succeeded. 升级数据字典123456cd $ORACLE_HOME/rdbms/adminsqlplus /nologSQL&gt; CONNECT / AS SYSDBASQL&gt; STARTUPSQL&gt; @catbundle.sql psu apply SQL&gt; QUIT 重新编译无效对象1234cd $ORACLE_HOME/rdbms/adminsqlplus /nologSQL&gt; CONNECT / AS SYSDBASQL&gt; @utlrp.sql 验证升级结果123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116[oracle@ora1 24006111]$ opatch lsinventoryOracle Interim Patch Installer version 11.2.0.3.19Copyright (c) 2019, Oracle Corporation. All rights reserved.Oracle Home : /u01/app/oracle/product/11.2.0.4/db_1Central Inventory : /u01/app/oraInventory from : /u01/app/oracle/product/11.2.0.4/db_1/oraInst.locOPatch version : 11.2.0.3.19OUI version : 11.2.0.4.0Log file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/opatch2019-01-24_23-36-05PM_1.logLsinventory Output file location : /u01/app/oracle/product/11.2.0.4/db_1/cfgtoollogs/opatch/lsinv/lsinventory2019-01-24_23-36-05PM.txt--------------------------------------------------------------------------------Local Machine Information::Hostname: localhostARU platform id: 226ARU platform description:: Linux x86-64Installed Top-level Products (1): Oracle Database 11g 11.2.0.4.0There are 1 products installed in this Oracle Home.Interim patches (1) :Patch 24006111 : applied on Thu Jan 24 23:29:17 CST 2019Unique Patch ID: 20508568Patch description: &quot;Database Patch Set Update : 11.2.0.4.161018 (24006111)&quot; Created on 26 Aug 2016, 05:54:48 hrs PST8PDTSub-patch 23054359; &quot;Database Patch Set Update : 11.2.0.4.160719 (23054359)&quot;Sub-patch 22502456; &quot;Database Patch Set Update : 11.2.0.4.160419 (22502456)&quot;Sub-patch 21948347; &quot;Database Patch Set Update : 11.2.0.4.160119 (21948347)&quot;Sub-patch 21352635; &quot;Database Patch Set Update : 11.2.0.4.8 (21352635)&quot;Sub-patch 20760982; &quot;Database Patch Set Update : 11.2.0.4.7 (20760982)&quot;Sub-patch 20299013; &quot;Database Patch Set Update : 11.2.0.4.6 (20299013)&quot;Sub-patch 19769489; &quot;Database Patch Set Update : 11.2.0.4.5 (19769489)&quot;Sub-patch 19121551; &quot;Database Patch Set Update : 11.2.0.4.4 (19121551)&quot;Sub-patch 18522509; &quot;Database Patch Set Update : 11.2.0.4.3 (18522509)&quot;Sub-patch 18031668; &quot;Database Patch Set Update : 11.2.0.4.2 (18031668)&quot;Sub-patch 17478514; &quot;Database Patch Set Update : 11.2.0.4.1 (17478514)&quot; Bugs fixed: 17184721, 21538558, 16091637, 18092127, 17381384, 15979965, 18441944 13837378, 16314254, 16731148, 17835048, 13558557, 17201159, 17853498 17246576, 18356166, 18440047, 18681862, 16875449, 19788842, 17296856 21330264, 14010183, 17648596, 17551063, 17025461, 17267114, 22507210 17912217, 17889583, 18202441, 17040764, 16524926, 17478145, 19358317 22148226, 18747196, 18641419, 17036973, 17811789, 14285317, 16542886 18009564, 16618694, 8322815, 16692232, 18247991, 22507234, 17570240 17848897, 17441661, 14034426, 17465741, 16596890, 17437634, 20506706 21343897, 21453153, 18339044, 22321741, 17951233, 18430495, 21787056 22380919, 20506715, 17811429, 19721304, 18230522, 19554106, 19458377 6599380, 17612828, 22092979, 22321756, 17040527, 17811438, 18641461 14657740, 13364795, 21387964, 17346671, 17588480, 18235390, 17889549 19309466, 16472716, 20596234, 18331850, 18641451, 17344412, 21179898 17546761, 18203835, 18964939, 18203838, 18203837, 17313525, 22195457 18139690, 22296366, 14106803, 16837842, 17842825, 22657942, 21352646 20657441, 16360112, 22195441, 17389192, 14565184, 17205719, 14354737 22195448, 14764829, 13944971, 16571443, 21868720, 17186905, 17080436 18673342, 17027426, 19972569, 19972568, 19972566, 17282229, 19972564 16870214, 19615136, 17390431, 18762750, 16613964, 18098207, 17957017 18471685, 19730508, 21538485, 18264060, 17323222, 17754782, 17600719 18317531, 17852463, 17596908, 17655634, 20074391, 16228604, 19972570 18996843, 19854503, 16042673, 17835627, 20334344, 18000422, 20861693 17393683, 17551709, 20506699, 19006849, 18456514, 18277454, 17258090 17174582, 17242746, 16399083, 17824637, 17762296, 17397545, 16450169 12364061, 20067212, 18856999, 19211724, 19463893, 21343775, 19463897 17853456, 18673304, 20004021, 21668627, 16194160, 17477958, 16538760 12982566, 20296213, 18293054, 17610798, 19699191, 18135678, 17311728 16785708, 10136473, 17786518, 18315328, 18334586, 12747740, 19032867 18096714, 17390160, 17232014, 16422541, 18673325, 18155762, 14015842 19827973, 22683225, 17726838, 18554871, 23177648, 18051556, 20803583 18282562, 17922254, 15990359, 21972320, 16855292, 16668584, 21343838 20299015, 17446237, 18093615, 17694209, 17288409, 17274537, 13955826 16934803, 17634921, 17501491, 16315398, 22683212, 17006183, 13829543 18191164, 17655240, 19393542, 18384391, 21538567, 16198143, 21847223 17892268, 20142975, 19584068, 17165204, 18508861, 21756699, 16901385 18554763, 18189036, 17443671, 17385178, 17936109, 14829250, 20925795 17478514, 16850630, 13951456, 16595641, 15861775, 14054676, 16912439 17299889, 17297939, 18619917, 16833527, 17798953, 17816865, 18607546 17571306, 21286665, 17341326, 17851160, 20558005, 17586955, 19049453 21051840, 17587063, 16956380, 18328509, 14133975, 18061914, 21051833 18522509, 18765602, 18199537, 17332800, 13609098, 18384537, 22502493 14338435, 17945983, 21067387, 16392068, 17752995, 21051862, 17237521 16863422, 18244962, 19544839, 24433711, 17156148, 18973907, 17877323 17449815, 18180390, 17088068, 17037130, 20004087, 19466309, 11733603 18084625, 21051858, 18674024, 21051852, 18091059, 16306373, 18306996 19915271, 18193833, 17787259, 20631274, 16344544, 14692762, 18614015 17346091, 18228645, 17721717, 18436307, 11883252, 21756677, 17891943 22353199, 16384983, 19121551, 12816846, 17982555, 17761775, 22243719 17265217, 17071721, 16721594, 21756661, 18262334, 15913355, 17891946 17672719, 17602269, 17239687, 17042658, 17238511, 17811456, 17284817 17752121, 17394950, 16579084, 17011832, 22195465, 14602788, 18325460 24476265, 24476274, 12611721, 16903536, 17006570, 16043574, 18783224 16494615, 21526048, 19197175, 16069901, 17811447, 17308789, 22195477 17865671, 19013183, 17343514, 18316692, 17325413, 16180763, 17348614 14368995, 21983325, 17393915, 16285691, 20331945, 17883081, 24316947 17705023, 17614227, 22195485, 14084247, 13645875, 16777840, 19727057 14852021, 18744139, 18674047, 17716305, 18482502, 19289642, 17622427 22195492, 14458214, 18723434, 17767676, 19258504, 17786278, 17082983 21351877, 13498382, 18331812, 16065166, 18031668, 22893153, 16943711 21517440, 17649265, 13866822, 18094246, 24528741, 14245531, 17783588 17082359, 20448824, 18280813, 23330119, 16268425, 17302277, 18018515 17215560, 19271443, 17016369, 20777150, 23330124, 20441797, 19769489 17545847, 18260550, 13853126, 23536835, 17227277, 9756271, 18868646 17614134, 17546973, 19680952, 18704244, 18828868, 18273830, 17050888 17360606, 16992075, 17375354, 12905058, 18362222, 17571039, 17468141 18436647, 17235750, 21168487, 16220077, 16929165--------------------------------------------------------------------------------OPatch succeeded. 123456789set linesize 150;set pagesize 9999;col comp_name format a40;SELECT COMP_NAME, VERSION, STATUS FROM SYS.DBA_REGISTRY;--set linesize 500 pagesize 600col ACTION_TIME for a30col COMMENTS for a30select ACTION_TIME, ACTION,version, COMMENTS from sys.DBA_REGISTRY_HISTORY; 启动监听lsnrctl start 补丁回退opatch rollback -id 24006111 参考文档：http://blog.itpub.net/26736162/viewspace-2096650/https://blogs.oracle.com/database4cn/oracle-v4http://blog.51cto.com/hbxztc/1884214http://www.snapdba.com/2014/01/oracle-database-11gr2-11-2-0-4-installation-on-oracle-linux-6-4/#.XUJlIegzaUk]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>PSU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源APM工具pinpoint搭建使用]]></title>
    <url>%2Farlo%2Fc47141fa%2F</url>
    <content type="text"><![CDATA[APM，全称：Application Performance Management （应用程序性能管理）。 在应用服务各节点相互调用的时候，从中记录并传递一个应用级别的标记，这个标记可以用来关联各个服务节点之间的关系。比如两个应用服务节点之间使用 HTTP 作为传输协议的话，那么这些标记就会被加入到 HTTP 头中。这样就可以更加精细化的分析应用性能，也就是计量应用程序在执行不同区域的代码已经完成事务过程找那个所消耗的具体时长，耗费资源情况。商用软件：OneAPM，听云，透视宝，Oracle的EMCC等开源软件：Pinpoint，SkyWalking，Zipkin，CAT等 Pinpoint是开源在github（项目地址：https://github.com/naver/pinpoint ）上的一款APM监控工具，它是用Java编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约3％资源利用率），安装agent是无侵入式的，只需要在被测试的Tomcat中加上3行内容，添加探针，就可以监控整套程序了。 软件环境官方给的快速安装教程，是使用git clone代码，然后build编译安装，这样时间比较慢，而且容易出错，不方便排查，所以我们这里直接从https://github.com/naver/pinpoint/releases/ 下载war包，进行部署！ ps：如果hbase和pinpoint-collector、pinpoint-web部署在同一台机器，不用单独部署zookeeper；如果是下载war包部署，也不用安装mavenps：不要使用hbase2.0，否则首页server map不显示 组件 版本 功能 下载路径 zookeeper 3.4.12 应用程序协调 http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz hbase 1.2.9 存储收集的数据 http://mirror.bit.edu.cn/apache/hbase/hbase-1.2.9/hbase-1.2.9-bin.tar.gz pinpoint-collector 1.8.1 收集各种性能数据 https://github.com/naver/pinpoint/releases/download/1.8.1/pinpoint-collector-1.8.1.war pinpoint-web 1.8.1 数据WEB网页展示 https://github.com/naver/pinpoint/releases/download/1.8.1/pinpoint-web-1.8.1.war pinpoint-agent 1.8.1 应用关联探针 https://github.com/naver/pinpoint/releases/download/1.8.1/pinpoint-agent-1.8.1.tar.gz Oracle JDK 1.8 JAVA运行环境 https://www.oracle.com/technetwork/java/archive-139210.html apache-tomcat 8.5.37 web容器 http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz apache-maven 3.3.9 编译环境 http://apache.mirrors.lucidnetworks.net/maven/maven-3/ 架构 支持的模块 JDK 6+ Tomcat 6/7/8/9, Jetty 8/9, JBoss EAP 6/7, Resin 4, Websphere 6/7/8, Vertx 3.3/3.4/3.5, Weblogic 10/11g/12c, Undertow Spring, Spring Boot (Embedded Tomcat, Jetty), Spring asynchronous communication Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient, Akka-http, Apache CXF Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER, GRPC ActiveMQ, RabbitMQ, Kafka MySQL, Oracle, MSSQL(jtds), CUBRID, POSTGRESQL, MARIA Arcus, Memcached, Redis(Jedis, Lettuce), CASSANDRA, MongoDB, Hbase iBATIS, MyBatis DBCP, DBCP2, HIKARICP, DRUID gson, Jackson, Json Lib, Fastjson log4j, Logback 组件兼容性 准备工作查看主机名cat /etc/hostname1pinpoint_server 添加主机名解析cat /etc/hosts123127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6127.0.0.1 pinpoint_server 准备所需的软件包1234567891011[root@pinpoint_server ~]# cd /usr/local/src/pinpoint[root@pinpoint_server pinpoint]# lltotal 499488-rw-r--r-- 1 root root 9584807 Jan 9 08:52 apache-tomcat-8.5.32.tar.gz-rw-r--r-- 1 root root 105514702 Jan 9 08:52 hbase-1.2.9-bin.tar.gz-rw-r--r-- 1 root root 16984 Jan 9 08:52 hbase-create.hbase-rw-r--r-- 1 root root 183212596 Jan 9 09:03 jdk-8u112-linux-x64.tar.gz-rw-r--r-- 1 root root 16507792 Jan 9 08:52 pinpoint-agent-1.8.1.tar.gz-rw-r--r-- 1 root root 62644974 Jan 9 08:52 pinpoint-collector-1.8.1.war-rw-r--r-- 1 root root 97301169 Jan 9 08:52 pinpoint-web-1.8.1.war-rw-r--r-- 1 root root 36667596 Jan 9 08:52 zookeeper-3.4.12.tar.gz 安装JDKtar xf jdk-8u112-linux-x64.tar.gz -C /usr/local/vim /etc/profile123456export HISTSIZE=10000export HISTTIMEFORMAT=&quot;%F %T &quot;export JAVA_HOME=/usr/local/jdk1.8.0_112/export JAVA_8_HOME=/usr/local/jdk1.8.0_112/export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH source /etc/profile 安装hbase解压软件包tar xf hbase-1.2.9-bin.tar.gz -C /usr/local/cd /usr/local/hbase-1.2.9/conf/ 修改配置文件vim hbase-env.sh12#在27行左右配置JAVA_HOMEexport JAVA_HOME=/usr/local/jdk1.8.0_112/ vim hbase-site.xml123456789101112131415161718&lt;configuration&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; &lt;value&gt;file:///data/pinpoint/hbase&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt; &lt;value&gt;/data/pinpoint/zookeeper&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.master.port&lt;/name&gt; &lt;value&gt;60000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hbase.regionserver.port&lt;/name&gt; &lt;value&gt;60020&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 新建数据目录mkdir -p /data/pinpoint/hbasemkdir -p /data/pinpoint/zookeeper 启动hbase服务cd /usr/local/hbase-1.2.9/bin ./start-hbase.sh查看启动日志tailf /usr/local/hbase-1.2.9/bin/../logs/hbase-root-master-pinpoint_server.log也可以通过web控制台 http://192.168.6.140:16010/ 来访问hbase 导入hbase数据下载这个hbase数据 https://github.com/naver/pinpoint/tree/master/hbase/scripts/hbase-create.hbase$HBASE_HOME/bin/hbase shell $PATH_TO_SCRIPTS/hbase-create.hbase/usr/local/hbase-1.2.9/bin/hbase shell /usr/local/src/pinpoint/hbase-create.hbase1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950512019-01-09 09:20:19,016 WARN [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable0 row(s) in 1.5720 seconds0 row(s) in 2.2760 seconds0 row(s) in 4.3110 seconds0 row(s) in 1.2430 seconds0 row(s) in 1.2840 seconds0 row(s) in 1.2550 seconds0 row(s) in 1.2400 seconds0 row(s) in 1.2540 seconds0 row(s) in 2.2630 seconds0 row(s) in 4.2830 seconds0 row(s) in 18.4010 seconds0 row(s) in 2.2570 seconds0 row(s) in 2.2760 seconds0 row(s) in 2.2510 seconds0 row(s) in 2.2520 seconds0 row(s) in 1.2370 secondsTABLE AgentEvent AgentInfo AgentLifeCycle AgentStat AgentStatV2 ApiMetaData ApplicationIndex ApplicationMapStatisticsCallee_Ver2 ApplicationMapStatisticsCaller_Ver2 ApplicationMapStatisticsSelf_Ver2 ApplicationTraceIndex HostApplicationMap_Ver2 SqlMetaData_Ver2 StringMetaData TraceV2 Traces 16 row(s) in 0.0400 seconds ./hbase shell1234567891011121314152019-01-09 10:55:54,792 WARN [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableHBase Shell; enter &apos;help&lt;RETURN&gt;&apos; for list of supported commands.Type &quot;exit&lt;RETURN&gt;&quot; to leave the HBase ShellVersion 1.2.9, rfd0d55b1e5ef54eb9bf60cce1f0a8e4c1da073ef, Sat Nov 17 21:43:34 CST 2018hbase(main):001:0&gt; status &apos;detailed&apos;version 1.2.90 regionsInTransitionactive master: localhost:44182 15469964250690 backup mastersmaster coprocessors: []1 live servers localhost:33288 1546996426037 requestsPerSecond=0.0, numberOfOnlineRegions=498, usedHeapMB=456, maxHeapMB=931, numberOfStores=626, numberOfStorefiles=3, storefileUncompressedSizeMB=0, storefileSizeMB=0, memstoreSizeMB=0, storefileIndexSizeMB=0, readRequestsCount=16623, writeRequestsCount=8095, rootIndexSizeKB=6, totalStaticIndexSizeKB=4, totalStaticBloomSizeKB=0, totalCompactingKVs=0, currentCompactedKVs=0, compactionProgressPct=NaN, coprocessors=[MultiRowMutationEndpoint]…… 当然也可以通过web控制台查看数据初始化是否成功！ 安装pinpoint-collector部署过程很简单，起一个web容器（tomcat），把下载的war包扔进去就可以了 解压tomcattar xf apache-tomcat-8.5.32.tar.gz -C /usr/local/cd /usr/local/mv apache-tomcat-8.5.32/ tomcat_pinpoint-collectorcd tomcat_pinpoint-collector/ 删除默认的应用rm -fr webapps/* 部署 pinpoint-collector-1.8.1.war拷贝pinpoint-collector-1.8.1.war到webapps目录下，重命名为ROOT.war,改名只是为了访问的时候不用加上下文对象名称，就是懒~~~cp /usr/local/src/pinpoint/pinpoint-collector-1.8.1.war webapps/ROOT.war 启动tomcat服务bin/startup.sh 安装pinpoint-web解压tomcattar xf apache-tomcat-8.5.32.tar.gz -C /usr/local/cd /usr/local/mv apache-tomcat-8.5.32 tomcat_pinpoint-web 修改tomcat端口由于已经有一个tomcat把默认的端口都占用了，我们这里修改一下tomcat使用到的端口cd tomcat_pinpoint-web/confsed -i &#39;s/port=&quot;8005&quot;/port=&quot;18005&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8080&quot;/port=&quot;18080&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8443&quot;/port=&quot;18443&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8009&quot;/port=&quot;18009&quot;/g&#39; server.xmlsed -i &#39;s/redirectPort=&quot;8443&quot;/redirectPort=&quot;18443&quot;/g&#39; server.xmlsed -i &quot;s/localhost/192.168.6.140/g&quot; server.xml 删除默认的应用rm -fr ../webapps/*cp /usr/local/src/pinpoint/pinpoint-web-1.8.1.war /usr/local/tomcat_pinpoint-web/webapps/ROOT.warbin/startup.sh访问web控制台http://192.168.6.140:18080 安装pinpoint-agent部署探针也很简单，就是在tomcat的启动配置文件中添加以下三行内容即可 添加linux探针mkdir -p /usr/local/pinpoint-agenttar xf pinpoint-agent-1.8.1.tar.gz -C /usr/local/pinpoint-agent/usr/local/pinpoint-agentvim pinpoint.config1profiler.collector.ip=192.168.6.140 检测一下agent和服务端的通信情况如果有问题，大部分情况下是pinpoint和hbase之间的连通性问题sh script/networktest.sh tar xf apache-tomcat-8.5.32.tar.gz -C /usr/local/mv apache-tomcat-8.5.32/ tomcat_testcd tomcat_test/conf/和之前一样，因为本机的tomcat端口被占用，我们修改一下相关端口sed -i &#39;s/port=&quot;8005&quot;/port=&quot;28005&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8080&quot;/port=&quot;28080&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8443&quot;/port=&quot;28443&quot;/g&#39; server.xmlsed -i &#39;s/port=&quot;8009&quot;/port=&quot;28009&quot;/g&#39; server.xmlsed -i &#39;s/redirectPort=&quot;8443&quot;/redirectPort=&quot;28443&quot;/g&#39; server.xmlsed -i &quot;s/localhost/192.168.6.140/g&quot; server.xml vim catalina.sh 12345678# for pinpoint agentAGENT_PATH=/usr/local/pinpoint-agentAGENT_VERSION=1.8.1AGENT_ID=&quot;agent001&quot;APPLICATION_NAME=&quot;test_140_28080&quot;CATALINA_OPTS=&quot;$CATALINA_OPTS -javaagent:$AGENT_PATH/pinpoint-bootstrap-$AGENT_VERSION.jar&quot;CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.agentId=$AGENT_ID&quot;CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.applicationName=$APPLICATION_NAME&quot; bin/startup.sh 添加windows探针由于我这边目前大部分项目都是在windows跑的，我们添加两个windows探针看一下真实的效果解压pinpoint-agent-1.8.1.tar.gz到D:/pinpoint-agent/修改配置文件pinpoint.config1profiler.collector.ip=192.168.6.140 修改D:\apache-tomcat-8082\bin\catalina.bat文件，添加到最前边即可123set CATALINA_OPTS=%CATALINA_OPTS% -javaagent:D:/pinpoint-agent/pinpoint-bootstrap-1.8.1.jarset CATALINA_OPTS=%CATALINA_OPTS% -Dpinpoint.agentId=agent002set CATALINA_OPTS=%CATALINA_OPTS% -Dpinpoint.applicationName=172_8082 修改D:\apache-tomcat-ou\bin\catalina.bat文件，添加到最前边即可123set CATALINA_OPTS=%CATALINA_OPTS% -javaagent:D:/pinpoint-agent/pinpoint-bootstrap-1.8.1.jarset CATALINA_OPTS=%CATALINA_OPTS% -Dpinpoint.agentId=agent003set CATALINA_OPTS=%CATALINA_OPTS% -Dpinpoint.applicationName=172_8081 启动tomcat后，我们打开pinpoint-web控制台 微服务springboot添加pinpoint探针1/usr/local/jdk1.8.0_202/bin/java -jar -javaagent:/usr/local/ths/pinpoint-agent/pinpoint-bootstrap-1.8.4.jar -Dpinpoint.agentId=monitor-china-server -Dpinpoint.applicationName=chinaserver /usr/local/ths/monitor-china-server.jar web控制台简单应用通过这个图，我们就能看到项目应用直接的依赖关系 删除应用如果有调试时产生已经废弃的应用，我们可以使用管理员api调用删除，可以使用应用名称（ /admin/removeApplicationName.pinpoint?applicationName=$APPLICATION_NAME&amp;password=$PASSWORD）或者客户端id（/admin/removeAgentId.pinpoint?applicationName=$APPLICATION_NAME&amp;agentId=$AGENT_ID&amp;password=$PASSWORD）两种方法删除；$PASSWORD为pinpoint-web.properties文件中的admin.password配置项值。12#示例http://172.16.10.24:8080/admin/removeApplicationName.pinpoint?applicationName=chinaserver.jar&amp;password=admin 参考链接；https://www.infoq.cn/article/apm-Pinpoint-practicehttps://www.cnblogs.com/yyhh/p/6106472.htmlhttps://github.com/naver/pinpoint/releaseshttps://blog.csdn.net/wh211212/article/details/80437696]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>pinpoint</tag>
        <tag>APM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次oracle故障排查记录]]></title>
    <url>%2Farlo%2Ff82f70f8%2F</url>
    <content type="text"><![CDATA[故障现象window操作系统，oracle 11.2.0.1.0版本，意外断电后计算机服务中可以启动oracle服务和监听服务，但是无法连接；使用sqlplus连接上去发现数据库未启动，尝试手动starup启动数据库，提示”ORA-03113:通信通道的文件结尾，进程id:7776 会话 ID: 322 序列号：25”的错误。进入到oracle 日志目录下，在alter_yangquan123.log发现有明显报错“ORA-00338: log 1 of thread 1 is more recent than control file”，该错误意思是redo日志中的记录比控制文件新。 ORA-00338: log 1 of thread 1 is more recent than control file手动创建控制文件1234oradebug setmypidoradebug tracefile_namealter database backup controlfile to trace;select value from v$diag_info where name =&apos;Diag Trace&apos;; 查看错误日志在alert_yangquan123.log日志中，我们可以看到以下这段123alter database backup controlfile to traceBackup controlfile written to trace file e:\app\adminsilu\diag\rdbms\yangquan123\trace\yangquan123_ora_20768.trcCompleted: alter database backup controlfile to trace 打开e:\app\adminsilu\diag\rdbms\yangquan123\trace\yangquan123_ora_20768.trc文件，复制一下这段，在sql窗口执行 手动运行sql语句启动sqlplus / as sysdba123456789101112131415161718192021SQL&gt; STARTUP NOMOUNT #在sql窗口执行以下命令CREATE CONTROLFILE REUSE DATABASE &quot;YANGQUAN&quot; NORESETLOGS NOARCHIVELOG MAXLOGFILES 16 MAXLOGMEMBERS 3 MAXDATAFILES 100 MAXINSTANCES 8 MAXLOGHISTORY 292LOGFILE GROUP 1 &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\REDO01.LOG&apos; SIZE 50M BLOCKSIZE 512, GROUP 2 &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\REDO02.LOG&apos; SIZE 50M BLOCKSIZE 512, GROUP 3 &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\REDO03.LOG&apos; SIZE 50M BLOCKSIZE 512-- STANDBY LOGFILEDATAFILE &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\SYSTEM01.DBF&apos;, &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\SYSAUX01.DBF&apos;, &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\UNDOTBS01.DBF&apos;, &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\USERS01.DBF&apos;, &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\EXAMPLE01.DBF&apos;, &apos;E:\ORACLE_DATABASEFILES\AIR_DATA.DBF&apos;CHARACTER SET ZHS16GBK; 启动之后查看数据库状态12select name,open_mode from v$database; #数据库状态已经Open了select * from dual; 但是，但是几秒钟之后实例就宕掉了 ORA-00600: internal error code, arguments: [4194], [], [], [], [], [], [], [], [], [], [], []再次查看alter日志，发现有新的报错了ORA-00600: internal error code, arguments: [4194], [], [], [], [], [], [], [], [], [], [], [] 通过spfile创建生成pfile1SQL&gt; create pfile from spfile; #创建出来的文件windows在$ORACLE_HOME/database目录下，Linux在$ORACLE_HOME/dbs目录下，格式为initORACLE_SID.ora 关闭数据库1SQL&gt; shutdown immediate 修改pfile打开inityangquan123.ora文件，修改其中的两行内容12*.undo_management=&apos;MANUAL&apos;*.undo_tablespace=&apos;UNDOTBS&apos; 使用pfile启动数据库1startup restrict pfile=&apos;E:\app\adminsilu\product\11.2.0\dbhome_1\database\inityangquan123.ora&apos; 查看undo文件12345SQL&gt; select tablespace_name, status, segment_name from dba_rollback_segs where status != &apos;OFFLINE&apos;; TABLESPACE_NAME STATUS SEGMENT_NAME------------------------------ ---------------- ------------------------------SYSTEM ONLINE SYSTEM 新建一个UNDO表空间1SQL&gt; create undo tablespace UNDOTBS1 datafile &apos;E:\APP\ADMINSILU\ORADATA\YANGQUAN123\UNDOTBS_01.dbf&apos; size 4G; 删除旧的UNDO表空间1SQL&gt; drop tablespace UNDOTBS including contents and datafiles; 关闭数据库实例1SQL&gt; shutdown immediate; 启动数据库实例到NOMOUNT状态1SQL&gt; startup nomount; 修改spfile中的undo_tablespace参数1SQL&gt; alter system set undo_tablespace=&apos;UNDOTBS1&apos; scope=spfile; 启动数据库实例（使用spfile）12SQL&gt; startup;SQL&gt; select name,open_mode from v$database; #查看数据库状态并监测 几分钟后发现数据库未关闭，但是日志中依然有报错 ORA-08102: index key not found，obj#289，file 1，block 2025(2);删除索引123456789SQL&gt; col object_name format a15;SQL&gt; col owner format a10;SQL&gt; select o.owner, o.object_name, o.object_id, o.object_type from dba_objects o where o.object_id = 289;OWNER OBJECT_NAME OBJECT_ID OBJECT_TYPE---------- --------------- ---------- -------------------SYS I_JOB_NEXT 289 INDEXSQL&gt; drop index i_job_next; 重建索引1SQL&gt; create index i_job_next on job$ (next_date); 数据库实例未能加到监听中检查了各种文件都正常，手动alter system register也不行，无奈之下，使用netca重新配置了监听。 参考链接：https://blog.csdn.net/zwk626542417/article/details/39667999http://www.cnblogs.com/kerrycode/p/6085447.htmlhttps://blog.csdn.net/lwei_998/article/details/5920133]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[N2N内网穿透(打洞)软件使用]]></title>
    <url>%2Farlo%2F1d2bb16a%2F</url>
    <content type="text"><![CDATA[背景首先说一下这个N2N软件的背景，这个是培训oracle的时候，安装rac需要多块网卡，云服务器不像本地服务器或者虚拟机那边方便，可以随便随便添加网口，使用到N2N这款软件模拟出多块网卡；其实N2N软件的主要功能是内网穿透，就是将服务器的网段可以和本地环境打穿到一个网段里；这个软件如果用在服务器上还是挺可怕的，类似windows下的teamviewer，类似linux下的ssh隧道模式;只要服务器可以上外网(严格说是连接到supermode)，就可以打通，慎用！ 概述N2N 是一款开源的P2P VPN 软件，其作者是著名的开源网管软件ntop的作者Luca Deri。N2N 是一个双层架构的VPN ，它让用户可以在网络层上开发P2P应用的典型功能，而不是在应用层上开发。这意味着用户可以获取本地IP一样的可见度（比如说，同一个n2n网络内的两台PC机可以相互ping通），并且可以通过n2n虚拟网内的IP地址相互访问，而不必关心当前所属的物理网络地址。可以这样说，OpenVPN是把SSL从应用层转移到网络层实现（比如说实现https协议），而n2n则是把P2P的实现从应用层转移到网络层。 N2N 设计的主要功能 N2N 是基于P2P 协议之上的两个私有网络间的加密层 加密是在edge 节点上执行的，使用开放的协议，用户自己定义密钥：你自己控制自己的安全，不需要委托给第三方公司 每个n2n 用户可以同时隶属于多个网络 有NAT和穿越防火墙的功能，即使n2n节点位于私网中，也能够访问，防火墙不再是在 IP 层的直接沟通和交流的障碍 N2N 网络不是独立的，它是能够跨越N2N 和非N2N网络路由的 N2N 架构组件 Edge 节点：用户PC 机上安装的用于建立n2n网络的软件。几乎每个edge节点都会建立一个tun/tap设备，作为接入n2n网络的入口。 Supernode 超级节点：它在edge 节点间建立握手，或为位于防火墙之后的节点中转数据。它的基础作用是注册节点的网络路径，并为不能直通的节点做路由，能够直通的节点间通信，是P2P的。Edge 节点间通过虚拟的tap 网卡交互。每个tap网卡都是一个n2n edge节点。每台PC机可以有多个tap网卡，所以，在n2n网络中，同一台PC机可以属于多个网络。 搭建N2N环境首先我们需要一个公网IP地址，一个可以访问的公网端口(UDP), 我这里刚好有一个华为云的服务器可以用IP: 114.116.xx.xxPort: 6666 安装软件12345678yum install -y subversion gcc-c++ openssl-devel git cmakecd /usr/srcsvn co https://svn.ntop.org/svn/ntop/trunk/n2ncd n2n/n2n_v2makemake PREFIX=/opt/n2n installcp supernode /usr/sbin/cp edge /usr/sbin/ 搭建中心服务器(supermode节点)1234#创建一个端口为6666的supermode服务，用于建立握手/usr/sbin/supernode -l 6666#查看6666端口是否存在，可以看到是udp端口ss -tnulp |grep 6666 12#新建一个虚拟设备edge0，用于测试edge -d edge0 -a 10.10.10.101 -s 255.255.255.0 -c fff -k fff -l 114.116.xxx.xxx:6666 -E -r 创建客户端(egdg节点)12#新建一个虚拟设备edge0，用于测试edge -d edge0 -a 10.10.10.102 -s 255.255.255.0 -c fff -k fff -l 114.116.xxx.xxx:6666 -E -r 参数：123456789-d &lt;接口名&gt; 选项指定了由 edge 命令创建的 TAP 接口的名字; 创建一个虚拟的网卡设备，edge0 就是它的名称-a &lt;IP 地址&gt; 选项（静态地）指定了分配给 TAP 接口的 VPN 的 IP 地址。如果你想要使用 DHCP，你需要在其中一台边缘节点上配置一台 DHCP 服务器，然后使用“-a dhcp:0.0.0.0”选项来代替。-s &lt;子网掩码&gt;-c &lt;组名&gt; 选项指定了 VPN 组的名字（最大长度为 16 个字节）。这个选项可以被用来在同样一组节点中创建多个 VPN。-k &lt;密钥&gt; 选项指定了一个由 twofish 加密的密钥来使用。如果你想要将密钥从命令行中隐藏，你可以使用 N2N_KEY 环境变量。-u 和 -g选项被用来在创建一个 TAP 接口后降权放弃 root 权限。edge 守护进程将会作为指定的用户/组 ID 运行。-l &lt;IP 地址:端口&gt; 选项指定了超级节点的监听 IP 地址和端口号。为了冗余，你可以指定最多两个不同的超级节点（比如 -l &lt;超级节点 A&gt; -l &lt;超级节点 B&gt;）。-m 给 TAP 接口分配了一个静态的 MAC 地址。不使用这个参数的话，edge 命令将会随机生成一个 MAC地址。事实上，为一个 VPN 接口强制指定一个静态的 MAC 地址是被强烈推荐的做法。否则，比如当你在一个节点上重启了 edge 守护程序的时候，其它节点的 ARP 缓存将会由于新生成的 MAC 地址而遭到污染，它们将不能向这个节点发送数据，直到被污染的 ARP 记录被消除。在使用过程中不免遇到一些奇葩的事，调试是个关键，开启调试模式，可以使用参数“-v -f”。记住先kill 掉之前的 edge 或 supernode 进程再进行调试以免冲突。 PS:如果想让新建的虚拟网卡开机后依然生效，需要将以上创建命令写入到/etc/rc.local 文件中，另外centos7操作系统需要chmod +x /etc/rc.d/rc.local]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>vpn</tag>
        <tag>n2n</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ksuapc : ORA-1033 foreground process starts before PMON]]></title>
    <url>%2Farlo%2F1c37e249%2F</url>
    <content type="text"><![CDATA[开发人员反馈，数据库没有做什么操作，突然连不上了！ 查看数据库日志12345SQL&gt; select VALUE from v$diag_info where name =&apos;Diag Trace&apos;; VALUE--------------------------------------------------------------------------------/home/u01/app/oracle/diag/rdbms/orcl/ORCL/trace 12cd /home/u01/app/oracle/diag/rdbms/orcl/ORCL/tracetail -200 alert_ORCL.log 发现日志里大量的报错ksuapc : ORA-1033 foreground process starts before PMON 网上搜了下，这是个bug，,该现象是数据库bug 8991997,该bug影响版本为:11.2.0.1/11.1.0.7,在11.2.0.1.1开始修复。大概意思就是监听起来了，数据库还没起来，有大量的外部应用在连接数据库，导致数据库无法正常启动；将数据库监听停止掉，先启动数据库，然后启动监听即可。lsnrctl stop 无法正常停止监听程序，我这里使用ps -ef|grep lsnrctl查看监听的进程id,然后使用kill -9 pid杀掉监听，然后安装正常流程启动就可以了。 启动数据库sqlplus / as sysdbaSQL&gt; startup 启动监听lsnrctl start 参考：http://www.xifenfei.com/2013/05/ksuapc-ora-1033-foreground-process-starts-before-pmon.html]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDM+油猴脚本实现百度云不限速下载]]></title>
    <url>%2Farlo%2F94c43a11%2F</url>
    <content type="text"><![CDATA[上周从JimV(http://template.iit.im/) 上下载了一个系统镜像模板用了两天，为解决这一问题，我使用了IDM下载工具和油猴脚本（chrome插件），测试了一下，速度基本上可以保持在300k左右，这里简单记录一下实现方法。 安装IDM下载工具官网：https://www.internetdownloadmanager.com/也可以自己在网上找破解版，安装完成后会监测本机上的浏览器，根据提示安装浏览器插件。 安装油猴脚本在chrome应用市场搜索“Tampermonkey”，安装油猴脚本管理器添加“EX-百度云盘”脚本打开百度云盘，刷新页面，可以看到多了一个“EX-下载”的按钮 分享百度云文件链接，实现下载 必须把要下载的文件分享出去，在隐身窗口或者退出登录后，打开分享链接，再使用脚本，方才有效！ 现在账户已登录的情况下使用脚本没有效果！！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[CentOS 5等保二级Linux主机问题整改，升级bash，openssl，openssh]]></title>
    <url>%2Farlo%2F81ca458a%2F</url>
    <content type="text"><![CDATA[设置系统密码长度、复杂度、生存周期vim /etc/pam.d/system-auth1234password requisite pam_cracklib.so minlen=12 ucredit=-1 lcredit=-1 ocredit=-1 retry=3 difok=5 #minlen（最小长度）12位，ucredit(最少大写字母)1位，lcredit(最少小写字母)1位，ocredit(最少其他字符)1位，retry(重试次数)3次，difok(最少不同字符)5个 dcreit(最少数字字符)0位auth required pam_tally.so onerr=fail deny=6 unlock_time=300 even_deny_root root_unlock_time=300#重试最大次数6次，错误后锁定300秒 vim /etc/login.defs1234PASS_MAX_DAYS 90 #密码最长过期天数PASS_MIN_DAYS 0 #密码最小过期天数PASS_MIN_LEN 12 #密码最小长度PASS_WARN_AGE 7 #密码过期警告天数 设置空闲会话时间vim /etc/profile1export TMOUT=300 source /etc/profile 升级系统补丁注：仓库配置文件为centos5的配置文件，如果购买了正版的RHEL操作系统，可以使用RHN服务进行更新vim /etc/yum.repos.d/CentOS-Base.repo123456789101112[base]name=CentOS-$releasever - Basebaseurl=http://vault.centos.org/5.11/os/x86_64/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5#released updates [updates]name=CentOS-$releasever - Updatesbaseurl=http://vault.centos.org/5.11/updates/x86_64/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5 yum update 安装杀毒软件clamav安装centos5的epel-release扩展包rpm -ivh http://dl.fedoraproject.org/pub/archive/epel/5/x86_64//epel-release-5-4.noarch.rpm 安装杀毒软件clamavyum install -y clamav 更新病毒库freshclam 测试查杀病毒clamscan -r /tmp 升级bash查看bash版本/bin/bash --version12GNU bash, version 3.2.25(1)-release (x86_64-redhat-linux-gnu)Copyright (C) 2005 Free Software Foundation, Inc. 检测漏洞env -i X=&#39;() { (a)=&gt;\&#39; bash -c &#39;echo date&#39;; cat echo1修复前输出：当前系统时间 安装基础依赖包yum -y install gcc gcc-c++ glibc 下载bash最新版wget http://ftp.gnu.org/gnu/bash/bash-4.4.tar.gz 编译安装bash./configuremake &amp;&amp; make install 备份旧版本bash，并设置软连接mv /bin/bash /bin/bash.bak &amp;&amp; ln -s /usr/local/bin/bash /bin/bash 查询升级后版本/bin/bash --version123456GNU bash, version 4.4.0(1)-release (x86_64-unknown-linux-gnu)Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software; you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. 再次检测漏洞env -i X=&#39;() { (a)=&gt;\&#39; bash -c &#39;echo date&#39;; cat echo1修复后输出：date 升级openssl查询openssl版本/usr/bin/openssl version -a1234567OpenSSL 0.9.8e-fips-rhel5 01 Jul 2008built on: Tue May 31 06:58:30 CDT 2016platform: linux-x86_64options: bn(64,64) md2(int) rc4(ptr,int) des(idx,cisc,16,int) blowfish(ptr2) compiler: gcc -fPIC -DOPENSSL_PIC -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DKRB5_MIT -I/usr/kerberos/include -DL_ENDIAN -DTERMIO -Wall -DMD32_REG_T=int -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -Wa,--noexecstack -DOPENSSL_USE_NEW_FUNCTIONS -fno-strict-aliasing -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASMOPENSSLDIR: &quot;/etc/pki/tls&quot;engines: dynamic 注：受perl版本限制，最新版的openssl1.1.1需要perl5.10+版本，本次升级为1.0.2版本 下载opensslwget -c https://www.openssl.org/source/openssl-1.0.2-latest.tar.gztar xf openssl-1.0.2p.tar.gzcd openssl-1.0.2p 编译安装openssl./config --prefix=/usr/local/opensslmake &amp;&amp; make install 备份之前的opensslmv /usr/bin/openssl /usr/bin/openssl.old &amp;&amp; mv /usr/include/openssl /usr/include/openssl.old 添加软连接ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl &amp;&amp; ln -s /usr/local/openssl/include/openssl /usr/include/openssl 再次查看openssl版本/usr/bin/openssl version -a123456OpenSSL 1.0.2p 14 Aug 2018built on: reproducible build, date unspecifiedplatform: linux-x86_64options: bn(64,64) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx) compiler: gcc -I. -I.. -I../include -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -O3 -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DRC4_ASM -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASMOPENSSLDIR: &quot;/usr/local/openssl/ssl&quot; 将OpenSSL 的动态链接库地址写入动态链接装入器echo &quot;/usr/local/openssl/lib&quot; &gt;&gt; /etc/ld.so.conf由于openssh配置时会使用旧版本的openssl库文件，需要先配置以下三个变量，让其指向新版本的opnessl库文件1234export DEFAULT_LIBPATH=/usr/local/openssl/include/openssl/:/usr/local/openssl/lib/export LIBPATH=$&#123;LIBPATH:=$DEFAULT_LIBPATH&#125; export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH:=$DEFAULT_LIBPATH&#125;export LIBRARY_PATH=$&#123;LIBRARY_PATH:=$DEFAULT_LIBPATH&#125; 重新加载动态链接库ldconfig -v 升级openssh安装配置telnet serveryum -y install telnet-servervim /etc/xinetd.d/telnet12345678910service telnet&#123; flags = REUSE socket_type = stream wait = no user = root server = /usr/sbin/in.telnetd log_on_failure += USERID disable = no #修改yes为no&#125; /etc/init.d/xinetd restart 设置防火墙，允许访问23端口也可以暂时关闭防火墙iptables -A RH-Firewall-1-INPUT -p tcp -m state --state NEW -m tcp --dport 23 -j ACCEPT或者service iptables stop 允许root远程telnet登录主机vim /etc/securetty123456789pts/0pts/1pts/2pts/3pts/4pts/5pts/6pts/7pts/8 以下操作使用telnet远程登录主机进行操作123telnet 192.168.7.70 23login:rootpasswd:xxxxxx 安装基础包yum install zlib zlib-devel 备份配置文件cp -r /etc/ssh /mntcp /etc/init.d/sshd /mntcp /etc/pam.d/sshd /mnt 下载、编译安装opensshwget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-7.9p1.tar.gztar xf openssh-7.9p1.tar.gzcd openssh-7.9p1./configure -prefix=/usr -sysconfdir=/etc/ssh -with-ssl-dir=/usr/local/openssl -with-zlib -with-pam -with-md5-passwords -with-kerberos5 --without-zlib-version-checkmake &amp;&amp; make install 启动sshd访问/etc/init.d/sshd restart 查看ssh版本ssh -V 升级后ssh用户无法远程登录提示Failed password for root from x.x.x.x port 55776 ssh2切记备份/etc/pam.d/sshd, 升级后如果不能远程登录，记得恢复之前备份的/etc/pam.d/sshd,如果忘记备份，可以从同系列主机（centos6就复制centos6的，centos7就复制centos7的）复制该文件，重启sshd服务即可！ Could not get shadow information for root查看selinux 状态sestatus如果是enabled状态，临时解决方案setenforce 0永久生效请修改/etc/selinux/config文件中的SELINUX=disabled，在合适的时候重启主机生效sed -i s#SELINUX=enforcing#SELINUX=disabled#g /etc/selinux/configreboot https://blog.csdn.net/zougen/article/details/79570500http://leung4080.github.io/linux/2013/08/07/OpenSSL-OpenSSH-升级配置/]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7关闭IPv6]]></title>
    <url>%2Farlo%2F244042e3%2F</url>
    <content type="text"><![CDATA[验证ipv6是否关闭cat /proc/sys/net/ipv6/conf/all/disable_ipv60：开启状态1：关闭状态 方法一： 开机不加载IPv6模块修改grub文件12vi /etc/default/grub GRUB_CMDLINE_LINUX=&quot;ipv6.disable=1 crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot; 1grub2-mkconfig -o /boot/grub2/grub.cfg 重启服务器，查看模块12rebootlsmod |grep ipv6 方法二：命令行修改（推荐）修改内核参数12vi /etc/sysctl.confnet.ipv6.conf.all.disable_ipv6=1 修改网络配置文件12vi /etc/sysconfig/networkNETWORKING_IPV6=no 修改网卡配置文件12vi /etc/sysconfig/network-scripts/ifcfg-XXIPV6INIT=no 加载内核参数，使其生效sysctl -p]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx反向代理Jenkins问题]]></title>
    <url>%2Farlo%2F57829448%2F</url>
    <content type="text"><![CDATA[由于只开放了一个端口，要使用jenkins发布业务的话，需要使用nginx把jenkins的端口反向代理出来；关于jenkins搭建参加本博客之前文章 修改jenkins配置文件vim /etc/sysconfig/jenkins1234# 由于我这里把8080端口占用了，把jenkins修改为7999端口JENKINS_PORT=&quot;7999&quot;# 为jenkins添加一个上下文对象JENKINS_ARGS=&quot;--prefix=/jenkins&quot; 修改nginx配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; client_max_body_size 60M; client_body_buffer_size 512k; upstream jenkins &#123; keepalive 32; server 127.0.0.1:7999 ; &#125; server &#123; listen 8080; server_name localhost; ignore_invalid_headers off; #project config file location /esp-web &#123; root html; index index.html index.htm; &#125; location /file &#123; root html; &#125; location /esp &#123; proxy_pass http://127.0.0.1:8081/esp; &#125;#jenkins config file location ~ &quot;^/static/[0-9a-fA-F]&#123;8&#125;\/(.*)$&quot; &#123; #rewrite all static files into requests to the root #E.g /static/12345678/css/something.css will become /css/something.css rewrite &quot;^/static/[0-9a-fA-F]&#123;8&#125;\/(.*)&quot; /$1 last; &#125; location /userContent &#123; #have nginx handle all the static requests to the userContent folder files #note : This is the $JENKINS_HOME dir root /var/lib/jenkins/; if (!-f $request_filename)&#123; #this file does not exist, might be a directory or a /**view** url rewrite (.*) /$1 last; break; &#125; sendfile on; &#125; location @jenkins &#123; sendfile off; proxy_pass http://jenkins; proxy_redirect default; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_max_temp_file_size 0; #this is the maximum upload size client_max_body_size 10m; client_body_buffer_size 128k; proxy_connect_timeout 90; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffering off; proxy_request_buffering off; # Required for HTTP CLI commands in Jenkins &gt; 2.54 proxy_set_header Connection &quot;&quot;; # Clear for keepalive &#125; location / &#123; # Optional configuration to detect and redirect iPhones if ($http_user_agent ~* &apos;(iPhone|iPod)&apos;) &#123; rewrite ^/$ /view/iphone/ redirect; &#125; try_files $uri @jenkins; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 重启nginx、jenkins12systemctl restart jenkins.servicenginx -s reload 参考文档：https://wiki.jenkins.io/display/JENKINS/Jenkins+says+my+reverse+proxy+setup+is+broken https://www.jianshu.com/p/8315657465ac]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改Mariadb数据库存储路径]]></title>
    <url>%2Farlo%2F1b10686d%2F</url>
    <content type="text"><![CDATA[拿到手的服务器大量空间在/home分区下，没有在/下，考虑到后期数据库增长量，/分区空间可能不够，决定把Mariadb数据库数据存储路径修改到/home分区下；以下为修改过程 关闭数据库服务1systemctl stop mariadb.service 新建新的存储路径，并移动之前的文件12mkdir /home/datamv /var/lib/mysql/ /home/data/ 修改配置文件 cp /usr/share/mysql/my-medium.cnf /etc/my.cnf #如果是新装的数据库，可以复制一个模板配置文件过来注：datadir上面的五行是设置默认字符集为utf8mb4，否则emoji表情是无法正确存储的。 vim /etc/my.cnf1234567891011[client]socket = /home/data/mysql/mysql.sock[mysqld]init_connect=&apos;SET collation_connection = utf8mb4_unicode_ci&apos;init_connect=&apos;SET NAMES utf8mb4&apos;character_set_server=utf8mb4collation-server=utf8mb4_unicode_ciskip-character-set-client-handshake=truedatadir=/home/data/mysql/ 报错报错:“[Warning] Can’t create test file /home/data/mysql/sthbb_rwdcdb_36_123.lower-test”.解决方式: 修改/usr/lib/systemd/system/mariadb.service中配置项1ProtectHome=false 验证123456789101112131415161718192021222324252627282930313233343536373839404142[root@sthbb_rwdcdb_36_123 data]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 3Server version: 10.1.36-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.MariaDB [(none)]&gt; show global variables like &quot;%datadir%&quot;;+---------------+-------------------+| Variable_name | Value |+---------------+-------------------+| datadir | /home/data/mysql/ |+---------------+-------------------+1 row in set (0.00 sec)MariaDB [(none)]&gt; status--------------mysql Ver 15.1 Distrib 10.1.36-MariaDB, for Linux (x86_64) using readline 5.1Connection id: 3Current database: Current user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: &apos;&apos;Using delimiter: ;Server: MariaDBServer version: 10.1.36-MariaDB MariaDB ServerProtocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8mb4Db characterset: utf8mb4Client characterset: utf8mb4Conn. characterset: utf8mb4UNIX socket: /home/data/mysql/mysql.sockUptime: 2 min 29 secThreads: 1 Questions: 5 Slow queries: 0 Opens: 17 Flush tables: 1 Open tables: 11 Queries per second avg: 0.033-------------- 参考链接：https://stackoverflow.com/questions/38529205/mariadb-cannot-start-after-update-warning-cant-create-test-file-home-mysql]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Mariadb</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 12c远程连接报ORA28040和ORA01017错误]]></title>
    <url>%2Farlo%2Fcb23bc66%2F</url>
    <content type="text"><![CDATA[ORA-28040: 没有匹配的验证协议修改$ORACLE_HOME\NETWORK\ADMIN\sqlnet.ora文件，添加以下两行12SQLNET.ALLOWED_LOGON_VERSION_SERVER=9SQLNET.ALLOWED_LOGON_VERSION_CLIENT=9 ORA-01017的错误的解决方法：sqlplus / as sysdba1ALTER USER username IDENTIFIED BY password 参考链接：http://blog.itpub.net/28612416/viewspace-2138896/https://m.aliyun.com/yunqi/articles/415260]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查询Oracle数据库连接和资源消耗常用语句]]></title>
    <url>%2Farlo%2F5e07e8b7%2F</url>
    <content type="text"><![CDATA[查看数据库连接命令查看数据库最大可用连接数show parameter processes; 查看数据库最大session数show parameter sessions; 查看数据库当前session数和活动sessionselect count(*) from v$session;select count(*) from v$session where status=&#39;ACTIVE&#39;; 查看数据库当前使用者SELECT osuser, a.username,cpu_time/executions/1000000||&#39;s&#39;, b.sql_text,machine from v$session a,v$sqlarea b where a.sql_address =b.address order by cpu_time/executions desc; 查看数据库资源使用情况命令查看各用户的各种资源占用123456789101112131415161718SELECT SE.SID, SES.USERNAME, SES.OSUSER, N.NAME, SE.VALUE FROM V$STATNAME N, V$SESSTAT SE, V$SESSION SES WHERE N.STATISTIC# = SE.STATISTIC# AND SE.SID = SES.SID AND SES.USERNAME IS NOT NULL AND N.NAME IN (&apos;CPU used by this session&apos;, &apos;db block gets&apos;, &apos;consistent gets&apos;, &apos;physical reads&apos;, &apos;free buffer requested&apos;, &apos;table scans (long tables)&apos;, &apos;table scan rows gotten&apos;, &apos;sorts (memory)&apos;, &apos;sorts (disk)&apos;, &apos;sorts (rows)&apos;, &apos;session uga memory max&apos;, &apos;session pga memory max&apos;) ORDER BY SID, N.STATISTIC#; 占用资源的SQL top10之类的数据123456789SELECT B.USERNAME USERNAME, A.DISK_READS READS, A.EXECUTIONS EXEC, A.DISK_READS / DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) RDS_EXEC_RATIO, A.SQL_TEXT STATEMENT FROM V$SQLAREA A, DBA_USERS B WHERE A.PARSING_USER_ID = B.USER_ID AND A.DISK_READS &gt; 100000 ORDER BY A.DISK_READS DESC; 使用频率最高的5个查询123456SELECT SQL_TEXT, EXECUTIONS FROM (SELECT SQL_TEXT, EXECUTIONS, RANK() OVER(ORDER BY EXECUTIONS DESC) EXEC_RANK FROM V$SQL)WHERE EXEC_RANK &lt;= 5; 消耗磁盘读取最多的sql top5123456SELECT DISK_READS, SQL_TEXT FROM (SELECT SQL_TEXT, DISK_READS, DENSE_RANK() OVER(ORDER BY DISK_READS DESC) DISK_READS_RANK FROM V$SQL) WHERE DISK_READS_RANK &lt;= 5; 找出需要大量缓冲读取（逻辑读）操作的查询123456SELECT BUFFER_GETS, SQL_TEXT FROM (SELECT SQL_TEXT, BUFFER_GETS, DENSE_RANK() OVER(ORDER BY BUFFER_GETS DESC) BUFFER_GETS_RANK FROM V$SQL) WHERE BUFFER_GETS_RANK &lt;= 5;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库hang住，应用连接缓慢甚至无法连接]]></title>
    <url>%2Farlo%2F9598871f%2F</url>
    <content type="text"><![CDATA[问题现象数据库抗住，开发人员反映应用断断续续无法连接，远程telnet数据库端口不通 登录数据库，查看日志位置12345SQL&gt; select value from v$diag_info where name =&apos;Diag Trace&apos;;VALUE--------------------------------------------------------------------------------e:\app\administrator\diag\rdbms\sx21\sx21\trace 报错1：redo日志无法切换查看alert_sx21.log日志，发现大量redo日志报错1234Checkpoint not completeCurrent log# 2 seq# 76268 mem# 0: E:\APP\ADMINISTRATOR\ORADATA\SX21\REDO02.LOGThread 1 advanced to log sequence 76269 (LGWR switch)Current log# 3 seq# 76269 mem# 0: E:\APP\ADMINISTRATOR\ORADATA\SX21\REDO03.LOG 增加redo日志12alter database add logfile group 4 (&apos;E:\APP\ADMINISTRATOR\ORADATA\SX21\REDO04.LOG&apos;) size 50m;alter database add logfile group 5 (&apos;E:\APP\ADMINISTRATOR\ORADATA\SX21\REDO05.LOG&apos;) size 50m; 查看redo日志1select group#,sequence#,bytes,members,status from v$log; 修改 fast_start_mttr_target参数1alter system set fast_start_mttr_target = 30 ; 报错2：1234567891011Sat Sep 01 08:37:01 2018Errors in file e:\app\administrator\diag\rdbms\sx21\sx21\trace\sx21_mmon_6264.trc (incident=144681):ORA-00445: 后台进程 &quot;m000&quot; 在 120 秒之后仍没有启动Sat Sep 01 08:39:06 2018Errors in file e:\app\administrator\diag\rdbms\sx21\sx21\trace\sx21_smco_13976.trc (incident=144698):ORA-00445: 后台进程 &quot;W000&quot; 在 120 秒之后仍没有启动Sat Sep 01 08:41:12 2018Errors in file e:\app\administrator\diag\rdbms\sx21\sx21\trace\sx21_cjq0_21740.trc (incident=144688):ORA-00445: 后台进程 &quot;J000&quot; 在 120 秒之后仍没有启动kkjcre1p: unable to spawn jobq slave process Errors in file e:\app\administrator\diag\rdbms\sx21\sx21\trace\sx21_cjq0_21740.trc: 此问题现象为系统内存不足，建议增加内存，或增加sga，由于暂时无法增加系统内存，我先调整了sga 修改sga1234567891011SQL&gt; show parameter sga;NAME TYPE VALUE------------------------------------ ----------- ----------------------------lock_sga boolean FALSEpre_page_sga boolean FALSEsga_max_size big integer 10Gsga_target big integer 0SQL&gt; alter system set sga_max_size=20480M scope=spfile; #一定要保证SGA_MAX_SIZE小于MEMORY_TARGET，否则启动会报错SQL&gt; shutdown immediateSQL&gt; startup 一定要保证SGA_MAX_SIZE小于MEMORY_TARGET，否则启动会报以下错误ORA-00844: Parameter not taking MEMORY_TARGET into accountORA-00851: SGA_MAX_SIZE 21474836480 cannot be set to more than MEMORY_TARGET 10737418240. 解决方法如下，创建一个pfile文件，然后修改内存参数，然后在创建一格spfile，启动数据库1SQL&gt; create pfile from spfile; 修改该文件以下参数E:\app\Administrator\product\11.2.0\dbhome_4\database\INITsx21.ORA*.memory_target=27487790694*.sga_max_size=21990232555*.sga_target=219902325551SQL&gt; create spfile from pfile; 参考文档： http://blog.51cto.com/mervin/490322http://blog.51cto.com/sysadmin/203502http://blog.51cto.com/leoguan/584494https://blog.csdn.net/ggwxk1990/article/details/78712204https://blog.csdn.net/leshami/article/details/5782516]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambari集成HUE]]></title>
    <url>%2Farlo%2F8591b53b%2F</url>
    <content type="text"><![CDATA[Hue介绍Hue 是运营和开发Hadoop应用的图形化用户界面。Hue程序被整合到一个类似桌面的环境，以web程序的形式发布，对于单独的用户来说不需要额外的安装。 依赖环境配置配置Maven3.5.41234567cd /usr/local/src/wget http://apache.mirrors.lucidnetworks.net/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz tar xf apache-maven-3.5.4-bin.tar.gz -C /usr/local/vim /etc/profileexport MAVEN_HOME=/usr/local/apache-maven-3.5.4export PATH=$PATH:$MAVEN_HOME/binsource /etc/profile python 版本2.6.6+12python -VPython 2.7.5 其他依赖工具和包1yum -y install ant asciidoc krb5-devel cyrus-sasl-gssapi cyrus-sasl-devel libxml2-devel libxslt-devel libtidy mysql mysql-devel openldap-devel python-devel python-simplejson python-setuptools sqlite-devel gcc gcc-c++ rsync saslwrapper-devel pycrypto gmp-devel libyaml-devel cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi libssl-devel libffi-devel libsasl2-dev libsasl2-modules-gssapi-mit libkrb5-dev python模块依赖安装1234pip install --upgrade pippip install ipdbpip install psycopg2pip install psycopg2-binary 编译安装123456789git clone https://github.com/cloudera/hue.gitmake apps（这一步可能遇到很多问题，比如某个包无法下载等，多执行几次就可以通过了）make locales（编译多语言版本）#注：若只编译简体中文版，需修改$HUE/desktop/core/src/desktop/settings.py文件中：LANGUAGE_CODE = &apos;zh_CN&apos;，并删除LANGUAGES中的其它语言项。make install #（make install PREFIX=/usr/hdp/2.3.4.0-3485/hue HADOOP_HOME=/usr/hdp/current/hadoop-client）$HUE/build/env/bin/hue test all #测试ln -s /usr/local/hue/desktop/libs/hadoop/java-lib/hue-plugins-3.9.0-SNAPSHOT.jar /opt/hadoop/hadoop-2.6.0/libuseradd huechown -R hue:hue /usr/local/hue #必须新建hue用户，且hue存在home目录，并赋hue目录权限，否则启动报错 修改/usr/local/hue/desktop/conf/pseudo-distributed.ini配置123456[desktop]secret_key=qwertyuiopasdfghjklzxcvbnm1234567890 #key随便写一串就行http_host=bigdata05.islocal.cchttp_port=8888time_zone=Asia/Shanghaiapp_blacklist = search,indexer,security #黑名单：如果不安装oozie的话，jobsub和oozie需同时加入黑名单才能禁用oozie,因为jobsub依赖oozie，否则启动会报错。 启动hue$HUE/build/env/bin/supervisor &amp; #在生产环境中使用这个命令$HUE/build/env/bin/hue runcpserver &amp; #用于development模式打开web页面：http://bigdata05.islocal.cc:8888 #第一次输入的用户名密码为超级管理员的用户密码。启动访问没有问题，即可将/usr/local/hue打成tar包，使用ambari进行集成安装 Ambari 集成安装HUE制作hue tar包12345678910111213tar cvzf hue-3.11.0.tgz 、/usr/local/hue/cp hue-3.11.0.tgz /var/www/html/hdp/HDP/centos7/2.6.5.0-292/hue/hue-3.11.0.tgzcat /etc/yum.repos.d/HDP.repo[HDP-2.6-repo-1]name=HDP-2.6-repo-1baseurl=http://192.168.6.157/hdp/HDP/centos7/2.6.5.0-292/path=/enabled=1gpgcheck=0vim /usr/lib/ambari-agent/lib/resource_management/core/sudo.py +142fp.write(content.encode(&quot;utf-8&quot;)) 版本说明Github中提供了两个版本的Ambari-Hue：v1.0.0和v2.0.0release-1.0.0 Ambari: 2.1.0~2.2.2 Hue: 3.9.0 release-2.0.0 Ambari: 2.4.0+ Hue: 3.10.0+ 下载ambari-hue到Ambari组件服务目录1234567VERSION=`hdp-select status hadoop-client | sed &apos;s/hadoop-client - \([0-9]\.[0-9]\).*/\1/&apos;`rm -rf /var/lib/ambari-server/resources/stacks/HDP/$VERSION/services/HUE # 我们这里使用hue 3.11版本，手动下载v2.0.0wget https://github.com/EsharEditor/ambari-hue-service/archive/v2.0.0.tar.gzmkdir -p /var/lib/ambari-server/resources/stacks/HDP/$VERSION/services/HUEtar xf v2.0.0.tar.gz -C /var/lib/ambari-server/resources/stacks/HDP/$VERSION/services/HUErm -fr /usr/hdp/current/hadoop-client/lib/hue-plugins-3.11.0-SNAPSHOT.jar 重启ambari-server1ambari-server restart 通过Ambari安装HueOn bottom left -&gt; Actions -&gt; Add service -&gt; check Hue server -&gt; Next -&gt; Next -&gt; Change any config you like (e.g. install dir, port) -&gt; Next -&gt; Deploy数据库使用默认的SqlLite即可，改成postgresql未安装成功！ Q&amp;AQ1：编译报错信息：error: ffi.h: No such file or directory (HUE 3.10.0编译时报此错误)A1：解决办法：yum -y install libssl-devel libffi-devel Q2：启动运行报错：UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xef in position 166: ordinal not in range(128)A2:问题分析：编码问题,Python的str默认是ascii编码，和unicode编码冲突解决办法：在出现问题的python文件或者页面添加如下3行信息：123import sysreload(sys)sys.setdefaultencoding(&apos;utf-8&apos;) Q3: Hue提交Oozie任务，任务一直处于运行状态，Log日志报错信息如下：org.apache.oozie.action.ActionExecutorException: JA009: Cannot initialize Cluster. Please check your configuration for mapreduce.framework.name and the correspond server addressesA3: 解决办法：在HDFS是ha模式下，需要配置hue-hadoop中配置信息为：logical_name= hdfs://nncluster Q4: NoteBook中提交spark shell任务：报错：The Spark session could not be created in the cluster: at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.mkdirs(ClientNamenodeProtocolTranslatorPB.java:558) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:606) at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:252) at org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:104) at com.sun.proxy.$Proxy28.mkdirs(Unknown Source) at org.apache.hadoop.hdfs.DFSClient.primitiveMkdir(DFSClient.java:3018) … 28 moreA4: 解决办法：在hadoop的core-site.xml文件中添加spark用户的授权信息：12345678&lt;property&gt; &lt;name&gt;hadoop.proxyuser.spark.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hadoop.proxyuser.spark.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt; Q5: Hue中确认配置好hive以及在hive中添加了相关配置后，发现依旧无法连接Hiveserver2,无Kerberos认证Hue中的报错信息： Could not start SASL: Error in sasl_client_start (-4) SASL(-4): no mechanism available: No worthy mechs foundHiveserver2日志中的报错信息： ERROR [HiveServer2-Handler-Pool: Thread-31]: server.TThreadPoolServer (TThreadPoolServer.java:run(296)) - Error occurred during processing of message. java.lang.RuntimeException: org.apache.thrift.transport.TSaslTransportException: No data or no sasl data in the streamA5: 问题分析：Hue连接Hiveserver2使用的是Python，在Centos操作系统上丢失了一些依赖：cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi解决办法：yum -y install cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi设置以下配置像为NOSASL或None1234567&lt;property&gt; &lt;name&gt;hive.server2.authentication&lt;/name&gt; &lt;value&gt;NOSASL&lt;/value&gt; &lt;!--或者设置为 &lt;value&gt;None&lt;/value&gt; --&gt;&lt;/property&gt; Q6 报错信息：django.core.exceptions.ImproperlyConfigured: psycopg2_version 2.5.4 or newer is required; you have 2.5.1 (dt dec pq3 ext)A6: 解决方法123pip install --upgrade pippip upgrade psycopg2pip install psycopg2-binary Q7报错信息：RuntimeError: Model class beeswax.models.QueryHistory doesn’t declare an explicit app_label and isn’t in an application in INSTALLED_APPS.A7: 解决方法，修改配置文件/usr/local/hue/desktop/core/src/desktop/settings.py1234INSTALLED_APPS = [ &apos;beeswax&apos;, &apos;oozie&apos;,] Q8 web也没访问报错信息：Invalid HTTP_HOST header:’bigdata05.islocal.cc:8888’.You may need to add u’bigdata05.islocal.cc’ to ALLOWED_HOSTS.A8： 解决方法，修改配置文件/usr/local/hue/desktop/core/src/desktop/settings.py1ALLOWED_HOSTS = [&apos;*&apos;] 参考文档https://eshareditor.github.io/2016/09/14/Hue-编译安装/https://eshareditor.github.io/2016/10/11/Ambari-Hue-Service/SDK文档：http://cloudera.github.io/hue/docs-3.7.0/sdk/sdk.html#introduction-and-overviewHue配置信息说明(中文):2018/7/26 http://www.cloudera.com/content/www/zh-CN/documentation/enterprise/5-3-x/topics/cdh_ig_hue_config.html(英文)http://archive.cloudera.com/cdh5/cdh/5/hue/user-guide/index.html]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Ambari</tag>
        <tag>HDP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关闭Oracle审计日志，解决因AUD$数据过大，导致SYSTEM表空间暴涨的问题]]></title>
    <url>%2Farlo%2Fddea0a3f%2F</url>
    <content type="text"><![CDATA[生产服务器报错，system表空间满了，拓展了表空间重启服务后正常，但是很好奇system表空间怎么会增长这么快？业务数据默认存放在USERS表空间和TEMP临时表空间中。 查询一下system表空间中占用空间最大的表1234567SELECT * FROM (SELECT SEGMENT_NAME, SUM(BYTES) / 1024 / 1024 MB FROM DBA_SEGMENTS WHERE TABLESPACE_NAME = &apos;SYSTEM&apos; GROUP BY SEGMENT_NAME ORDER BY 2 DESC) WHERE ROWNUM &lt; 10; 查询一下system空间占用比1234567SELECT B.TABLESPACE_NAME &quot;表空间&quot;, B.BYTES / 1024 / 1024 &quot;大小M&quot;, (B.BYTES - SUM(NVL(A.BYTES, 0))) / 1024 / 1024 &quot;已使用M&quot;, SUBSTR((B.BYTES - SUM(NVL(A.BYTES, 0))) / (B.BYTES) * 100, 1, 5) &quot;利用率&quot; FROM DBA_FREE_SPACE A, DBA_DATA_FILES B WHERE A.FILE_ID = B.FILE_ID AND B.TABLESPACE_NAME = &apos;SYSTEM&apos; GROUP BY B.TABLESPACE_NAME, B.FILE_NAME, B.BYTES ORDER BY B.TABLESPACE_NAME; 查询AUD$占用空间123SELECT SEGMENT_NAME, BYTES / 1024 / 1024 &quot;占用空间M&quot; FROM DBA_SEGMENTS WHERE SEGMENT_NAME = &apos;AUD$&apos;; 查看aud审计策略1show parameter audit_trail 发现数据库启用了DB级别的审计功能，相关审计级别如下：None：是默认值，不做审计；DB：将audit trail 记录在数据库的审计相关表中，如aud$，审计的结果只有连接信息；DB,Extended：这样审计结果里面除了连接信息还包含了当时执行的具体语句；OS：将audit trail 记录在操作系统文件中，文件名由audit_file_dest参数指定； 截断数据1truncate table aud$; 修改spfile启动文件，关闭审计功能123SQL&gt; alter system set audit_trail=NONE scope=spfile;SQL&gt; shutdown immediate;SQL&gt; startup 参考链接：https://blog.csdn.net/melody_mr/article/details/41208849https://blog.csdn.net/lwei_998/article/details/7394638]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自建KMS服务器，激活Windows & Office]]></title>
    <url>%2Farlo%2F8566e00c%2F</url>
    <content type="text"><![CDATA[全文转自：https://lolico.moe/tutorial/linux-kms-server.html One key KMSLinux 快速搭建 KMS 激活服务器，让 PC 激活 Windows 和 Office 并自动续期，告别网上的来路不明的激活工具，防止意外中毒。虽然目前已经有各种 PC 用的 KMS 激活程序，例如KMSAuto或者KMS VL ALL之类的，但是他们都会被 Windows Defender 或者普通的杀毒软件认为是病毒。虽然你“相信”这些软件被报毒是很正常的，直接加入白名单了事，然而你确实不知道你从网上搜索下载的这些激活程序是不是真的经过别人的改造植入了病毒……因此，我们可以利用自己的 Linux VPS 搭建 KMS 激活服务器给自己的 PC 使用，这样既安全无毒又不怕激活丢失。只能激活VL 版本（即“团体批量许可证”版）的 Windows，Office 则有办法从零售版转成 VL 版所以不用担心 一键搭建 KMS 服务下载脚本并运行，根据提示键入y开始安装CentOS / Redhat / Fedora1wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/one-key-kms-centos.sh &amp;&amp; chmod +x one-key-kms-centos.sh &amp;&amp;./one-key-kms-centos.sh Debian / Ubuntu / Mint1wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/one-key-kms-debian.sh &amp;&amp; chmod +x one-key-kms-debian.sh &amp;&amp; ./one-key-kms-debian.sh 下载这个作者写的配套脚本来控制启动/停止/重启等123456#下载脚本wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/kms.sh &amp;&amp; chmod +x kms.sh#启动 KMS 服务./kms.sh start#这个脚本可以使用的参数：# start | stop | restart | status 如果你的防火墙默认 DROP，那么需要手动放行1688端口CentOS / Redhat / Fedora1iptables -I INPUT -p tcp --dport 1688 -j ACCEPT Debian / Ubuntu / Mint123#如果有 ufw 的话ufw allow 1688#如果没有的话，这么方便的防火墙工具为啥不装一个嘞~ 激活 Windows再次提醒，只能激活 VL 版的系统以管理员身份运行命令提示符或者PowerShell，然后输入以下命令：1234cd /d &quot;%SystemRoot%\system32&quot;slmgr /skms 你的KMS服务端主机的IP或者域名slmgr /atoslmgr /xpr 这样，每过 180 天，系统都会自动与你的 KMS 服务器通信来激活 Windows，只要到时候你的 KMS 服务器还在，Windows 就能继续激活;当然，你也可以随时通过slmgr /skms这条命令来更换你的 KMS 服务器地址 激活 Office只能激活 VL 版的 Office，如果是零售版，百度一下有很多将零售版转换为 VL 版的方法和批处理脚本；如果你比较懒，也可以直接利用KMSAuto工具来转换首先确定你的 Office 版本所对应的目录名称： 版本 目录名称 2016 Office16 2013 Office15 2010 Office14 如果你的 Office 是 32 位的，那么目录就在C:\Program Files (x86)\Microsoft Office\目录名称如果是 64 位，那么在C:\Program Files\Microsoft Office\目录名称接下来以管理员身份运行命令提示符或者PowerShell，然后输入以下命令：1234#以 64 位的 Office2016 为例，进入 Office 目录cd &quot;C:\Program Files\Microsoft Office\Office16&quot;cscript ospp.vbs /sethst:你的KMS服务端主机的IP或者域名cscript ospp.vbs /act 其他说明开机自启如果只是想简单的让 KMS 服务在 Linux 上开机自启，那么编辑/etc/rc.local文件，在exit 0（如果有）前面加上一句 假设之前下载的那个 kms.sh 脚本位于 /root/kms.sh/root/kms.sh start然后保存即可 守护进程如果你有很高的要求，想让 KMS 服务以守护进程的方式运行，防止服务意外终止12345678910#Debian / Ubuntu / Mint 使用 apt-get 来安装 supervisor#CentOS / Redhat / Fedora 使用 yum 来安装 supervisor#这里以 Debian 系统为例apt-get install supervisor -yecho &quot;[program:kms]command=/usr/local/kms/vlmcsd -L 0.0.0.0:1688autorestart=trueautostart=trueuser=root&quot; &gt; /etc/supervisor/conf.d/kms.conf/etc/init.d/supervisor restart 如果你使用守护进程方式运行 KMS 服务，那么就不需要在/etc/rc.local中写入开机启动命令 windows各版本简洁介绍Retail版RTL版Retail正式零售版，供市面上架零售。另外，在安装盘的i386文件夹里有一个eula.txt文件，最后有一行EULAID，就是你的版本标识。简体中文正式版是EULAID:WX.4_PRO_RTL_CN；繁体中文正式版是WX.4_PRO_RTL_TW；其中：WX.开头是正式版，WB.开头是测试版；_PRE代表家庭版，_PRO代表专业版； VOL版Volume OR Volume Licensing for Organizations 翻译过来就是组织团体批量许可，也就是大客户版，比如ZF部门、大型商业机构等统一购买的一般都是大客户版本，一般根据购买数量又可细分为开放式许可( Open License)、选择式许可(Select License)、企业许可协议(Enterprise Agreement)、教育科研许可(Academic Volume Licensing)等5种版本。 OEM版Original Equipment Manufacturer 计算机厂商随机版，只能随计算机一对一出货，不可以单独零售。只能全新安不能从旧有操作系统升级，包装也不像零售版那样精美（反正是随机子打包的，穿的再好也没用_），通常只有一面CD盘和使用授权说明书。比如联想、DELL等出售的WINDOWS操作系统计算机一般都是。 Alpha版Alpha内部测试版，一般不会向外部发布，会有很多Bug，只供测试人员使用，如果您看到Alpha版本了，一般来讲对于微软来讲可能是个不好的消息。Beta版Beta也是测试版，是继Alpha之后推出，这个阶段的版本会不断加入新的功能，改动也会较大，也会面向市场测试。 RC版ReleaseCandidate 测试候选版本，WINDOWS RC版不会再加入新功能，主要测试软件内的BUG。 RTM版Release to Manufacture或者Resin Transfer Molding 供给生产工厂大量压片的版本，内容跟正式版是一样的，不过RTM版也会在时间上再次划分出限制版和评估版的。再次进行市场验证。 EVAL版Evaluation 与“评估版”类似，功能上和零售版没有区别，需要激活。 CTP版Community Test Preview 社区测试试用版 相关链接：https://lolico.moe/tutorial/linux-kms-server.htmlhttps://hub.docker.com/r/ilemonrain/vlmcsd/https://github.com/Wind4/vlmcsdhttps://github.com/SystemRage/py-kms]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>激活</tag>
        <tag>KMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ambari+HDP大数据平台搭建]]></title>
    <url>%2Farlo%2F34b2c7a7%2F</url>
    <content type="text"><![CDATA[Ambari 是什么？Ambari 跟 Hadoop 等开源软件一样，也是 Apache Software Foundation 中的一个项目，并且是顶级项目。（http://ambari.apache.org） 目前最新的发布版本是 2.6.2.0；Ambari可以简单的理解为开源的Hadoop生态圈（Hive，Yarn，Hbase，Hive，Sqoop，Kafka，Zookeeper，spark 等）平台的管理软件，具备Hadoop组件的安装、管理、运维等基本功能，提供Web UI进行可视化的集群管理，简化了大数据平台的安装、使用难度。 基础环境配置资源规划 主机名 IP地址 操作系统 bigdata01.islocal.cc 192.168.6.164 CentOS Linux release 7.4.1708 (Core) bigdata02.islocal.cc 192.168.6.181 CentOS Linux release 7.4.1708 (Core) bigdata03.islocal.cc 192.168.6.183 CentOS Linux release 7.4.1708 (Core) bigdata04.islocal.cc 192.168.6.194 CentOS Linux release 7.4.1708 (Core) 软件版本JDK 1.8.1.8.0_112postgresql 10.3Ambari 2.6.2.0-155HDP 2.6.4.0-91HDP-GPL 2.6.4.0-91HDP-UTILS 1.1.0.22 下载地址 首先登陆官方页面https://docs.hortonworks.com/index.html 选择需要的版本 点击installation 选择Install Ambari 选择左侧的Ambari Repositories、HDP Stack Repositories 关闭防火墙和Selinux关闭防火墙systemctl stop firewalld.service 禁用防火墙systemctl disable firewalld.service #查询防火墙服务状态12345[root@bigdata01 ~]# systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled) Active: inactive (dead) Docs: man:firewalld(1) 关闭Selinux123sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/&apos; /etc/selinux/configgrep SELINUX=disabled /etc/selinux/configsetenforce 0 查看Selinux状态12[root@bigdata01 ~]# sestatus SELinux status: disabled or12[root@bigdata01 ~]# getenforce Disabled 新建用户useradd hadoop &amp;&amp; echo &quot;hadoop:hadoop&quot; | chpasswdvisudo1234567891011## Allow root to run any commands anywhere root ALL=(ALL) ALLhadoop ALL=(ALL) ALL #赋予hadoop用户所有权限## Allows members of the &apos;sys&apos; group to run networking, software, ## service management apps and more.# %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS## Allows people in group wheel to run all commands%wheel ALL=(ALL) ALLhadoop ALL=(ALL) NOPASSWD: ALL #hadoop用户执行sudo不用输入密码 hadoop用户免密配置配置bigdata01主机上的hosts[root@bigdata01 ~]# cat /etc/hosts123456127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.6.164 bigdata01.islocal.cc192.168.6.181 bigdata02.islocal.cc192.168.6.183 bigdata03.islocal.cc192.168.6.194 bigdata04.islocal.cc 复制/etc/hosts到其他主机scp /etc/hosts bigdata02.islocal.cc:/etc/hostsscp /etc/hosts bigdata03.islocal.cc:/etc/hostsscp /etc/hosts bigdata04.islocal.cc:/etc/hosts 配置免密su - hadoopssh-keygen #默认一路回车 拷贝秘钥到其他主机ssh-copy-id bigdata01.islocal.ccssh-copy-id bigdata02.islocal.ccssh-copy-id bigdata03.islocal.ccssh-copy-id bigdata04.islocal.cc 测试ssh bigdata01.islocal.cc datessh bigdata02.islocal.cc datessh bigdata03.islocal.cc datessh bigdata04.islocal.cc date 配置时间同步如果服务器可以上外网，直接使用公网时间服务器即可yum -y install ntpdatecrontab -e添加下边这行，保存。1*/10 * * * * /usr/sbin/ntpdate cn.ntp.org.cn &amp;&amp; hwclock -w 安装JDK1234567891011121314mkdir /usr/thstar xf jdk1.8.0_112.tgz -C /usr/ths# 安装jcehttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.htmlunzip -o -j -q jce_policy-8.zip -d /usr/ths/jdk1.8.0_112/jre/lib/security/vim /etc/profileexport EDITOR=/usr/bin/vimexport HISTSIZE=10000export HISTTIMEFORMAT=&quot;%F %T &quot;export JAVA_HOME=/usr/ths/jdk1.8.0_112export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarsource /etc/profile 系统参数优化vim /etc/security/limits.conf12* soft nofile 65536* hard nofile 65536 本地仓库搭建由于ambari，hdp软件包很大，使用官方的yum源安装比较慢，我们搭建一个本地仓库，使用本地yum源 安装配置web服务器安装依赖包yum install gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel wget 安装nginx1234wget http://nginx.org/download/nginx-1.14.0.tar.gztar xf nginx-1.14.0.tar.gzcd nginx-1.14.0./configure --prefix=/usr/ths/nginx-1.14.0/ &amp;&amp; make &amp;&amp; make install 更换nginx根目录1234567891011121314mkdir -p /var/www/html/vim /usr/ths/nginx-1.14.0/conf/nginx.conf...location / &#123; root /var/www/html; index index.html index.htm; autoindex on; #允许列出目录 &#125;...#监测配置文件是否正确cd /usr/ths/nginx-1.14.0/sbin./nginx -t#启动./nginx 解压文件到nginx发布目录下12345mkdir -p /var/www/html/hdp/tar xf ambari-2.6.2.0-centos7.tar.gz -C /var/www/html/tar xf HDP-GPL-2.6.4.0-centos7-rpm.tar.gz -C /var/www/html/hdp/tar xf HDP-UTILS-1.1.0.22-centos7.tar.gz -C /var/www/html/hdp/tar xf HDP-2.6.4.0-centos7-rpm.tar.gz -C /var/www/html/hdp/ 目录结构如下1234567891011121314151617181920212223242526[root@bigdata01 ~]# tree -L 4 /var/www/html//var/www/html/├── ambari│ └── centos7│ └── 2.6.2.0-155│ ├── ambari│ ├── ambari.repo│ ├── artifacts.txt│ ├── build.id│ ├── build_metadata.txt│ ├── repodata│ ├── RPM-GPG-KEY│ ├── smartsense│ └── tars└── hdp ├── HDP │ └── centos7 │ └── 2.6.4.0-91 ├── HDP-GPL │ └── centos7 │ └── 2.6.4.0-91 └── HDP-UTILS └── centos7 └── 1.1.0.2218 directories, 4 files 安装本地源制作相关工具yum install yum-utils createrepo 编辑repo文件cat /etc/yum.repos.d/ambari.repo12345#VERSION_NUMBER=2.6.2.0-155[ambari-2.6.2.0]name=ambari Version - ambari-2.6.2.0baseurl=http://192.168.6.164/ambari/centos7/2.6.2.0-155/gpgcheck=0 安装数据库Ambari支持PostgreSQL 9.1.13+,9.3, 9.4 MariaDB 10.1 MySQL 5.6 Oracle 11gr2 Oracle 12c 等版本数据库，我们这里使用postgres数据库。 创建用户和组123groupadd postgres #新增用户组useradd -g postgres postgres #新增用户passwd postgres #为用户设置密码 创建数据目录，并授予权限mkdir -p /usr/ths/data/PGDATAchown postgres:postgres /usr/ths/data/PGDATAchmod 700 /usr/ths/data/PGDATA 编译安装1234567tar -zxvf postgresql-10.3.tar.gzcd postgresql-10.3./configure --prefix=/usr/ths/pgsql-10.3 --without-readlinesudo makesudo make installsu - postgres /usr/ths/pgsql-10.3/bin/initdb -D /usr/ths/data/PGDATA #初始化配置和数据库 启动12# -D 为数据文件位置 -l 为日志文件位置(日志文件不存在会自动创建)/usr/ths/pgsql-10.3/bin/pg_ctl start -D /usr/ths/data/PGDATA -l /usr/ths/data/PGDATA/pgsql.log #可选。 配置环境变量vi cat /etc/profile追加以下两行到/etc/profile123export PG_HOME=/usr/ths/pgsql-10.3export PATH=$PG_HOME/bin:$PATH #注意，环境变量要把:$PATH写在后面，可以避免一些版本冲突问题 配置文件修改/usr/ths/data/PGDATA/postgresql.conf1listen_addresses = &apos;*&apos; pg_hba.conf1host all all 192.168.6.1/24 trust 新建ambari数据库12345678910111213su - postgres#进入psql命令行工具psql#依次执行以下建库建用户语句CREATE DATABASE ambari; CREATE USER hdp WITH PASSWORD &apos;solution&apos;;GRANT ALL PRIVILEGES ON DATABASE ambari TO hdp; \connect ambari; CREATE SCHEMA AMBARI AUTHORIZATION hdp;ALTER SCHEMA AMBARI OWNER TO hdp;ALTER ROLE hdp SET search_path to &apos;AMBARI&apos;, &apos;public&apos;;#退出\q 执行Ambari的DDL语句123456# 以hdp用户，连接ambari库psql -U hdp -d ambari# 执行DDL语句\i /var/lib/ambari-server/resources/Ambari-DDL-Postgres-CREATE.sql#执行完毕后，退出\q 设置Ambari使用的PostgreSQL驱动包wget https://jdbc.postgresql.org/download/postgresql-42.2.2.jar -O /usr/ths/lib/postgresql-42.2.2.jarroot用户执行ambari-server setup --jdbc-db=postgres --jdbc-driver=/usr/ths/lib/postgresql-42.2.2.jar 安装Ambariyum -y install ambari-server 配置Ambariambari-server setup123456789101112131415#Customize user account for ambari-server daemon [y/n] (n)? y #自定义设置#Enter user account for ambari-server daemon (postgres): hadoop#Do you want to change Oracle JDK [y/n] (n)? y #是否修改Jdk#Enter choice (1): 3 #输入3#Path to JAVA_HOME: /usr/ths/jdk1.8.0_112 #设置jdk路径 #Enter advanced database configuration [y/n] (n)? y #是否进入高级数据库设置#Enter choice (1): 4 #数据库类型4（PostgreSQL）#Hostname (localhost): 192.168.6.164 #数据库地址#Port (5432): 5432 #数据库端口#Database name (ambari): ambari #数据库名#Postgres schema (ambari): ambari #Username (ambari): hdp #数据库用户名#Enter Database Password (bigdata): solution #数据库密码 #Re-enter password:你的密码#Proceed with configuring remote database connection properties [y/n] (y)? y 启动ambari-serverambari-server start访问地址：http://192.168.6.164:8080 默认用户名密码： admin/admin 安装HDP集群点击图中的蓝色按钮“Launch Install Wizard”启动安装向导。 设置HDP集群名称 选择要安装的HDP版本和本地仓库配置 设置ssh私钥私钥内容为/home/hadoop/.ssh/id_rsa文件内容，可以下载该文件或者直接复制文件内容 监测ssh免密通信 选择要安装的服务这里根据自己的安装选择，安装完成后也可以在Services-Action中添加 配置各个服务Master这里可以在下拉选项里选择调整一下默认的主机设置，保持资源均衡 服务的Slaves 和 Clients节配置 服务器自定义配置这里一般出现的红色警告都是需要设置密码的地方，手动填一下即可！这里填写之前设置过的postgres数据库hdp用户，填写完成后测试一下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Admin Name : adminCluster Name : ARLOTotal Hosts : 4 (4 new)Repositories:redhat7 (HDP-2.6): http://192.168.6.164/hdp/HDP/centos7/2.6.4.0-91/redhat7 (HDP-2.6-GPL): http://192.168.6.164/hdp/HDP-GPL/centos7/2.6.4.0-91/redhat7 (HDP-UTILS-1.1.0.22): http://192.168.6.164/hdp/HDP-UTILS/centos7/1.1.0.22/Services:HDFSDataNode : 3 hostsNameNode : bigdata01.islocal.ccNFSGateway : 1 hostSNameNode : bigdata02.islocal.ccYARN + MapReduce2App Timeline Server : bigdata04.islocal.ccNodeManager : 1 hostResourceManager : bigdata04.islocal.ccTezClients : 1 hostHiveMetastore : bigdata02.islocal.ccHiveServer2 : bigdata02.islocal.ccWebHCat Server : bigdata02.islocal.ccDatabase : Existing PostgreSQL DatabaseHBaseMaster : bigdata01.islocal.ccRegionServer : 1 hostPhoenix Query Server : 0 hostPigClients : 1 hostZooKeeperServer : 3 hostsAmbari MetricsMetrics Collector : bigdata03.islocal.ccGrafana : bigdata03.islocal.ccSmartSenseActivity Analyzer : bigdata01.islocal.ccActivity Explorer : bigdata01.islocal.ccHST Server : bigdata01.islocal.ccSliderClients : 1 host 开始安装出现警告，在安装过程完成后，可以进入到service里单独启动一下，看看日志报错详细解决。 解决完所有告警，效果图如下 NameNode HA配置关闭HBase服务这一步非常重要 点击Services-HDFS-Enable NameNode HA 输入Nameservice ID 选择要安装的主机 默认即可 根据提示登录到对应主机上执行提示命令如下图所示 开始安装组件 初始化组件 Namenode HA启用完成，如图所示 参考链接：http://www.cnblogs.com/zhijianliutang/articles/5195045.htmlhttps://blog.csdn.net/mawenwu1983/article/details/78983275http://wiki.ttxit.com/display/hortonworks/Hortonworkshttps://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.htmlhttp://blog.51cto.com/hsbxxl/1981411]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Ambari</tag>
        <tag>HDP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell版俄罗斯方块(转)]]></title>
    <url>%2Farlo%2F8656017b%2F</url>
    <content type="text"><![CDATA[在网上看到一篇shell版本的俄罗斯方块游戏，很有趣，转过来记录一下。地址：http://www.ywnds.com/?pbin/bash # Tetris Game# 10.21.2003 xhchen&lt;[email]xhchen@winbond.com.tw[/email]&gt; #APP declarationAPP_NAME=&quot;$&#123;0##*[\\/]&#125;&quot;APP_VERSION=&quot;1.0&quot; #颜色定义cRed=1cGreen=2cYellow=3cBlue=4cFuchsia=5cCyan=6cWhite=7colorTable=($cRed $cGreen $cYellow $cBlue $cFuchsia $cCyan $cWhite) #位置和大小iLeft=3iTop=2((iTrayLeft = iLeft + 2))((iTrayTop = iTop + 1))((iTrayWidth = 10))((iTrayHeight = 15)) #颜色设置cBorder=$cGreencScore=$cFuchsiacScoreValue=$cCyan #控制信号#改游戏使用两个进程，一个用于接收输入，一个用于游戏流程和显示界面;#当前者接收到上下左右等按键时，通过向后者发送signal的方式通知后者。sigRotate=25sigLeft=26sigRight=27sigDown=28sigAllDown=29sigExit=30 #七中不同的方块的定义#通过旋转，每种方块的显示的样式可能有几种box0=(0 0 0 1 1 0 1 1)box1=(0 2 1 2 2 2 3 2 1 0 1 1 1 2 1 3)box2=(0 0 0 1 1 1 1 2 0 1 1 0 1 1 2 0)box3=(0 1 0 2 1 0 1 1 0 0 1 0 1 1 2 1)box4=(0 1 0 2 1 1 2 1 1 0 1 1 1 2 2 2 0 1 1 1 2 0 2 1 0 0 1 0 1 1 1 2)box5=(0 1 1 1 2 1 2 2 1 0 1 1 1 2 2 0 0 0 0 1 1 1 2 1 0 2 1 0 1 1 1 2)box6=(0 1 1 1 1 2 2 1 1 0 1 1 1 2 2 1 0 1 1 0 1 1 2 1 0 1 1 0 1 1 1 2)#所有其中方块的定义都放到box变量中box=($&#123;box0[@]&#125; $&#123;box1[@]&#125; $&#123;box2[@]&#125; $&#123;box3[@]&#125; $&#123;box4[@]&#125; $&#123;box5[@]&#125; $&#123;box6[@]&#125;)#各种方块旋转后可能的样式数目countBox=(1 2 2 2 4 4 4)#各种方块再box数组中的偏移offsetBox=(0 1 3 5 7 11 15) #每提高一个速度级需要积累的分数iScoreEachLevel=50 #be greater than 7 #运行时数据sig=0 #接收到的signaliScore=0 #总分iLevel=0 #速度级boxNew=() #新下落的方块的位置定义cBoxNew=0 #新下落的方块的颜色iBoxNewType=0 #新下落的方块的种类iBoxNewRotate=0 #新下落的方块的旋转角度boxCur=() #当前方块的位置定义cBoxCur=0 #当前方块的颜色iBoxCurType=0 #当前方块的种类iBoxCurRotate=0 #当前方块的旋转角度boxCurX=-1 #当前方块的x坐标位置boxCurY=-1 #当前方块的y坐标位置iMap=() #背景方块图表 #初始化所有背景方块为-1, 表示没有方块for ((i = 0; i &lt; iTrayHeight * iTrayWidth; i++)); do iMap[$i]=-1; done #接收输入的进程的主函数function RunAsKeyReceiver()&#123; local pidDisplayer key aKey sig cESC sTTY pidDisplayer=$1 aKey=(0 0 0) cESC=`echo -ne &quot;\033&quot;` cSpace=`echo -ne &quot;\040&quot;` #保存终端属性。在read -s读取终端键时，终端的属性会被暂时改变。 #如果在read -s时程序被不幸杀掉，可能会导致终端混乱， #需要在程序退出时恢复终端属性。 sTTY=`stty -g` #捕捉退出信号 trap &quot;MyExit;&quot; INT TERM trap &quot;MyExitNoSub;&quot; $sigExit #隐藏光标 echo -ne &quot;\033[?25l&quot; while : do #读取输入。注-s不回显，-n读到一个字符立即返回 read -s -n 1 key aKey[0]=$&#123;aKey[1]&#125; aKey[1]=$&#123;aKey[2]&#125; aKey[2]=$key sig=0 #判断输入了何种键 if [[ $key == $cESC &amp;&amp; $&#123;aKey[1]&#125; == $cESC ]] then #ESC键 MyExit elif [[ $&#123;aKey[0]&#125; == $cESC &amp;&amp; $&#123;aKey[1]&#125; == &quot;[&quot; ]] then if [[ $key == &quot;A&quot; ]]; then sig=$sigRotate #&lt;向上键&gt; elif [[ $key == &quot;B&quot; ]]; then sig=$sigDown #&lt;向下键&gt; elif [[ $key == &quot;D&quot; ]]; then sig=$sigLeft #&lt;向左键&gt; elif [[ $key == &quot;C&quot; ]]; then sig=$sigRight #&lt;向右键&gt; fi elif [[ $key == &quot;W&quot; || $key == &quot;w&quot; ]]; then sig=$sigRotate #W, w elif [[ $key == &quot;S&quot; || $key == &quot;s&quot; ]]; then sig=$sigDown #S, s elif [[ $key == &quot;A&quot; || $key == &quot;a&quot; ]]; then sig=$sigLeft #A, a elif [[ $key == &quot;D&quot; || $key == &quot;d&quot; ]]; then sig=$sigRight #D, d elif [[ &quot;[$key]&quot; == &quot;[]&quot; ]]; then sig=$sigAllDown #空格键 elif [[ $key == &quot;Q&quot; || $key == &quot;q&quot; ]] #Q, q then MyExit fi if [[ $sig != 0 ]] then #向另一进程发送消息 kill -$sig $pidDisplayer fi done&#125; #退出前的恢复function MyExitNoSub()&#123; local y #恢复终端属性 stty $sTTY ((y = iTop + iTrayHeight + 4)) #显示光标 echo -e &quot;\033[?25h\033[$&#123;y&#125;;0H&quot; exit&#125; function MyExit()&#123; #通知显示进程需要退出 kill -$sigExit $pidDisplayer MyExitNoSub&#125; #处理显示和游戏流程的主函数function RunAsDisplayer()&#123; local sigThis InitDraw #挂载各种信号的处理函数 trap &quot;sig=$sigRotate;&quot; $sigRotate trap &quot;sig=$sigLeft;&quot; $sigLeft trap &quot;sig=$sigRight;&quot; $sigRight trap &quot;sig=$sigDown;&quot; $sigDown trap &quot;sig=$sigAllDown;&quot; $sigAllDown trap &quot;ShowExit;&quot; $sigExit while : do #根据当前的速度级iLevel不同，设定相应的循环的次数 for ((i = 0; i &lt; 21 - iLevel; i++)) do sleep 0.02 sigThis=$sig sig=0 #根据sig变量判断是否接受到相应的信号 if ((sigThis == sigRotate)); then BoxRotate; #旋转 elif ((sigThis == sigLeft)); then BoxLeft; #左移一列 elif ((sigThis == sigRight)); then BoxRight; #右移一列 elif ((sigThis == sigDown)); then BoxDown; #下落一行 elif ((sigThis == sigAllDown)); then BoxAllDown; #下落到底 fi done #kill -$sigDown $$ BoxDown #下落一行 done&#125; #BoxMove(y, x), 测试是否可以把移动中的方块移到(x, y)的位置, 返回0则可以, 1不可以function BoxMove()&#123; local j i x y xTest yTest yTest=$1 xTest=$2 for ((j = 0; j &lt; 8; j += 2)) do ((i = j + 1)) ((y = $&#123;boxCur[$j]&#125; + yTest)) ((x = $&#123;boxCur[$i]&#125; + xTest)) if (( y &lt; 0 || y &gt;= iTrayHeight || x &lt; 0 || x &gt;= iTrayWidth)) then #撞到墙壁了 return 1 fi if (($&#123;iMap[y * iTrayWidth + x]&#125; != -1 )) then #撞到其他已经存在的方块了 return 1 fi done return 0;&#125; #将当前移动中的方块放到背景方块中去,#并计算新的分数和速度级。(即一次方块落到底部)function Box2Map()&#123; local j i x y xp yp line #将当前移动中的方块放到背景方块中去 for ((j = 0; j &lt; 8; j += 2)) do ((i = j + 1)) ((y = $&#123;boxCur[$j]&#125; + boxCurY)) ((x = $&#123;boxCur[$i]&#125; + boxCurX)) ((i = y * iTrayWidth + x)) iMap[$i]=$cBoxCur done #消去可被消去的行 line=0 for ((j = 0; j &lt; iTrayWidth * iTrayHeight; j += iTrayWidth)) do for ((i = j + iTrayWidth - 1; i &gt;= j; i--)) do if (($&#123;iMap[$i]&#125; == -1)); then break; fi done if ((i &gt;= j)); then continue; fi ((line++)) for ((i = j - 1; i &gt;= 0; i--)) do ((x = i + iTrayWidth)) iMap[$x]=$&#123;iMap[$i]&#125; done for ((i = 0; i &lt; iTrayWidth; i++)) do iMap[$i]=-1 done done if ((line == 0)); then return; fi #根据消去的行数line计算分数和速度级 ((x = iLeft + iTrayWidth * 2 + 7)) ((y = iTop + 11)) ((iScore += line * 2 - 1)) #显示新的分数 echo -ne &quot;\033[1m\033[3$&#123;cScoreValue&#125;m\033[$&#123;y&#125;;$&#123;x&#125;H$&#123;iScore&#125; &quot; if ((iScore % iScoreEachLevel &lt; line * 2 - 1)) then if ((iLevel &lt; 20)) then ((iLevel++)) ((y = iTop + 14)) #显示新的速度级 echo -ne &quot;\033[3$&#123;cScoreValue&#125;m\033[$&#123;y&#125;;$&#123;x&#125;H$&#123;iLevel&#125; &quot; fi fi echo -ne &quot;\033[0m&quot; #重新显示背景方块 for ((y = 0; y &lt; iTrayHeight; y++)) do ((yp = y + iTrayTop + 1)) ((xp = iTrayLeft + 1)) ((i = y * iTrayWidth)) echo -ne &quot;\033[$&#123;yp&#125;;$&#123;xp&#125;H&quot; for ((x = 0; x &lt; iTrayWidth; x++)) do ((j = i + x)) if (($&#123;iMap[$j]&#125; == -1)) then echo -ne &quot; &quot; else echo -ne &quot;\033[1m\033[7m\033[3$&#123;iMap[$j]&#125;m\033[4$&#123;iMap[$j]&#125;m[]\033[0m&quot; fi done done&#125; #下落一行function BoxDown()&#123; local y s ((y = boxCurY + 1)) #新的y坐标 if BoxMove $y $boxCurX #测试是否可以下落一行 then s=&quot;`DrawCurBox 0`&quot; #将旧的方块抹去 ((boxCurY = y)) s=&quot;$s`DrawCurBox 1`&quot; #显示新的下落后方块 echo -ne $s else #走到这儿, 如果不能下落了 Box2Map #将当前移动中的方块贴到背景方块中 RandomBox #产生新的方块 fi&#125; #左移一列function BoxLeft()&#123; local x s ((x = boxCurX - 1)) if BoxMove $boxCurY $x then s=`DrawCurBox 0` ((boxCurX = x)) s=$s`DrawCurBox 1` echo -ne $s fi&#125; #右移一列function BoxRight()&#123; local x s ((x = boxCurX + 1)) if BoxMove $boxCurY $x then s=`DrawCurBox 0` ((boxCurX = x)) s=$s`DrawCurBox 1` echo -ne $s fi&#125; #下落到底function BoxAllDown()&#123; local k j i x y iDown s iDown=$iTrayHeight #计算一共需要下落多少行 for ((j = 0; j &lt; 8; j += 2)) do ((i = j + 1)) ((y = $&#123;boxCur[$j]&#125; + boxCurY)) ((x = $&#123;boxCur[$i]&#125; + boxCurX)) for ((k = y + 1; k &lt; iTrayHeight; k++)) do ((i = k * iTrayWidth + x)) if (( $&#123;iMap[$i]&#125; != -1)); then break; fi done ((k -= y + 1)) if (( $iDown &gt; $k )); then iDown=$k; fi done s=`DrawCurBox 0` #将旧的方块抹去 ((boxCurY += iDown)) s=$s`DrawCurBox 1` #显示新的下落后的方块 echo -ne $s Box2Map #将当前移动中的方块贴到背景方块中 RandomBox #产生新的方块&#125; #旋转方块function BoxRotate()&#123; local iCount iTestRotate boxTest j i s iCount=$&#123;countBox[$iBoxCurType]&#125; #当前的方块经旋转可以产生的样式的数目 #计算旋转后的新的样式 ((iTestRotate = iBoxCurRotate + 1)) if ((iTestRotate &gt;= iCount)) then ((iTestRotate = 0)) fi #更新到新的样式, 保存老的样式(但不显示) for ((j = 0, i = ($&#123;offsetBox[$iBoxCurType]&#125; + $iTestRotate) * 8; j &lt; 8; j++, i++)) do boxTest[$j]=$&#123;boxCur[$j]&#125; boxCur[$j]=$&#123;box[$i]&#125; done if BoxMove $boxCurY $boxCurX #测试旋转后是否有空间放的下 then #抹去旧的方块 for ((j = 0; j &lt; 8; j++)) do boxCur[$j]=$&#123;boxTest[$j]&#125; done s=`DrawCurBox 0` #画上新的方块 for ((j = 0, i = ($&#123;offsetBox[$iBoxCurType]&#125; + $iTestRotate) * 8; j &lt; 8; j++, i++)) do boxCur[$j]=$&#123;box[$i]&#125; done s=$s`DrawCurBox 1` echo -ne $s iBoxCurRotate=$iTestRotate else #不能旋转，还是继续使用老的样式 for ((j = 0; j &lt; 8; j++)) do boxCur[$j]=$&#123;boxTest[$j]&#125; done fi&#125; #DrawCurBox(bDraw), 绘制当前移动中的方块, bDraw为1, 画上, bDraw为0, 抹去方块。function DrawCurBox()&#123; local i j t bDraw sBox s bDraw=$1 s=&quot;&quot; if (( bDraw == 0 )) then sBox=&quot;\040\040&quot; else sBox=&quot;[]&quot; s=$s&quot;\033[1m\033[7m\033[3$&#123;cBoxCur&#125;m\033[4$&#123;cBoxCur&#125;m&quot; fi for ((j = 0; j &lt; 8; j += 2)) do ((i = iTrayTop + 1 + $&#123;boxCur[$j]&#125; + boxCurY)) ((t = iTrayLeft + 1 + 2 * (boxCurX + $&#123;boxCur[$j + 1]&#125;))) #\033[y;xH, 光标到(x, y)处 s=$s&quot;\033[$&#123;i&#125;;$&#123;t&#125;H$&#123;sBox&#125;&quot; done s=$s&quot;\033[0m&quot; echo -n $s&#125; #更新新的方块function RandomBox()&#123; local i j t #更新当前移动的方块 iBoxCurType=$&#123;iBoxNewType&#125; iBoxCurRotate=$&#123;iBoxNewRotate&#125; cBoxCur=$&#123;cBoxNew&#125; for ((j = 0; j &lt; $&#123;#boxNew[@]&#125;; j++)) do boxCur[$j]=$&#123;boxNew[$j]&#125; done #显示当前移动的方块 if (( $&#123;#boxCur[@]&#125; == 8 )) then #计算当前方块该从顶端哪一行&quot;冒&quot;出来 for ((j = 0, t = 4; j &lt; 8; j += 2)) do if (($&#123;boxCur[$j]&#125; &lt; t)); then t=$&#123;boxCur[$j]&#125;; fi done ((boxCurY = -t)) for ((j = 1, i = -4, t = 20; j &lt; 8; j += 2)) do if (($&#123;boxCur[$j]&#125; &gt; i)); then i=$&#123;boxCur[$j]&#125;; fi if (($&#123;boxCur[$j]&#125; &lt; t)); then t=$&#123;boxCur[$j]&#125;; fi done ((boxCurX = (iTrayWidth - 1 - i - t) / 2)) #显示当前移动的方块 echo -ne `DrawCurBox 1` #如果方块一出来就没处放，Game over! if ! BoxMove $boxCurY $boxCurX then kill -$sigExit $&#123;PPID&#125; ShowExit fi fi #清除右边预显示的方块 for ((j = 0; j &lt; 4; j++)) do ((i = iTop + 1 + j)) ((t = iLeft + 2 * iTrayWidth + 7)) echo -ne &quot;\033[$&#123;i&#125;;$&#123;t&#125;H &quot; done #随机产生新的方块 ((iBoxNewType = RANDOM % $&#123;#offsetBox[@]&#125;)) ((iBoxNewRotate = RANDOM % $&#123;countBox[$iBoxNewType]&#125;)) for ((j = 0, i = ($&#123;offsetBox[$iBoxNewType]&#125; + $iBoxNewRotate) * 8; j &lt; 8; j++, i++)) do boxNew[$j]=$&#123;box[$i]&#125;; done ((cBoxNew = $&#123;colorTable[RANDOM % $&#123;#colorTable[@]&#125;]&#125;)) #显示右边预显示的方块 echo -ne &quot;\033[1m\033[7m\033[3$&#123;cBoxNew&#125;m\033[4$&#123;cBoxNew&#125;m&quot; for ((j = 0; j &lt; 8; j += 2)) do ((i = iTop + 1 + $&#123;boxNew[$j]&#125;)) ((t = iLeft + 2 * iTrayWidth + 7 + 2 * $&#123;boxNew[$j + 1]&#125;)) echo -ne &quot;\033[$&#123;i&#125;;$&#123;t&#125;H[]&quot; done echo -ne &quot;\033[0m&quot;&#125; #初始绘制function InitDraw()&#123; clear RandomBox #随机产生方块，这时右边预显示窗口中有方快了 RandomBox #再随机产生方块，右边预显示窗口中的方块被更新，原先的方块将开始下落 local i t1 t2 t3 #显示边框 echo -ne &quot;\033[1m&quot; echo -ne &quot;\033[3$&#123;cBorder&#125;m\033[4$&#123;cBorder&#125;m&quot; ((t2 = iLeft + 1)) ((t3 = iLeft + iTrayWidth * 2 + 3)) for ((i = 0; i &lt; iTrayHeight; i++)) do ((t1 = i + iTop + 2)) echo -ne &quot;\033[$&#123;t1&#125;;$&#123;t2&#125;H||&quot; echo -ne &quot;\033[$&#123;t1&#125;;$&#123;t3&#125;H||&quot; done ((t2 = iTop + iTrayHeight + 2)) for ((i = 0; i &lt; iTrayWidth + 2; i++)) do ((t1 = i * 2 + iLeft + 1)) echo -ne &quot;\033[$&#123;iTrayTop&#125;;$&#123;t1&#125;H==&quot; echo -ne &quot;\033[$&#123;t2&#125;;$&#123;t1&#125;H==&quot; done echo -ne &quot;\033[0m&quot; #显示&quot;Score&quot;和&quot;Level&quot;字样 echo -ne &quot;\033[1m&quot; ((t1 = iLeft + iTrayWidth * 2 + 7)) ((t2 = iTop + 10)) echo -ne &quot;\033[3$&#123;cScore&#125;m\033[$&#123;t2&#125;;$&#123;t1&#125;HScore&quot; ((t2 = iTop + 11)) echo -ne &quot;\033[3$&#123;cScoreValue&#125;m\033[$&#123;t2&#125;;$&#123;t1&#125;H$&#123;iScore&#125;&quot; ((t2 = iTop + 13)) echo -ne &quot;\033[3$&#123;cScore&#125;m\033[$&#123;t2&#125;;$&#123;t1&#125;HLevel&quot; ((t2 = iTop + 14)) echo -ne &quot;\033[3$&#123;cScoreValue&#125;m\033[$&#123;t2&#125;;$&#123;t1&#125;H$&#123;iLevel&#125;&quot; echo -ne &quot;\033[0m&quot;&#125; #退出时显示GameOVer!function ShowExit()&#123; local y ((y = iTrayHeight + iTrayTop + 3)) echo -e &quot;\033[$&#123;y&#125;;0HGameOver!\033[0m&quot; exit&#125; #显示用法.function Usage&#123; cat &lt;&lt; EOFUsage: $APP_NAMEStart tetris game. -h, --help display this help and exit --version output version information and exitEOF&#125; #游戏主程序在这儿开始.if [[ &quot;$1&quot; == &quot;-h&quot; || &quot;$1&quot; == &quot;--help&quot; ]]; then Usageelif [[ &quot;$1&quot; == &quot;--version&quot; ]]; then echo &quot;$APP_NAME $APP_VERSION&quot;elif [[ &quot;$1&quot; == &quot;--show&quot; ]]; then #当发现具有参数--show时，运行显示函数 RunAsDisplayerelse bash $0 --show&amp; #以参数--show将本程序再运行一遍 RunAsKeyReceiver $! #以上一行产生的进程的进程号作为参数fi]]></content>
      <categories>
        <category>Interesting</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH隧道实现Yum等代理]]></title>
    <url>%2Farlo%2Ff49b27ae%2F</url>
    <content type="text"><![CDATA[背景Linux服务器环境中有部分服务器不能上网，使用yum安装软件极为不便；解决方案可以搭建一个本地代理服务器，在不能联通外网的服务器上将1080端口跳转到另外一台可以上外网的22端口上，实现ssh跳转，设置yum代理，实现软件安装注意事项 需要一台可以连接公网的服务器A（192.168.6.123） 需要安装软件的服务器B（192.168.6.141）可以连接上A（192.168.6.123） 服务器B（192.168.6.141）上需要安装privoxy 和git 基础软件 所有操作在服务器B（192.168.6.141）上完成 在centos 6 上，yum只能使用 http, https, ftp 协议的代理。 但在 centos 7上 yum 可以使用 socks5 的代理。 建立SSH隧道12ssh -p 22 -gfND 1080 root@192.168.6.123ss -tlnup |grep 1080 安装配置privoxy12345yum -y install privoxyvim /etc/privoxy/configforward-socks5 / 127.0.0.1:1080 .#如果允许其他机器访问，需要修改listen-addresslisten-address 0.0.0.0:8118 启动privoxy服务12systemctl start privoxysystemctl enable privoxy 为YUM配置代理123456#centos7配置方法[main]proxy=socks5h://localhost:1080#centos6配置方法[main]proxy=http://localhost:8118 扩展、配置其他代理为CURL配置代理123vim ~/.curlc# socks5h 中的 h 意为远程主机名解析socks5 = &quot;socks5h://127.0.0.1:1080&quot; 为wget配置代理123456vim /etc/wgetrchttp_proxy = http://localhost:8118https_proxy = http://localhost:8118ftp_proxy = http://localhost:8118use_proxy = onwait = 15 为pip配置代理12345mkdir ~/.pipvim ~/.pip/pip.conf[global]proxy = 127.0.0.1:8118trusted-host = mirrors.aliyun.com 为git设置http https 代理123456789#设置git config --global https.proxy &apos;socks5h://127.0.0.1:1080&apos;git config --global http.proxy &apos;socks5h://127.0.0.1:1080&apos;#查看git config --global --get http.proxygit config --global --get https.proxy#取消git config --global --unset http.proxygit config --global --unset https.proxy]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[expdp/impdp数据泵工具运用]]></title>
    <url>%2Farlo%2F2148c304%2F</url>
    <content type="text"><![CDATA[Oracle数据库常用的备份方式有，exp/imp, expdp/impdp和rman；RMAN备份内容包括:整个数据库,表空间,数据文件,指定的数据文件,控制文件,归档日志文件,参数文件等，打开归档日志后，可以做到不丢失数据，后期再详细分析研究。使用expdp和impdp时应该注重的事项：1、exp和imp是客户端工具程序，它们既可以在客户端使用，也可以在服务端使用。2、expdp和impdp是服务端的工具程序，他们只能在oracle服务端使用，不能在客户端使用。3、imp只适用于exp导出的文件，不适用于expdp导出文件；impdp只适用于expdp导出的文件，而不适用于exp导出文件。4、对于10g以上的服务器，使用exp通常不能导出0行数据的空表，而此时必须使用expdp导出。 查询备份和恢复数据库的数据库信息尽量保证数据库的版本和字符集等信息一致，否则会有很多坑。 查看数据库的版本1select * from v$version; 查看数据库编码1SELECT * FROM V$NLS_PARAMETERS WHERE PARAMETER IN (&apos;NLS_CHARACTERSET&apos;, &apos;NLS_NCHAR_CHARACTERSET&apos;); 查看管理员目录12sqlplus / as sysdbaSQL&gt; select * from dba_directories; 创建管理员目录并授权12SQL&gt; create directory dump_dir as &apos;/opt/db_backup&apos;; #可以使用默认的目录，也可以自己新建目录SQL&gt; grant read,write on directory dump_dir to scott; 使用expdp导出数据1234567891011121)导出用户expdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_direxpdp userid=&quot;&apos;sys/passwd@orcl as sysdba&apos;&quot; schemas=scott dumpfile=scott.dmp directory=DATA_PUMP_DIR #使用sys用户导出写法2)导出表expdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir3)按查询条件导expdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=emp query=&apos;where deptno=20&apos;4)按表空间导expdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=temp,example5)导整个数据库expdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;expdp userid=&quot;&apos;sys/passwd@orcl as sysdba&apos;&quot; full=y directory=DATA_PUMP_DIR dumpfile=full.dmp #使用sys用户导出写法 用impdp导入数据1234567891011121)导入用户（从用户scott导入到用户scott）impdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scottimpdp userid=&quot;&apos;sys/passwd@orcl as sysdba&apos;&quot; schemas=scott dumpfile=scott.dmp directory=DATA_PUMP_DIR #使用sys用户导出写法2)导入表（从scott用户中把表dept和emp导入到system用户中）impdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp tables=scott.dept,scott.emp remap_schema=scott:system3)导入表空间impdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=example4)导入数据impdb system/manager@orcl directory=dump_dir dumpfile=full.dmp full=yimpdp userid=&quot;&apos;sys/passwd@orcl as sysdba&apos;&quot; full=y directory=DATA_PUMP_DIR dumpfile=full.dmp5)追加数据impdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=system table_exists_action expdp的compression参数选项（压缩） COMPRESSION=[ALL | DATA_ONLY | METADATA_ONLY | NONE] Oracle 11g中新增了几种压缩方法。12345ALL: 对导出的元数据和表数据都进行压缩，得到的导出文件是最小的，耗时也是最长的。（据说压缩比可以达到 1/7）DATA_ONLY: 仅对表数据进行压缩，对于大数据量的导出效果明显，会比METADATA_ONLY方式得到更小的压缩文件。METADATA_ONLY: 仅对元数据进行压缩，而不会对表数据进行压缩，这种压缩执行后效果一般不是很明显，不过速度比较快。NONE: 不进行任何的压缩，导出后的文件也是最大的。DEFAULT: 默认方式，即不指定COMPRESSION参数，会采用默认的压缩方式METADATA_ONLY。 impdp的TABLE_EXISTS_ACTION参数选项默认值是skip，但若设置了CONTENT=DATA_ONLY，则默认值是APPEND，不是SKIP。 TABLE_EXISTS_ACTION=[SKIP | APPEND | TRUNCATE | REPLACE] 1234SKIP：跳过这张表，继续下一个对象。如果CONTENT设置了DATA_ONLY参数，则不能使用SKIP。APPEND：会加载数据至对象，但不会影响已存在的行。TRUNCATE：删除已存在的行，然后加载所有的数据。REPLACE：drop已存在的表，然后create并加载数据。如果CONTENT设置了DATA_ONLY，则不能使用REPLACE。 导入过程中，常用查询语句查询表空间使用量，如果不够，可以添加文件12SELECT FILE_NAME, TABLESPACE_NAME, BYTES / 1024 / 1024 &quot;bytes MB&quot;,MAXBYTES / 1024 / 1024 &quot;maxbytes MB&quot; FROM DBA_DATA_FILES WHERE TABLESPACE_NAME = &apos;USERS&apos;;ALTER TABLESPACE USERS ADD DATAFILE &apos;/u01/app/oracle/oradata/sjzdb/users02.dbf&apos; SIZE 5M AUTOEXTEND ON MAXSIZE 32767M; 查看SCHEMAS占用的表空间大小1SELECT OWNER, SUM(BYTES) / 1024 / 1024 / 1024 SCHEMA_SIZE_GIG FROM SYS.DBA_SEGMENTS GROUP BY OWNER; 查询schemas下的所有表1SELECT TABLE_NAME FROM SYS.DBA_TABLES WHERE OWNER = &apos;AIR_FORECAST&apos;; 参考链接：http://blog.sina.com.cn/s/blog_67d41beb0100ixnb.htmlhttps://blog.csdn.net/bisal/article/details/51482968http://www.htz.pw/2015/05/20/expdp的compression测试.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[等保三级安全要求之开源软件实现]]></title>
    <url>%2Farlo%2F764ae16c%2F</url>
    <content type="text"><![CDATA[等级划分 《信息安全等级保护管理办法》规定，国家信息安全等级保护坚持自主定级、自主保护的原则。信息系统的安全保护等级应当根据信息系统在国家安全、经济建设、社会生活中的重要程度，信息系统遭到破坏后对国家安全、社会秩序、公共利益以及公民、法人和其他组织的合法权益的危害程度等因素确定。信息系统的安全保护等级分为以下五级：第一级，信息系统受到破坏后，会对公民、法人和其他组织的合法权益造成损害，但不损害国家安全、社会秩序和公共利益。第一级信息系统运营、使用单位应当依据国家有关管理规范和技术标准进行保护。第二级，信息系统受到破坏后，会对公民、法人和其他组织的合法权益产生严重损害，或者对社会秩序和公共利益造成损害，但不损害国家安全。国家信息安全监管部门对该级信息系统安全等级保护工作进行指导。第三级，信息系统受到破坏后，会对社会秩序和公共利益造成严重损害，或者对国家安全造成损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行监督、检查。第四级，信息系统受到破坏后，会对社会秩序和公共利益造成特别严重损害，或者对国家安全造成严重损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行强制监督、检查。第五级，信息系统受到破坏后，会对国家安全造成特别严重损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行专门监督、检查。 本文目的主要是调研等保三级的硬件可以使用哪些软件来替换（有些有硬性要求另说），整理一版放在这里，以后的项目中如果有使用到，就不用在一一查找了。 安全管理中心系统OSSIMOSSIM即开源安全信息管理系统(OPEN SOURCE SECURITY INFORMATION MANAGEMENT)，是一个非常流行和完整的开源安全架构体系。OSSIM通过将开源产品进行集成，从而提供一种能够实现安全监控功能的基础平台。 它的目的是提供一种集中式、有组织的、能够更好地进行监测和显示的框架式系统。OSSIM由数据收集、监视、检测、审计以及控制台这五个模块构成。这5个模块包含了目前安全领域从事件预防到事件处理一个完整的过程，在目前的安全架构 中，OSSIM是最为完备的。这五个功能模块又被划分为三个层次，分别是高层的安全信息显示控制面板、中层的风险和活动监控以及底层的证据控制台和网络监控，各个层次提供不同功能，共同保证系统的安全运转。 开源堡垒机/运维审计系统JumpserverJumpserver是全球首款完全开源的堡垒机，使用 GNU GPL v2.0 开源协议，是符合 4A 的专业运维审计系统。支持支持RDP和SSH协议的跳转,支持命令，会话记录，支持资产管理，日志审计； GateOneGateone是一个基于tornado和html5技术的开源web ssh项目，功能很强大， 支持多个账户多个终端窗口连接远程机器， 支持多种认证登陆方式， 支持嵌入到各种web应用，支持多种插件等等。暂不支持windows TeleportTeleport是触维软件推出的一款简单易用的堡垒机系统，具有小巧、易用、易于集成的特点，支持RDP和SSH协议的跳转。 麒麟开源堡垒机麒麟堡垒机全协议支持、网管功能、3A系统功能、动态口令功能、SSL VPN功能、CA证书功能，支持RDP和SSH协议的跳转。 开源入侵检测系统(IDS/IPS)SnortSnort是最好的入侵检测系统（IDS）工具。它所需要的是一些在上面运行的硬件以及安装、配置和维护的时间。Snort可以在任何操作系统上运行，包括Windows和Linux。Snort 一直都是网络入侵检测（IDS）和入侵防御工具（IPS）的领导者，并且，随着开源社区的持续发展，为其母公司Sourcefire（多年 来，Sourcefire提供有供应商支持和即时更新的功能齐全的商业版本Snort，同时仍然免费提供功能有限的免费版本Snort）持续不断的支 持，Snort很可能会继续保持其领导地位。虽然Snort“称霸”这个市场，但也有其他供应商提供类似的免费工具。很多这些入侵检测系统（IDS）供应商（即使不是大多数）结合Snort或其他开源软件的引擎来创建强大的免费入侵检测服务。 Security OnionSecurity Onion是用于网络监控和入侵检测的基于Ubuntu的Linux发行版。该镜像可以作为传感器分布在网络中，以监控多个VLAN和子网，这很适用于 VMware和虚拟环境。该配置只能用作IDS，目前不能当作IPS运行。然而，你可以选择把它作为网络和主机入侵检测部署，以及利用Squil、Bro IDS和OSSEC等服务来执行该服务的IDS功能。该工具的wiki信息和文档信息很丰富，漏洞和错误也有记录和审查。虽然Security Onion很强大，但它仍然需要不断发展，当然这需要时间。 OSSECOSSEC是一个开源主机入侵检测系统（HIDS），它的功能不只是入侵检测。与大多数开源IDS产品一样，有多种附加模块可以结合该 IDS的核心功能。除了网络入侵检测外，OSSEC客户端能够执行文件完整性监控和rootkit检测，并有实时报警，这些功能都是集中管理，并能根据企 业的需求创建不同政策。OSSEC客户端在大多数操作系统上本地运行，包括Linux各版本、Mac OSX和Windows。它还通过趋势科技的全球支持团队提供商业支持，这是一个非常成熟的产品。 OpenWIPS-NGOpenWIPS-NG是一个免费的无线IDS / IPS，它依赖于服务器、传感器和接口。它可以在普通硬件上运行。其创建者是Aircrack-NG的开发者，该系统使用Aircrack-NG内置的很 多功能和服务来进行扫描、检测和入侵防御。OpenWIPS-NG是模块化的，允许管理员下载插件来增加功能。其文件并不像某些系统一样详细，但它允许公司在预算紧张的情况下执行WIPS。 Suricata在所有目前可用的IDS/IPS系统中，Suricata最能够与Snort相抗衡。该系统有一个类似Snort的架构，依赖于像 Snort等的签名，甚至可以使用VRT Snort规则和Snort本身使用的相同的Emerging Threat规则集。Suricata比Snort更新，它将有机会赶超Snort。如果Snort不是你企业的选择，这个免费的工具最适合运行在你的企 业网络中。 Bro IDSBro IDS类似于Security Onion，它使用更多IDS规则来确定攻击来源。Bro IDS使用工具组合，曾经它使用基于Snort的签名转换成Bro签名，不过现在不再是如此，现在用户能够为Bro IDS编写自定义签名。该系统有很多详细文档信息，并已有超过15年的历史。 Prelude IDS从设计的方式来看定位于适应大型网络的需求， 实现了网络探测器、日志分析器、告警信息集中查看分析工具。其网络探测器部分基本上翻版了Snort的功能，完全兼容Snort的规则集。 Firestorm是一个非常高性能的网络入侵检测系统(NIDS)。目前它仅实现了探测器部分，完全兼容Snort的规则集，但计划包括对分析、报告、远程控制台和实时传感器配置的真正支持。它完全可插拔，因此非常灵活，，可以把告警信息记录到Prelude IDS的管理器， 自称性能上比Snort强很多。 NetSTAT基于STAT(State Transition Analysis Technique，状态迁移分析技术)描述攻击的研究成果，使用特有的STATL语言描述攻击，攻击描述文本被STATL解释工具转换为C++代码编译进检测引擎来实现检测功能，目前已经发布了STATL语言解释转换工具及一个基本的示例网络探测器部分(很少的几个检测功能例子)。要熟练使用这个IDS工具需要比较强的编程功底，但用此IDS可以实现很复杂的检测功能。 Bro是一个Vern Paxson实现的实时网络入侵检测软件，于98年对外发布，BSD license，它的最初设计目标是实现一个在100M网络下实时告警、机制与策略分离、高可扩展性的入侵检测及网络监视审计系统。 开源的web应用防火墙Web应用防火墙提供应用层的安全。从本质上讲，WAF提供全面的web应用安全解决方案，确保数据和Web应用程序是安全的。Web应用防火墙，适用于跨站点脚本，SQL注入等，可以为Web应用程序提供安全的Web应用程序框架。Web应用防火墙允许您配置规则，通过识别阻止恶意内容。下面给出了10个最流行和广泛使用的开源的Web应用防火墙： ModSecurity的（Trustwave公司SpiderLabs）ModSecurity是一个最古老的和广泛使用的开放源码的Web应用程序防火墙能够检测应用层威胁在互联网上，并针对一系列Web应用程序的安全问题提供了安全保障。它提供非病毒的开放来源执照，它可以集成到Apache程序。近日，ModSecurity的发布2.6.0版提供的功能安全浏览API集成，敏感数据的跟踪和数据修改功能。 AQTRONIX WebKnightAQTRONIX WebKnight是一个开源应用程序专为Web服务器和IIS防火墙，它是通过GNU - 通用公共许可证授权。它提供了缓冲区溢出，目录遍历编码和SQL注入攻击识别/限制功能。 ESAPI WAFESAPI WAF是Aspect安全开发的，它被设计为提供保护，而不是在应用层网络层。它是基于Java的WAF提供完整的安全性，从网上攻击。一些解决方案的独特功能包括出站过滤功能，降低信息泄漏。配置驱动的，而不是代码的基础，它使安装方便，只需添加在文本文件中的配置细节。 WebCastellumWebCastellum是一个基于Java的Web应用防火墙，可以保护应用程序对跨站脚本，SQL注入，命令注入，参数操纵，它可以轻松地集成到一个基于Java的应用程序。它是基于新技术和提供保护，它可以使用现有的代码。 BinarysecBinarysec为Apache是​​Web应用程序防火墙软件，它可以保护应用程序免受非法HTTP和阻止可疑的请求以及。它提供保护，防止跨站点脚本，赞扬注射，参数篡改，缓冲区溢出，目录遍历，SQL注入攻击阻塞。这需要不超过10分钟来安装软件，在一台机器上，其用户界面可以管理Apache服务器和许多网站。 Guardian@JUMPERZ.NETGuardian@JUMPERZ.NET HTTPS / HTTP是一个开源应用层防火墙，HTTP / HTTPS流量评估保护Web应用程序免受外部攻击。Guardian@JUMPERZ.NET立即断开TCP连接，当应用程序来接触与恶意/未经授权的请求。 OpenWAFArt of defense是一个总部设在旧金山的Web应用程序的安全性提供者上开源OpenWAF的2011年2月启动了一个项目。这也是第一家提供Apache服务器的分布式Web应用防火墙。 IronbeeQualys公司创建基于云的开源Web应用程序防火墙 - Ironbee代替了传统的IP数据包检查的HTTP评估数据。它甚至可以跟踪跨站点脚本代码的攻击。Ironbee出版通过Apache许可证版本2，它提供无版权转让。它具有模块化结构，是相当容易使用。 ProfenseZION安全提供了一个开放源码的Web应用防火墙类似ModSecurity的，被称为Profense。Zion所提供的Web应用防火墙本质上是一个7层防火墙（也被称为“代理防火墙”），并检查交通封锁内容。 SmoothwallSmoothwall提供了强大的网络安全工具来管理电子邮件。开放源码的网页过滤引擎被称为Smoothwall DansGuardian的。它具有灵活的用户规则和一个完全集成的网页过滤和安全组件。更重要的是，它提供了身份验证的网络访问和 traffic blocking。Smoothwall免费防火墙安全加固Linux的GNU操作系统。 X-WAFX-WAF是一款适用中、小企业的云WAF系统，让中、小企业也可以非常方便地拥有自己的免费云WAF。 负载均衡Nginx工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构，它的正则规则比HAProxy更为强大和灵活，这也是它目前广泛流行的主要原因之一，Nginx单凭这点可利用的场合就远多于LVS了。 HAProxyHAProxy 是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。 HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在时下的硬件上，完全可以支持数以万计的 并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。 LVSLVS 使用Linux内核集群实现一个高性能、高可用的负载均衡服务器，它具有很好的可伸缩性（Scalability)、可靠性（Reliability)和可管理性（Manageability)。抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低。 病毒过滤ClamaVClamAV 杀毒是Linux平台最受欢迎的杀毒软件，ClamAV属于免费开源产品，支持多种平台，如：Linux/Unix、MAC OS X、Windows、OpenVMS。ClamAV是基于病毒扫描的命令行工具，但同时也有支持图形界面的ClamTK工具。ClamAV主要用于邮件服务器扫描邮件。它有多种接口从邮件服务器扫描邮件，支持文件格式有如：ZIP、RAR、TAR、GZIP、BZIP2、HTML、DOC、PDF,、SIS CHM、RTF等等。ClamAV有自动的数据库更新器，还可以从共享库中运行。命令行的界面让ClamAV运行流畅。 Avria另一个Linux下最好的杀毒软件是Avria免费杀毒版，Avria提供可扩展配置，控制你的计算机成为可能。它有一些很强大的特性，例如：简单的脚本安装方式、命令行扫描器、自动更新(产品、引擎、VDF)、自我完整性程序检查等等。 AVG 免费版杀毒现在有超过10亿用户使用AVG杀毒，同样是Linux机器中不错的杀毒专家，免费版提供的特性比高级版要少。AVG目前还不支持图形界面。提供防病毒和防间谍工具，AVG运行速度很快，占用系统资源很少，支持主流Linux版本如：Debian、Ubuntu、Red hat、Cent OS、FreeBSD等等 VPNOpenVPNOpenVPN 是一个基于 OpenSSL 库的应用层 VPN 实现。和传统 VPN 相比，它的优点是简单易用。 参考链接：https://blog.csdn.net/chinajust/article/details/78663972http://www.aqniu.com/tools-tech/667.htmlhttp://www.cnnetsec.com/1006.htmlhttps://blog.csdn.net/chengxuyuanyonghu/article/details/60468470https://klionsec.github.io/2017/09/22/snortpentest/]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>等保</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 11g静默安装官方提供的examples]]></title>
    <url>%2Farlo%2F56125275%2F</url>
    <content type="text"><![CDATA[之前安装oracle的时候，没有安装默认的示例，练习过程中，教程常用的hr等用户都没有，可以从官网下载示例来安装。 下载官方example包登录http://www.oracle.com 到下载页浏览就可以找到名为 linux.x64_11gR2_examples.zipunzip linux.x64_11gR2_examples.zip 编辑rsp静默安装文件cp examples/response/demos_install.rsp .egrep -v &quot;^$|^#&quot; /home/oracle/demos_install.rsp123456ORACLE_HOSTNAME=siluxa_oracleUNIX_GROUP_NAME=oinstallINVENTORY_LOCATION=/u01/app/oraInventory/SELECTED_LANGUAGES=en,zh_CNORACLE_HOME=/u01/app/oracle/product/11.1.0/db_1ORACLE_BASE=/u01/app/oracle 静默安装example./runInstaller -silent -responseFile /home/oracle/demos_install.rsp -ignorePrereq 执行sql脚本文件，安装特定模式123456789101112131415161718192021222324252627[oracle@siluxa_oracle human_resources]$ sqlplus sys/solution as sysdbaSQL*Plus: Release 11.2.0.1.0 Production on Fri May 4 18:01:11 2018Copyright (c) 1982, 2009, Oracle. All rights reserved.Connected to:Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSYS@orcl&gt; @?/demo/schema/human_resources/hr_main.sqlspecify password for HR as parameter 1:Enter value for 1: 123specify default tablespeace for HR as parameter 2:Enter value for 2: usersspecify temporary tablespace for HR as parameter 3:Enter value for 3: tempspecify password for SYS as parameter 4:Enter value for 4: solutionspecify log path as parameter 5:Enter value for 5: $ORACLE_HOME/demo/schema/log/ 1234567891011121314HR@orcl&gt; select table_name from user_tables;TABLE_NAME------------------------------REGIONSLOCATIONSJOB_HISTORYJOBSEMPLOYEESDEPARTMENTSCOUNTRIES7 rows selected. 这样就算安装完成了，可以使用hr进行学习了。 参考地址：https://blog.csdn.net/smstong/article/details/45891187]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将绿色版Tomcat/Nginx注册成服务，实现开机自启动]]></title>
    <url>%2Farlo%2F956f976%2F</url>
    <content type="text"><![CDATA[我们常用的Tomcat，不管是在windows下还是linux下基本上都是绿色版本，解压、启动后直接使用。这就产生了一个问题，不能开机自自动，很不方便，linux下可以添加到/etc/rc.local实现开机自启，windows下也可以添加到开机启动项里；不过注册为系统服务更加方便一些，这里记录一下方法。 注册Tomcat服务检查系统环境确保64位的操作系统下是64位的Jdk1234F:\&gt;java -d64 -versionjava version &quot;1.7.0_80&quot;Java(TM) SE Runtime Environment (build 1.7.0_80-b15)Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) 使用tomcat自身工具注册服务进入到tomcat bin目录下，执行12345678910111213141516171819#注册服务service.bat install &apos;服务名&apos; #服务名中不能有&quot;-&quot;,&quot;_&quot;，否则在服务中看不到F:\apache-tomcat-7.0.70(zabbix)\bin&gt;service.bat install tomcat7070 Installing the service &apos;tomcat7070&apos; ...Using CATALINA_HOME: &quot;F:\apache-tomcat-7.0.70(zabbix)&quot;Using CATALINA_BASE: &quot;F:\apache-tomcat-7.0.70(zabbix)&quot;Using JAVA_HOME: &quot;C:\Program Files\Java\jdk1.7.0_80&quot;Using JRE_HOME: &quot;C:\Program Files\Java\jdk1.7.0_80\jre&quot;Using JVM: &quot;C:\Program Files\Java\jdk1.7.0_80\jre\bin\server\jvm.dll&quot;The service &apos;tomcat7070&apos; has been installed.#卸载服务service.bat remove &apos;服务名&apos; F:\apache-tomcat-7.0.70(zabbix)\bin&gt;service.bat remove tomcat7070Removing the service &apos;tomcat7070&apos; ...Using CATALINA_BASE: &quot;F:\apache-tomcat-7.0.70(zabbix)&quot;The service &apos;tomcat7070&apos; has been removed 设置服务依赖关系如果项目中有多个tomcat，有先后启动顺序的话，可以使用到服务里的依赖关系,比如tomcat8080启动时候监测tomcat8081是否启动（8080依赖8081），就可以按下边这种方法设置。1sc config &quot;tomcat8080&quot; depend= tomcat8081 设置访问自动启动1set autoconfig enabled=&#123;yes|no&#125; 注册Nginx服务方法一进入github下载WinSW.NET4.exehttps://github.com/kohsuke/winsw/releases/download/winsw-v2.1.2/WinSW.NET4.exe将WinSW.NET4.exe 拷贝到 D:\nginx-1.16.1目录下，并重命名为nginx-server.exe 编写配置文件在D:\nginx-1.16.1目录下新建 nginx-server.xml 配置文件，内容如下：1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;service&gt; &lt;id&gt;Nginx&lt;/id&gt; &lt;name&gt;Nginx&lt;/name&gt; &lt;description&gt;Nginx&lt;/description&gt; &lt;executable&gt;D:\nginx-1.16.1\nginx.exe&lt;/executable&gt; &lt;startargument&gt;-p&lt;/startargument&gt; &lt;startargument&gt;D:\nginx-1.16.1&lt;/startargument&gt; &lt;logpath&gt;D:\nginx-1.16.1\logs&lt;/logpath&gt; &lt;logmode&gt;roll&lt;/logmode&gt; &lt;stopexecutable&gt;D:\nginx-1.16.1\nginx.exe&lt;/stopexecutable&gt; &lt;stopargument&gt;-p&lt;/stopargument&gt; &lt;stopargument&gt;D:\nginx-1.16.1&lt;/stopargument&gt; &lt;stopargument&gt;-s&lt;/stopargument&gt; &lt;stopargument&gt;stop&lt;/stopargument&gt; &lt;stoptimeout&gt;6sec&lt;/stoptimeout&gt;&lt;/service&gt; 注册并启动服务123456D:\&gt;d:\nginx-1.16.1\nginx-server.exe install2019-11-12 15:34:26,555 INFO - Installing the service with id &apos;Nginx&apos;D:\nginx-1.16.1&gt;net start NginxNginx 服务正在启动 .Nginx 服务已经启动成功。 注册Nginx服务方法二下载Windows Server 2003 Resource Kit Tools其实我们只需要里边instsrv.exe、srvany.exe这两个工具https://www.microsoft.com/en-IE/download/details.aspx?id=17657 注册Nginx服务安装完上述工具，打开C:\Program Files (x86)\Windows Resource Kits\Tools， 复制srvany.exe到nginx.exe同级目录下。1sc create &quot;Nginx&quot; binPath=&quot;D:\deploy\nginx-1.12.1\srvany.exe&quot; start=auto 导入注册表复制一下内容，保存为.reg格式文件，双击导入到注册表12345Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Nginx\Parameters] &quot;Application&quot;=&quot;D:\\deploy\\nginx-1.12.1\\nginx.exe&quot; &quot;AppParameters&quot;=&quot;&quot; &quot;AppDirectory&quot;=&quot;D:\\deploy\\nginx-1.12.1&quot; 启动关闭服务1234567# 启动C:\&gt;net start NginxNginx 服务正在启动 .Nginx 服务已经启动成功。# 关闭windows下nginx默认会启动两个进程，如果使用net stop Nginx的话只能关闭一个nginx进程，不能完全关闭taskkill /F /IM nginx.exe 参考资料：http://www.cnblogs.com/xwdreamer/p/3411986.htmlhttp://wlbbswl.iteye.com/blog/840538https://blog.csdn.net/qq_16022261/article/details/53836004http://koda.iteye.com/blog/600725]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(9)结合sensor监控cpu温度]]></title>
    <url>%2Farlo%2Fce74a028%2F</url>
    <content type="text"><![CDATA[zabbix 可以通过sensors-detect检测内核模块，使用zabbix监控系统自定义监控项，采集监控数据并设置告警。可以监控物理机器(虚拟机获取不到)的温度。 安装sensors安装、运行sensors，可以看到每颗cpu的温度123456789101112131415161718192021222324252627282930313233[root@siluxa2 src]# yum install lm_sensors[root@siluxa2 src]# sensorsi350bb-pci-0100Adapter: PCI adapterloc1: +50.0°C (high = +120.0°C, crit = +110.0°C)coretemp-isa-0000Adapter: ISA adapterPhysical id 0: +55.0°C (high = +80.0°C, crit = +90.0°C)Core 0: +45.0°C (high = +80.0°C, crit = +90.0°C)Core 1: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 2: +45.0°C (high = +80.0°C, crit = +90.0°C)Core 3: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 4: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 8: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 9: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 10: +46.0°C (high = +80.0°C, crit = +90.0°C)Core 11: +44.0°C (high = +80.0°C, crit = +90.0°C)Core 12: +45.0°C (high = +80.0°C, crit = +90.0°C)coretemp-isa-0001Adapter: ISA adapterPhysical id 1: +49.0°C (high = +80.0°C, crit = +90.0°C)Core 0: +42.0°C (high = +80.0°C, crit = +90.0°C)Core 1: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 2: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 3: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 4: +42.0°C (high = +80.0°C, crit = +90.0°C)Core 8: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 9: +42.0°C (high = +80.0°C, crit = +90.0°C)Core 10: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 11: +41.0°C (high = +80.0°C, crit = +90.0°C)Core 12: +41.0°C (high = +80.0°C, crit = +90.0°C) 配置zabbix agent客户端文件修改客户端配置文件zabbix_agentd.conf第一次自定义监控时要设置1UnsafeUserParameters=1 在配置文件中添加一行：1UserParameter=get_temp_cpu[*],sensors|grep &quot;Physical id $1&quot;|cut -c 17-20 添加监控项123456sensor[device,sensor,&lt;mode&gt;]读取硬件传感器device - 设备名称 sensor - 传感器名称 mode - 可选值:avg, max, min示例key: sensor[w83781d-i2c-0-2d,temp1] Prior to Zabbix 1.8.4, the sensor[temp1] format was used. On Linux 2.6+, 读取/sys/class/hwmon. On OpenBSD, 读取hw.sensors MIB.示例keys: sensor[cpu0,temp0] – CPU0的温度 sensor[cpu[0-2]$,temp,avg] – cpu平均温度Zabbix 1.8.4开始支持OpenBSD 我这里添加两颗cpu为例！ 添加触发器 添加图形 查看图形 参考链接：http://xy.uyun.cn/post/1865.html]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>运维</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(8)使用ansible批量部署zabbix agent]]></title>
    <url>%2Farlo%2F7c94dafb%2F</url>
    <content type="text"><![CDATA[相同系统环境部署zabbix agent，可以使用ansible playbook来实现，大概分为以下几步。 ansible 目录结构[root@sl_confluence ansible]# pwd/etc/ansible[root@sl_confluence ansible]# tree1234567891011121314.├── ansible.cfg├── hosts├── roles│ └── zabbix_agent│ ├── files│ │ └── zabbix-agent-3.4.8-1.el6.x86_64.rpm│ ├── tasks│ │ └── main.yml│ └── templates│ └── zabbix_agentd.conf.j2└── zabbix_agent.yml5 directories, 6 files 查看 hosts文件[root@sl_confluence ansible]# cat hosts12[zabbix_agent]dbserver [root@sl_confluence ansible]# cat zabbix_agent.yml123456789- hosts: zabbix_agent user: root vars: zabbix_serverip: 192.168.6.186 # zabbix 服务器IP zabbix_activeip: 192.168.6.186 # zabbix 服务器IP agent_hostname: &apos;&#123;&#123; ansible_hostname &#125;&#125;&apos; # 客户端hostname agent_ip: &apos;&#123;&#123; ansible_eth0.ipv4.address &#125;&#125;&apos; # 客户端IP 根据实际情况修改自己的网卡名字eth0 改成自己服务器 roles: - zabbix_agent [root@sl_confluence tasks]# cat main.yml12345678910- name: copy zabbix_agentd copy: src=/etc/ansible/roles/zabbix_agent/files/zabbix-agent-3.4.8-1.el6.x86_64.rpm dest=/usr/local/src/zabbix-agent-3.4.8-1.el6.x86_64.rpm- name: install zabbix-agend shell: rpm -ivh /usr/local/src/zabbix-agent-3.4.8-1.el6.x86_64.rpm # 安装zabbix agentd- name: up zabbix-agent file client # 上传配置文件 template: src=zabbix_agentd.conf.j2 dest=/etc/zabbix/zabbix_agentd.conf- name: enabled service zabbix-agent # 打开zabbix-agent 开机启动 service: name=zabbix-agent enabled=yes- name: start service zabbix-agent # 启动zabbix-agent service: name=zabbix-agent state=started 定义zabbix_agent.conf模板文件12345678910[root@sl_confluence templates]# cat zabbix_agentd.conf.j2 PidFile=/var/run/zabbix/zabbix_agentd.pidLogFile=/var/log/zabbix/zabbix_agentd.logEnableRemoteCommands=1Server=&#123;&#123;zabbix_serverip&#125;&#125;ListenPort=10050ServerActive=&#123;&#123;zabbix_activeip&#125;&#125;Hostname=&#123;&#123;ansible_hostname&#125;&#125;AllowRoot=1Include=/etc/zabbix/zabbix_agentd.d/*.conf 执行安装1ansible-playbook zabbix_agent.yml]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(7)监控端口、服务存活]]></title>
    <url>%2Farlo%2F429ab963%2F</url>
    <content type="text"><![CDATA[之前添加的tomcat监控，只能监控到jvm，类，线程之类的参数，不能监控tomcat本身的存活状态，总感觉有点美中不足；网上找了下，监控端口、服务还是挺简单的，这里记录一下。 zabbix有三种监控端口的监控项方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859601.net.tcp.listen[port] 用于监听端口是否开启 1表示开启 0表示未开启 2.net.tcp.port[,port] 是否 可 以 连 接 到 指 定的 TCP 端口 0 – 无法连接 1 – 可以连接 ip – IP 地址(默认是 127.0. 0.1) port – 端口 范例: net.tcp.port[,80] 检测 web 服务器端口是否运行中3.net.tcp.service[service,,] 检 测 服 务 是否开启， 并 且 端 口 可用 0 – 服务挂了 1 – 服务运行中 service – 如下: ssh, ntp, ldap, smtp, ftp, http, p op, nntp,imap, tcp, https, telnet ip – IP地址 (默认127.0.0. 1) port – 端口 (默认情况为标 准端口号) 示例 key: net.tcp.service[ftp,,45] – 检测 45 端口 上得 FTP 是否运行中 Zabbix 1.8.3 支持的版本请使用 service.n tp 代替 ntp. https 和 telnet 服务从 2.0 和 2.2 开始支持4.net.tcp.service.perf[service,,] 检 测 服 务 器性能 0 – 服务挂了; seconds – 链接到 服务器端口消耗的时 间 service – 如下:ssh, ntp, ldap, smtp, ftp, http, po p, nntp,imap, tcp, https, telnet ip – IP地址 (默认127.0.0. 1) port – 端口 (默认情况为标 准端口号)5.net.udp.listen[port] 检测 UDP 端 口 是 否 在监听 0 – 未监听 1 – 监听中 port – udp 端口 范例: net.udp.listen[68] 监控tomcat 8080端口添加监控项 添加触发器 添加图形 参考链接：http://www.cnblogs.com/saneri/p/6126786.html]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos6环境下搭建及破解confluence]]></title>
    <url>%2Farlo%2F58cb2af9%2F</url>
    <content type="text"><![CDATA[Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。【来自百度百科】 我们只是需要一个知识库……公司没有专门的知识库，企业wiki，团队的人资料文档都放在自己手里，你懂的？工作的文档一直都是svn提交，查看起来很不方便；长时间下来，没有技术共享、交流，积累；多方询问，别人推荐使用confluence，先搭建起来用用看。 系统环境Centos 6.9Jdk 1.8.112Mysql 5.7.20Atlassian-confluence-6.3.1 安装jdk12345678tar xf jdk-8u112-linux-x64.tar.gz -C /usr/local/-- 配置环境变量vim /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_112/export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH-- 使环境变量生效source /etc/profile 安装mysql123456789101112wget https://mirrors.huaweicloud.com/repository/toolkit/mysql/Downloads/MySQL-5.7/mysql-5.7.20-1.el6.x86_64.rpm-bundle.tartar xf mysql-5.7.20-1.el6.x86_64.rpm-bundle.tar yum localinstall mysql-community-common-5.7.20-1.el6.x86_64.rpm mysql-community-client-5.7.20-1.el6.x86_64.rpm mysql-community-server-5.7.20-1.el6.x86_64.rpm mysql-community-libs-compat-5.7.20-1.el6.x86_64.rpm mysql-community-libs-5.7.20-1.el6.x86_64.rpm mysql-community-devel-5.7.20-1.el6.x86_64.rpm-- 修改mysql参数vim /etc/my.cnfmax_allowed_packet = 256Minnodb_log_file_size=512M--启动mysqld服务/etc/init.d/mysqld start--查看初始密码grep &apos;temporary password&apos; /var/log/mysqld.log 2018-04-03T02:44:31.357861Z 1 [Note] A temporary password is generated for root@localhost: OUGiG=n-l8lY 123456789101112131415161718192021222324[root@3g3MplC6 ~]# mysql -uroot -pOUGiG=n-l8lYmysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 12Server version: 5.7.20Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.--mysql5.7密码策略比较高，设置一下复杂度和长度mysql&gt; set global validate_password_policy=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set global validate_password_length=1;Query OK, 0 rows affected (0.00 sec)--修改一下root用户的密码为&apos;ffffff&apos;(生产环境不建议这么操作)mysql&gt; alter user root@localhost identified by &apos;ffffff&apos;;Query OK, 0 rows affected (0.00 sec)--创建一个mysql数据库confluence，创建用户confluence，密码为confluencepwdmysql -uroot -p&apos;ffffff&apos; -e &quot;create database confluence default character set utf8 collate utf8_bin;grant all on confluence.* to &apos;confluence&apos;@&apos;%&apos; identified by &apos;confluencepwd&apos;;&quot; 安装confluence123456789wget https://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-6.3.1-x64.bin数据库驱动包和破解补丁包: 链接: https://pan.baidu.com/s/1YfwGC2NDBVs3udsVb-i6fA 密码: ix7uchmod +x atlassian-confluence-6.3.1-x64.bin./atlassian-confluence-6.3.1-x64.bin/etc/init.d/confluence stop上传以下两个包到此目录下/opt/atlassian/confluence/confluence/WEB-INF/libatlassian-extras-3.2.jarmysql-connector-java-5.1.42-bin.jar/etc/init.d/confluence start 可以看到安装目录为Installation Directory: /opt/atlassian/confluenceHome Directory: /var/atlassian/application-data/confluence默认端口为8090 配置confluencehttp://192.168.6.186:8090 设置为中文语言 产品安装 直接下一步 复制服务器ID，点击获得授权码 参考图片设置12345678910服务器ID：BZ0A-OLZE-ZYYB-3PFX授权码：AAABLA0ODAoPeNptkF9rwjAUxd/zKQJ72PYQSaOiCIFp24FQragbU/aShesWqLHepKLffqmdzP15CISce8753dwsK6DDEilvU84HXT4QEY2TJRU86pMEnEZTerOzMt7ZTVGB1UDvFoAHwPvXAU0PqqhUPUBihPMlUR5kbWe8w3ibBKNX2k/VFmTE+/2e6ImH/b6ld1uiQ2griOYA0mMFzcPCK/SAcqMKBxd/OlGm+BPw3X/lz4wG62B5KuHcGueTSTqPx8OMFI30DOhqjyAh1XqwKuyVHkuDpyv8bo2f47uyxjUdR3OrLGnWHydytOZDlmfrlK1XqxFrzx5fyCKdynBYFkWdnhC8S75wwnw2Tn5KZ9xptX0DzDdPLlBJFl0M//PMKtQfysHvb/4EqFmR3DAtAhUAjJ5DzWcXkYufaw72NYIZs/rFeJgCFEocDK77ZwHKpPhhIvo1bD3HDmJIX02f3 选择MySQL 选择JDBC根据下图显示，在数据库URL添加?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;是代替&amp;，否则启动会报错，这里没有改的话，可以在/var/atlassian/application-data/confluence/confluence.cfg.xml文件中修改 选择空白站点 在Confluence中管理用户与组 配置系统管理员账户 配置完成 破解confluence替换/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.2.jar包，进行破解 参考链接:https://blog.csdn.net/wh211212/article/details/76131569http://www.confluence.cn]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle RAC手动启动与关闭及常用命令]]></title>
    <url>%2Farlo%2Fd56aba68%2F</url>
    <content type="text"><![CDATA[在经历了几次服务器意外断电，启动rac报错；觉得之前直接“shutdown -h now”这种方式还是太“粗暴”，需要一种“温柔”的方式来操作她。 查看一下RAC节点的服务状态123456789101112131415161718192021222324252627[grid@rac1 ~]$ crs_stat -t -vName Type R/RA F/FT Target State Host ----------------------------------------------------------------------ora.DATA.dg ora....up.type 0/5 0/ ONLINE ONLINE rac1 ora....ER.lsnr ora....er.type 0/5 0/ ONLINE ONLINE rac1 ora....N1.lsnr ora....er.type 0/5 0/0 ONLINE ONLINE rac1 ora.OCR.dg ora....up.type 0/5 0/ ONLINE ONLINE rac1 ora....DISK.dg ora....up.type 0/5 0/ ONLINE ONLINE rac1 ora.asm ora.asm.type 0/5 0/ ONLINE ONLINE rac1 ora.cvu ora.cvu.type 0/5 0/0 ONLINE ONLINE rac1 ora.gsd ora.gsd.type 0/5 0/ OFFLINE OFFLINE ora....network ora....rk.type 0/5 0/ ONLINE ONLINE rac1 ora.oc4j ora.oc4j.type 0/1 0/2 ONLINE ONLINE rac2 ora.ons ora.ons.type 0/3 0/ ONLINE ONLINE rac1 ora.orcl.db ora....se.type 0/2 0/1 ONLINE ONLINE rac1 ora....SM1.asm application 0/5 0/0 ONLINE ONLINE rac1 ora....C1.lsnr application 0/5 0/0 ONLINE ONLINE rac1 ora.rac1.gsd application 0/5 0/0 OFFLINE OFFLINE ora.rac1.ons application 0/3 0/0 ONLINE ONLINE rac1 ora.rac1.vip ora....t1.type 0/0 0/0 ONLINE ONLINE rac1 ora....SM2.asm application 0/5 0/0 ONLINE ONLINE rac2 ora....C2.lsnr application 0/5 0/0 OFFLINE OFFLINE ora.rac2.gsd application 0/5 0/0 OFFLINE OFFLINE ora.rac2.ons application 0/3 0/0 ONLINE ONLINE rac2 ora.rac2.vip ora....t1.type 0/0 0/0 ONLINE ONLINE rac2 ora.scan1.vip ora....ip.type 0/0 0/0 ONLINE ONLINE rac1 ora.sx21.db ora....se.type 0/2 0/1 ONLINE ONLINE rac1 关闭RAC关闭顺序：关闭数据库(实例)–&gt;关闭ASM实例–&gt;关闭节点服务 关闭数据库123--关闭数据库srvctl stop database -d sx21srvctl stop database -d orcl 关闭ASM实例从11.2 Grid Infrastructure开始， ASM diskgroups也注册为CRS资源。而diskgroup资源是依赖于ASM的，所以不能首先要停止’ora.ASM.dg’这个服务，或者直接使用-f选项强制停止ASM。12345678-- 查看asm磁盘相关信息sqlplus / as sysasmSQL&gt; select instance_name,status from v$instance;SQL&gt; col name format a10SQL&gt; set line 9999SQL&gt; col path format a15SQL&gt; select group_number,path,name,disk_number,total_mb,free_mb,create_date,mount_status,mount_date from v$asm_disk order by group_number desc,disk_number;SQL&gt; select name,state,free_mb,required_mirror_free_mb,usable_file_mb from v$asm_diskgroup; 1234--关闭磁盘组， 状态从ONLINE变成OFFLINEsrvctl stop diskgroup -g datasrvctl stop diskgroup -g ocrsrvctl stop diskgroup -g votingdisk 123--关闭asmsrvctl stop asm -n rac1srvctl stop asm -n rac2 关闭各节点的服务包括：listener、gsd、ons、vip12srvctl stop nodeapps -n rac1srvctl stop nodeapps -n rac2 启动RAC启动顺序：启动节点服务–&gt;启动ASM实例–&gt;启动数据库实例 启动各节点的服务包括：listener、gsd、ons、vip12srvctl start nodeapps -n rac1srvctl start nodeapps -n rac2 启动asm12srvctl start asm -n rac1srvctl start asm -n rac2 启动数据库12srvctl start database -d sx21srvctl start database -d orcl RAC常用操作命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950--查看集群状态crsctl stat res -tcrsctl check cluster -allcrs_stat -t -v--查看数据库配置srvctl config database -d sx21--查看数据库状态srvctl status database -d sx21--启动数据库srvctl start database -d sx21--关闭数据库srvctl stop database -d sx21--查看asm状态srvctl status asm -n rac1srvctl status asm -n rac2--关闭asm 状态从ONLINE变成OFFLINEsrvctl stop diskgroup -g datasrvctl stop diskgroup -g ocrsrvctl stop diskgroup -g votingdisk--开启asm srvctl start diskgroup -g datasrvctl start diskgroup -g ocrsrvctl start diskgroup -g votingdisk--查看vip状态srvctl status vip -n rac1 -v--启动vipsrvctl start vip -n rac1 -v--停止vipsrvctl stop vip -n rac2 -f -vsrvctl stop vip -n rac1 -f -v-- 查看asm磁盘相关信息sqlplus / as sysasmSQL&gt; select instance_name,status from v$instance;SQL&gt; col name format a10SQL&gt; set line 9999SQL&gt; col path format a15SQL&gt; select group_number,path,name,disk_number,total_mb,free_mb,create_date,mount_status,mount_date from v$asm_disk order by group_number desc,disk_number;SQL&gt; select name,state,free_mb,required_mirror_free_mb,usable_file_mb from v$asm_diskgroup;---------------------------------------------------------以下操作需要使用root用户-- 单一节点启动crsctl start hascrsctl start crscrsctl check crs-- 所有节点启动crsctl status cluster -n rac1 rac2crsctl start cluster -allcrsctl check cluster -all]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录一次oracle rac数据库启动故障修复过程]]></title>
    <url>%2Farlo%2F1b263496%2F</url>
    <content type="text"><![CDATA[周末测试服务器意外断电关机了，早上启动起来机器，发现数据库起不来了，以下记录一下排查过程。经过查看sx21和orcl两个数据库都是“Instance Shutdown”状态。 查看rac启动状态123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[grid@rac1 ~]$ crsctl stat res -t--------------------------------------------------------------------------------NAME TARGET STATE SERVER STATE_DETAILS --------------------------------------------------------------------------------Local Resources--------------------------------------------------------------------------------ora.DATA.dg ONLINE ONLINE rac1 ONLINE ONLINE rac2 ora.LISTENER.lsnr ONLINE ONLINE rac1 ONLINE ONLINE rac2 ora.OCR.dg ONLINE ONLINE rac1 ONLINE ONLINE rac2 ora.VOTINGDISK.dg ONLINE ONLINE rac1 ONLINE ONLINE rac2 ora.asm ONLINE ONLINE rac1 Started ONLINE ONLINE rac2 Started ora.gsd OFFLINE OFFLINE rac1 OFFLINE OFFLINE rac2 ora.net1.network ONLINE ONLINE rac1 ONLINE ONLINE rac2 ora.ons ONLINE ONLINE rac1 ONLINE ONLINE rac2 --------------------------------------------------------------------------------Cluster Resources--------------------------------------------------------------------------------ora.LISTENER_SCAN1.lsnr 1 ONLINE ONLINE rac1 ora.cvu 1 ONLINE ONLINE rac1 ora.oc4j 1 ONLINE ONLINE rac2 ora.orcl.db 1 ONLINE OFFLINE Instance Shutdown 2 ONLINE OFFLINE Instance Shutdown ora.rac1.vip 1 ONLINE ONLINE rac1 ora.rac2.vip 1 ONLINE ONLINE rac2 ora.scan1.vip 1 ONLINE ONLINE rac1 ora.sx21.db 1 ONLINE OFFLINE Instance Shutdown 2 ONLINE OFFLINE Instance Shutdown 手动启动数据库手动启动sx21数据库报错1234567891011121314[grid@rac1 ~]$ srvctl start database -d sx21PRCR-1079 : Failed to start resource ora.sx21.dbCRS-5017: The resource action &quot;ora.sx21.db start&quot; encountered the following error: ORA-00600: internal error code, arguments: [kcratr_scan_lastbwr], [], [], [], [], [], [], [], [], [], [], []. For details refer to &quot;(:CLSN00107:)&quot; in &quot;/u01/app/11.2.0/grid/log/rac1/agent/crsd/oraagent_oracle/oraagent_oracle.log&quot;.CRS-5017: The resource action &quot;ora.sx21.db start&quot; encountered the following error: ORA-01157: cannot identify/lock data file 6 - see DBWR trace fileORA-01110: data file 6: &apos;/u01/app/oracle/11g/dbs/E:APPADMINISTRATORORADATASX21ALK.DBF&apos;. For details refer to &quot;(:CLSN00107:)&quot; in &quot;/u01/app/11.2.0/grid/log/rac2/agent/crsd/oraagent_oracle/oraagent_oracle.log&quot;.CRS-2674: Start of &apos;ora.sx21.db&apos; on &apos;rac1&apos; failedCRS-2674: Start of &apos;ora.sx21.db&apos; on &apos;rac2&apos; failedCRS-2632: There are no more servers to try to place resource &apos;ora.sx21.db&apos; on that would satisfy its placement policy 手动启动orcl数据库报错12345678910[grid@rac1 ~]$ srvctl start database -d orclPRCC-1014 : orcl was already runningPRCR-1004 : Resource ora.orcl.db is already runningPRCR-1079 : Failed to start resource ora.orcl.dbCRS-5017: The resource action &quot;ora.orcl.db start&quot; encountered the following error: ORA-01589: must use RESETLOGS or NORESETLOGS option for database open. For details refer to &quot;(:CLSN00107:)&quot; in &quot;/u01/app/11.2.0/grid/log/rac2/agent/crsd/oraagent_oracle/oraagent_oracle.log&quot;.CRS-2674: Start of &apos;ora.orcl.db&apos; on &apos;rac2&apos; failedCRS-2528: Unable to place an instance of &apos;ora.orcl.db&apos; as all possible servers are occupied by the resource 恢复数据库sx21另外开一个窗口，连接sx21数据库；恢复数据库1234567891011121314151617181920212223242526272829303132333435363738394041[root@rac1 ~]# su - oracle[oracle@rac1 ~]$ export ORACLE_SID=sx211[oracle@rac1 ~]$ sqlplus / as sysdbaSQL*Plus: Release 11.2.0.4.0 Production on Mon Apr 2 09:43:52 2018Copyright (c) 1982, 2013, Oracle. All rights reserved.Connected to an idle instance.SQL&gt; startupORACLE instance started.Total System Global Area 2471931904 bytesFixed Size 2255752 bytesVariable Size 687867000 bytesDatabase Buffers 1761607680 bytesRedo Buffers 20201472 bytesDatabase mounted.ORA-00600: internal error code, arguments: [kcratr_scan_lastbwr], [], [], [],[], [], [], [], [], [], [], []SQL&gt; select open_mode from v$database;OPEN_MODE--------------------MOUNTEDSQL&gt; alter database open resetlogs;alter database open resetlogs*ERROR at line 1:ORA-01139: RESETLOGS option only valid after an incomplete database recoverySQL&gt; recover database;Media recovery complete.SQL&gt; alter database open;Database altered. 恢复数据库orcl另外orcl实例，情况不太一样；直接恢复的话，会报错；需要我们手动指定恢复文件。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114[oracle@rac1 ~]$ export ORACLE_SID=orcl11[oracle@rac1 ~]$ sqlplus / as sysdbaSQL*Plus: Release 11.2.0.4.0 Production on Mon Apr 2 09:51:24 2018Copyright (c) 1982, 2013, Oracle. All rights reserved.Connected to an idle instance.SQL&gt; startupORACLE instance started.Total System Global Area 2471931904 bytesFixed Size 2255752 bytesVariable Size 687867000 bytesDatabase Buffers 1761607680 bytesRedo Buffers 20201472 bytesDatabase mounted.ORA-00600: internal error code, arguments: [kcratr_nab_less_than_odr], [1],[115], [49383], [49388], [], [], [], [], [], [], []-- 查看数据库模式SQL&gt; select open_mode from v$database;OPEN_MODE--------------------MOUNTED--此时数据库启动到mount状态，尝试以resetlogs方式open数据库，也无法打开SQL&gt; alter database open resetlogs; alter database open resetlogs*ERROR at line 1:ORA-01139: RESETLOGS option only valid after an incomplete database recoverySQL&gt; recover database;ORA-00283: recovery session canceled due to errorsORA-00600: internal error code, arguments: [krr_read_5], [115], [49383], [],[], [], [], [], [], [], [], []--查看当前日志文件情况SQL&gt; select v1.group#, member, sequence#, first_change# from v$log v1, v$logfile v2 where v1.group# = v2.group#; GROUP#----------MEMBER-------------------------------------------------------------------------------- SEQUENCE# FIRST_CHANGE#---------- ------------- 1+DATA/orcl/onlinelog/group_1.261.970078827 115 4674751 2+DATA/orcl/onlinelog/group_2.262.970078829 114 4622551 GROUP#----------MEMBER-------------------------------------------------------------------------------- SEQUENCE# FIRST_CHANGE#---------- ------------- 3+DATA/orcl/onlinelog/group_3.266.970078993 65 4646182 4+DATA/orcl/onlinelog/group_4.267.970078995 GROUP#----------MEMBER-------------------------------------------------------------------------------- SEQUENCE# FIRST_CHANGE#---------- ------------- 66 4688519SQL&gt; recover database using backup controlfile until cancel;ORA-00279: change 4674751 generated at 04/01/2018 15:33:57 needed for thread 1ORA-00289: suggestion : /u01/app/oracle/11g/dbs/arch1_115_970078828.dbfORA-00280: change 4674751 for thread 1 is in sequence #115-- 记录住这里提示的change号和sqeuence号，去上边记录中查找文件名Specify log: &#123;&lt;RET&gt;=suggested | filename | AUTO | CANCEL&#125;+DATA/orcl/onlinelog/group_1.261.970078827-- 输入文件路径名称，进行恢复ORA-00279: change 4674751 generated at 04/01/2018 10:23:59 needed for thread 2ORA-00289: suggestion : /u01/app/oracle/11g/dbs/arch2_65_970078828.dbfORA-00280: change 4674751 for thread 2 is in sequence #65Specify log: &#123;&lt;RET&gt;=suggested | filename | AUTO | CANCEL&#125;+DATA/orcl/onlinelog/group_3.266.970078993ORA-00279: change 4688519 generated at 04/01/2018 18:01:42 needed for thread 2ORA-00289: suggestion : /u01/app/oracle/11g/dbs/arch2_66_970078828.dbfORA-00280: change 4688519 for thread 2 is in sequence #66ORA-00278: log file &apos;+DATA/orcl/onlinelog/group_3.266.970078993&apos; no longerneeded for this recoverySpecify log: &#123;&lt;RET&gt;=suggested | filename | AUTO | CANCEL&#125;+DATA/orcl/onlinelog/group_4.267.970078995Log applied.Media recovery complete.--恢复完成后，再次可以正常打开数据库，重启数据库正常。SQL&gt; alter database open resetlogs;Database altered.SQL&gt; select open_mode from v$database;OPEN_MODE--------------------READ WRITE 参考链接：https://www.cnblogs.com/jionjionyou/p/5602019.htmlhttps://blog.csdn.net/linucle/article/details/8778046]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用wgrib2将GFS数据导入到mysql]]></title>
    <url>%2Farlo%2F551cdbc9%2F</url>
    <content type="text"><![CDATA[GFS数据来源 数据来源采自美国国家环境预报中心的GFS(全球预报系统)，该系统每天发布4次全球范围的气象数据，分辨率最高可达到0.25° x 0.25°，精度还是比较可观的。GFS数据提供FTP下载方式：http://www.ftp.ncep.noaa.gov/data/nccf/com/gfs/prod/每次发布的数据保存在命名为gfs.YYYYMMDDHH的文件夹中。本次需要的数据精度为0.25°（0p25），所以数据的文件名为：gfs.t{HH}z.pgrb2.0p25.f{XXX}其中HH表示发布的时间，XXX表示未来几小时的预报数据。例如gfs.t00z.pgrb2.0p25.f001 表示0时发布的未来1小时气象数据信息。那么问题来了，这个文件太大了，因为分辨率比较高，每个文件高达200多MB，不仅下载速度慢，处理慢，对存储空间也是一个考验。于是找到了一个可以在线过滤要下载数据的地址：http://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_0p25.pl这个网站允许用户仅下载过滤后的文件，并提供下载网址，这样文件就会小很多。例如，在本项目中，仅需要下载降雨数据（PWAT），并且经纬度范围为特定区域，每次发布的数据全部下载下来也才8M多点。那么要想获得GRIB文件中的数据，则需要用到一个软件wgrib2,，该软件在ncep网站上提供源码下载。 Mysql安装配置查看mysql安装1234567[root@siluxa_oracle grib2]# rpm -qa |grep -i mysqlmysql-community-common-5.6.36-2.el6.x86_64mysql-community-client-5.6.36-2.el6.x86_64mysql-community-server-5.6.36-2.el6.x86_64mysql-community-libs-compat-5.6.37-2.el6.x86_64mysql-community-libs-5.6.36-2.el6.x86_64mysql-community-devel-5.6.39-2.el6.x86_64 创建数据库和表1234567# 创建数据库CREATE DATABASE weatherDB DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;# 创建表create table wgrib2 (rt datetime, vt datetime, lat double, lon double, param varchar(80), level varchar(30), value double); # 创建用户和表，并赋予权限(实验环境可以直接用root，生产环境强烈建议使用普通用户)-- CREATE USER wgrib2 IDENTIFIED BY &apos;ffffff&apos;;-- GRANT ALL on weatherDB.* to wgrib2@&quot;%&quot; Identified by &quot;ffffff&quot;; 编译安装wgrib2软件包编译安装wgrib2123456789101112131415#安装gcc和gfortran编译器yum install gcc gcc-gfortran -y#下载wgrib2软件包wget http://www.ftp.cpc.ncep.noaa.gov/wd51we/wgrib2/wgrib2.tgz -O /usr/local/src/wgrib2.tgzcd /usr/local/srctar wgrib2.tgzcd grib2/#设置编译环境export CC=gccexport FC=gfortran# 启用mysql支持，修改第114行vim makefile USE_MYSQL=1# 编译make 查看wgrib2配置12345678910111213141516171819202122232425262728293031323334353637[root@siluxa_oracle grib2]#cd wgrib2[root@siluxa_oracle grib2]# ./wgrib2 -configwgrib2 v0.2.0.7 12/2017 Wesley Ebisuzaki, Reinoud Bokhorst, John Howard, Jaakko Hyvätti, Dusan Jovic, Daniel Lee, Kristian Nilssen, Karl Pfeiffer, Pablo Romero, Manfred Schwarb, Gregor Schee, Arlindo da Silva, Niklas Sondell, Sam Trahan, Sergey Varlamov stock buildCompiled on 11:02:41 Mar 15 2018Netcdf package: &quot;3.6.3&quot; of Mar 15 2018 11:02:16 $ is installedlibaec-1.0.2.tar.gz is installedJasper 1.900.1 is installedmysql package is installedregex package is installedtigge package is installedIPOLATES iplib.v3.0.0 is installed, default vectors: UGRD/VGRD VUCSH/VVCSH UFLX/VFLX UGUST/VGUST USTM/VSTM VDFUA/VDFVA MAXUW/MAXVW UOGRD/VOGRD UICE/VICE U-GWD/V-GWD USSD/VSSD Geolocation library status (by search order) gctpc geolocation is enabled spherical geolocation is enabledUDF package is not installedversion ftime=2maximum number of arguments on command line: 10000maximum number of -match,-not,-if, and -not_if options: 2000maximum number of -match_fs,-not_fs,-if_fs, and -not_if_fs options: 2000maximum number of -fgrep, -egrep, -fgrep_v, -egrep_v options: 200RPN registers: 0..19memory files: @mem:0, @mem:1 .. @mem:19stdout buffer length: 30000default decoding: g2clib emulationg2clib decoders are not installedSupported decoding: simple, complex, rle, ieee, png, jpeg2000, CCSDS AECuser gribtable: (none)C compiler: gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)Fortran compiler: gfortranOpenMP: control number of threads with environment variable OMP_NUM_THREADSINT_MAX: 2147483647ULONG_MAX: 18446744073709551615 将gfs数据导入到mysql中1./wgrib2 /mnt/wgrib2/gfs_20180313_0000_0p25_240.240 -mysql 192.168.6.123 root ffffff weatherDB wgrib2 可以过滤性导入数据，格式为 -if “：” 后跟参数12#下边这条命令是将“10 m above ground”的数据导入到wind表中./wgrib2 /mnt/wgrib2/gfs.t00z.pgrb2.0p25.f000 -if &quot;:10 m above ground&quot; -mysql 192.168.6.123 root ffffff weatherDB wind 查看导入结果123mysql -uroot -pffffffmysql&gt; use weatherDB;mysql&gt; select * from `weatherDB`.`wgrib2` limit 0, 20; 自动下载gfs数据，并导入mysql脚本123456789101112131415161718192021222324252627[root@mysql gfs_data]# cat d_gfs00.sh #!/bin/bashv_time1=`date &quot;+%Y%m%d00&quot;`gfs_dir=/data/gfs_data/$v_time1# 0. 删除2天前的数据find /data/gfs_data/ -type d -mtime +2 -exec rm -fr &#123;&#125; \;# 1. 判断目录是否存在，如果不存在新建目录if [ ! -d &quot;$gfs_dir&quot; ];then mkdir -p $gfs_dirElse echo &quot;文件夹已经存在&quot;fi# 2. 判断目录下是否有文件filenum=`ls $gfs_dir |wc -l`if [ 9 -ne $filenum ];then /usr/bin/perl /data/gfs_data/get_gfs.pl data $v_time1 0 24 3 all &apos;VGRD.10 m above ground|UGRD.10 m above ground&apos; $gfs_dir &gt;/dev/null 2&gt;&amp;1else echo &quot;文件已经下载&quot;fi# 3. 清空数据库mysql -uwgrib2 -pwg#123 -e &apos;truncate table weatherDB.wind&apos; # 4. 导入文件到数据库for file in $(ls $gfs_dir)do /usr/local/grib2/wgrib2/wgrib2 $gfs_dir/$file -mysql localhost wgrib2 &apos;wg#123&apos; weatherDB wind &gt;/dev/null 2&gt;&amp;1done ps：如果是使用Mariadb数据的话，还需要安装MariaDB-libs mysql-devel MariaDB-shared openssl-devel依赖 参考链接：http://blog.csdn.net/pch1982cn/article/details/74292772http://www.cpc.ncep.noaa.gov/products/wesley/wgrib2/index.htmlhttp://www.nco.ncep.noaa.gov/pmb/products/gfs/gfs.t00z.pgrb2f00.npoess.shtml数据下载地址:ftp://ftpprd.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/在线过滤要下载数据的地址:http://nomads.ncep.noaa.gov]]></content>
      <categories>
        <category>大气模型</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>wgrib2</tag>
        <tag>GFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装rlwrap，使SqlPlus工具支持上下左右键]]></title>
    <url>%2Farlo%2Fd9547628%2F</url>
    <content type="text"><![CDATA[SqlPlus 工具中默认不支持上下左右键调出历史命令，很不方便；需安装rlwrap。 安装依赖包yum -y install gcc libtermcap-devel readline readline-devel 获取安装文件wget https://fossies.org/linux/privat/rlwrap-0.43.tar.gz 安装rlwrap123tar xf rlwrap-0.43.tar.gzcd rlwrap-0.43/./configure &amp;&amp; make install 配置12su - oraclevim .bash_profile 123alias sqlplus=&apos;rlwrap sqlplus&apos;alias rman=&apos;rlwrap rman&apos;alias asmcmd=&apos;rlwrap asmcmd&apos; source .bash_profile 扩展，设置sqlplus登录提示符vim $ORACLE_HOME/sqlplus/admin/glogin.sql12set linesize 120 pagesize 9999SET SQLPROMPT &quot;_USER&apos;@&apos;_CONNECT_IDENTIFIER&gt; &quot;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>常识</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sonar代码质量管理工具安装]]></title>
    <url>%2Farlo%2F96c3f480%2F</url>
    <content type="text"><![CDATA[Sonar(SonarQube)是一款静态代码检查工具，采用B/S架构，帮助检查代码缺陷，改善代码质量，提高开发速度，通过插件形式，可以支持Java、C、C++、JavaScripe等等二十几种编程语言的代码质量管理与检测；通过客户端插件分析源代码，sonar客户端可以采用IDE插件、Sonar-Scanner插件、Ant插件和Maven插件方式，并通过各种不同的分析机制对项目源代码进行分析和扫描，并把分析扫描后的结果上传到sonar的数据库，通过sonar web界面对分析结果进行管理。可以从七个维度检测代码质量: 复杂度分布(complexity):代码复杂度过高将难以理解 重复代码(duplications):程序中包含大量复制、粘贴的代码而导致代码臃肿，sonar可以展示源码中重复严重的地方 单元测试统计(unit tests):统计并展示单元测试覆盖率，开发或测试可以清楚测试代码的覆盖情况 代码规则检查(coding rules):通过Findbugs,PMD,CheckStyle等检查代码是否符合规范 注释率(comments):若代码注释过少，特别是人员变动后，其他人接手比较难接手；若过多，又不利于阅读 潜在的Bug(potential bugs):通过Findbugs,PMD,CheckStyle等检测潜在的bug 结构与设计(architecture &amp; design):找出循环，展示包与包、类与类之间的依赖、检查程序之间耦合度 系统环境操作系统： CentOS 7.xMsql Server: 5.7.17Java ： JDK1.8Sonar ： sonarqube-6.7.1.zipSonar-scanner：sonar-scanner-cli-3.0.3.778-linux.zip 服务器安装安装MySQL服务器MariaDB 10.2在安装过程中检测为Mysql 5.5，不能满足需求wget http://download.softagency.net/MySQL/Downloads/MySQL-5.7/mysql-5.7.17-1.el7.x86_64.rpm-bundle.tartar xf mysql-5.7.17-1.el7.x86_64.rpm-bundle.taryum localinstall mysql-community-server-5.7.17-1.el7.x86_64.rpm mysql-community-client-5.7.17-1.el7.x86_64.rpm mysql-community-common-5.7.17-1.el7.x86_64.rpm mysql-community-client-5.7.17-1.el7.x86_64.rpm mysql-community-libs-5.7.17-1.el7.x86_64.rpmvim /etc/my.cnf123#[mysqld]下添加一行 innodb_buffer_pool_size = 128Mmax_allowed_packet = 128M 启动mysql服务systemctl start mysqld初始化mysql服务mysql_secure_installation默认密码在日志中可以看到创建sonar数据库和用户，并赋予权限mysql -uroot -p&#39;mysql_root_password&#39;123456789mysql&gt; select version();mysql5.7密码强度比较高，我们做实验调整一下；设置一下复杂度和长度mysql&gt; set global validate_password_policy=0;mysql&gt; set global validate_password_length=1;mysql&gt; CREATE DATABASE `sonar` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;mysql&gt; CREATE USER &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;sonar&apos;;mysql&gt; GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;%&apos;;mysql&gt; flush privileges;mysql -usonar -psonar -hlocalhost 安装JDK下载地址：http://www.oracle.com/technetwork/java/archive-139210.htmltar xf jdk-8u112-linux-x64.tar.gz -C /usr/local/vim /etc/profile添加以下三行环境变量123export JAVA_HOME=/usr/local/jdk1.8.0_112/export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH 安装sonar系统参数配置新建用户sonar 不允许以root用户启动useradd sonarecho sonar|passwd --stdin sonar修改内核参数sysctl -w vm.max_map_count=262144sysctl -w fs.file-max=65536修改用户文件打开最大数vim /etc/security/limits.conf12sonar hard nofile 65536sonar soft nofile 65536 下载地址：https://www.sonarqube.org/downloads/unzip sonarqube-6.7.1.zip -d /usr/local 配置sonarvim /usr/local/sonarqube-6.7.1/conf/sonar.properties123456sonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=falsesonar.web.host=0.0.0.0sonar.web.context=/sonarsonar.web.port=9000 vim /usr/local/sonarqube-6.7.1/conf/wrapper.conf1wrapper.java.command=/usr/local/jdk1.8.0_112/bin/java chown sonar.sonar /usr/local/sonarqube-6.7.1 -R切换至sonar用户下su - sonar可以将此路径加入到环境变量中cd /usr/local/sonarqube-6.7.1/bin/linux-x86-64./sonar.sh start可以监控/usr/local/sonarqube-6.7.1/logs目录下的log,第一次启动时间会长一些，因为要给数据库建表访问地址http://192.168.6.178:9000/sonar/默认用户名/密码: admin/admin安装一个中文插件，安装完成后重启 开启SCM 客户端SonarQube Scanner安装下载地址https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+ScannerSonarQube Scanner作为客户端，放在一个可以读取代码的位置即可，可以和SonarQube 服务端放在一台机器上，也可以分开部署； 配置sonarqube scanner我这里部署在本地windows系统上，将D:\Program Files (x86)\sonar-scanner-3.0.3.778-windows\bin加入到环境变量PATH中编辑D:\Program Files (x86)\sonar-scanner-3.0.3.778-windows\conf\sonar-scanner.properties配置文件123456789#Configure here general information about the environment, such as SonarQube DB details for example#No information about specific project should appear here#----- Default SonarQube serversonar.host.url=http://192.168.6.178:9000/sonarsonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:mysql://192.168.6.178:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false#----- Default source code encodingsonar.sourceEncoding=UTF-8 配置项目在项目代码根目录下新建一个sonar-project.properties文件,内容如下sonar.projectKey和sonar.projectName自己定义即可。123456789101112# must be unique in a given SonarQube instancesonar.projectKey=silu# this is the name and version displayed in the SonarQube UI. Was mandatory prior to SonarQube 6.1.sonar.projectName=sxappsonar.projectVersion=1.0 # Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.# This property is optional if sonar.modules is set. sonar.sources=.sonar.language=java# Encoding of the source code. Default is default system encodingsonar.sourceEncoding=UTF-8 客户端SonarQube Scanner使用用SonarQube Scanner分析在项目根目录下执行sonar-scanner即可开始代码监测在web页面上刷新一下就看到看到结果了Q:Please provide compiled classes of your project with sonar.java.binaries propertyA:这是因为sonar-java插件太新了，可以下载一个旧版本的插件进行替换https://sonarsource.bintray.com/Distribution/sonar-java-plugin/sonar-java-plugin-4.10.0.10260.jar下载完成后拷贝到C:\Users\nsxq.sonar\cache\2936e4ebd1e34b1646a3b66a51d30af7\ （类似这个）目录下，并修改名称为sonar-java-plugin-4.15.0.12310.jar(不要问我为什么要改成这个版本号，因为运行sonar-scanner提示是这个版本号) 用Maven调用SonarQube Scanner分析安装maven3下载地址http://apache.mirrors.lucidnetworks.net/maven/maven-3/下载完成解压后，配置环境变量，验证1234567mvn --versionApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)Maven home: D:\Program Files (x86)\apache-maven-3.3.9-bin\apache-maven-3.3.9\bin\..Java version: 1.8.0_141, vendor: Oracle CorporationJava home: C:\Program Files\Java\jdk1.8.0_141\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot; 配置maven全局设置settings.xml添加以下配置到本来的settings.xml12345678910111213141516171819&lt;settings&gt; &lt;pluginGroups&gt; &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt; &lt;/pluginGroups&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;sonar&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;!-- Optional URL to server. Default value is http://localhost:9000 --&gt; &lt;sonar.host.url&gt; http://myserver:9000 &lt;/sonar.host.url&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/settings&gt; 添加完成后，我的配置文件如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt; &lt;localRepository&gt;C:\Users\nsxq\.m2\repository\&lt;/localRepository&gt; &lt;pluginGroups&gt; &lt;pluginGroup&gt;org.sonarsource.scanner.maven&lt;/pluginGroup&gt; &lt;/pluginGroups&gt; &lt;servers&gt; &lt;server&gt; &lt;username&gt;test&lt;/username&gt; &lt;password&gt;test&lt;/password&gt; &lt;id&gt;THSArtifactory&lt;/id&gt; &lt;/server&gt; &lt;/servers&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;ths-repos&lt;/name&gt; &lt;url&gt;http://192.168.0.45/artifactory/ths-repos&lt;/url&gt; &lt;id&gt;THSArtifactory&lt;/id&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;repositories&gt; &lt;repository&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;ths-repos&lt;/name&gt; &lt;url&gt;http://192.168.0.45/artifactory/ths-repos&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt; &lt;snapshots /&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;name&gt;ths-repos&lt;/name&gt; &lt;url&gt;http://192.168.0.45/artifactory/ths-repos&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;ths-repos&lt;/name&gt; &lt;url&gt;http://192.168.0.45/artifactory/ths-repos&lt;/url&gt; &lt;/pluginRepository&gt; &lt;pluginRepository&gt; &lt;snapshots /&gt; &lt;id&gt;snapshots&lt;/id&gt; &lt;name&gt;ths-repos&lt;/name&gt; &lt;url&gt;http://192.168.0.45/artifactory/ths-repos&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;id&gt;artifactory&lt;/id&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;sonar&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;!-- Optional URL to server. Default value is http://localhost:9000 --&gt; &lt;sonar.host.url&gt; http://192.168.6.178:9000/sonar &lt;/sonar.host.url&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;artifactory&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 测试maven项目下载一个maven测试项目代码git clone https://github.com/SonarSource/sonar-scanning-examples.gitcd D:\sonar-scanning-examples\sonarqube-scanner-mavenmvn clean install sonar:sonarweb页面查看 用Jenkins调用SonarQube Scanner分析安装sonarqube插件系统管理–&gt;管理插件–&gt;可选插件SonarQube Scanner for JenkinsMashup Portlets 配置SonarQube servers系统管理–&gt;系统配置–&gt;SonarQube servers系统管理–&gt;全局工具配置–&gt;SonarQube ScannerJOB配置key,name,version三个字段是自定义的，sources路径是当前路径的话，用.表示就可以了；123456sonar.projectKey=ths.projectsonar.projectName=AirForcastsonar.projectVersion=1.0sonar.language=javasonar.java.binaries=./target/test-classes/ sonar.sources=. 点击查看监测结果！ 其他问题Q1：ERROR web[][o.s.s.p.Platform] Web server startup failed: Unsupported mysql version: 5.5. Minimal supported version is 5.6.A1:不要使用mariadb，mariadb10.2检测到是mysql5.5Q2:Native memory allocation (mmap) failed to map 42467328 bytes for committing reserved memory.A2:1.将虚拟机内存调整大，调整到4Gb；2.保证swap空间正常（我安装操作系统的时候没有设置swap分区，折腾了好一会儿）；3.修改此文件中的/usr/local/sonarqube-6.7.1/elasticsearch/config/jvm.options -Xms512m -Xmx512mQ3:mvn clean install sonar:sonar 上传分析数据时候报错。可以查看sonar日志web.log相关报错“Failed to upload report - 500: An error has occurred. Please contact your administrator”A3:1.修改mysqld参数max_allowed_packet = 128M2.重启mysqld服务3.重启sonarqube服务（一定要重启） 参考链接：https://docs.sonarqube.org/display/SONAR/Installing+the+Serverhttps://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scannerhttps://my.oschina.net/zxcholmes/blog/1529732https://www.ibm.com/developerworks/cn/devops/1612_qusm_jenkins/index.html]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Sonar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bginfo--Windows系统信息显示工具]]></title>
    <url>%2Farlo%2Fea6f862b%2F</url>
    <content type="text"><![CDATA[经常维护多台Windows服务器，在服务器之间来回切换，经常容易搞混，为大家推荐一个维护利器BGinfo。 修改配置文件下载地址：https://download.sysinternals.com/files/BGInfo.zip下载、解压完成后，双击Bginfo64,同意即可价值默认信息；这里是我觉得平时会用到的参数信息。123456789101112131415主机名称: &lt;Host Name&gt;系统版本: &lt;OS Version&gt;服务补丁包: &lt;Service Pack&gt;系统启动时间: &lt;Boot Time&gt;当前用户名: &lt;User Name&gt;------------------------------CPU: &lt;CPU&gt;内存: &lt;Memory&gt;磁盘可用空间: &lt;Free Space&gt;------------------------------IP Address: &lt;IP Address&gt;MAC Address: &lt;MAC Address&gt;Subnet Mask: &lt;Subnet Mask&gt;Default Gateway: &lt;Default Gateway&gt;DNS Server: &lt;DNS Server&gt; 点击file-save as 保存D:\BGInfo为名为systeminfo.cgiBackground：可以定义直接在当前壁纸上显示、指定一个壁纸路径或纯色显示。Position：可配置信息输出位置（9个选项）以及多显示器输出支持(偏爱右上)Desktops：用于配置用户远程登录、控制台登录时的显示方式Preview：预览配置效果 配置开机启动12341. 在windows资源管理器输入shell:startup 快速打开当前用户的「启动」文件夹2. 新建一个.bat文件，内容为D:\BGInfo\Bginfo64.exe systeminfo.bgi /timer:0 /nolicprompt /silent PS: 此工具很方便，但是不能根据系统信息，自行刷新，可以添加计划任务进行刷新。 此工具大规模部署建议使用域环境操作。 参考链接：https://docs.microsoft.com/en-us/sysinternals/downloads/bginfohttps://www.sysgeek.cn/bginfo/]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>bginfo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署office在线预览服务器(Office Web Apps Server)]]></title>
    <url>%2Farlo%2F5b552504%2F</url>
    <content type="text"><![CDATA[Office Web Apps Server 是一种 Office 服务器产品，可提供在浏览器中查看和编辑 Office 文件的服务。可提供浏览器版 Word、PowerPoint、Excel 和 OneNote。 环境网络环境123服务器名 ip地址dc.islocal.cc 192.168.6.111apps.islocal.cc 192.168.6.112 软件环境12345操作系统 Windows Server 2012 R2 Standard .NET Framework 4.5.2Office Web Apps Server cn_office_web_apps_server_2013_with_sp1_x64_dvd_3832995.isoOffice Web Apps Server SP1 wacserversp2013-kb2880558-fullfile-x64-glb.exe语言包 wacserverlanguagepack.exe 规划 Office Web Apps ServerOffice Web Apps Server 支持的操作系统您可以在以下操作系统上运行 Office Web Apps Server： 安装了 Windows Server 2008 R2 x64 版本更新的 64 位版本 Windows Server 2008 R2 Service Pack 1 (SP1) Standard、Enterprise 或 DatacenterWindows Server 2012 Standard 或 Datacenter 的 64 位版本64 位版本的 Windows Server 2012 R2。若要使用此操作系统，则必须使用 Office Web Apps Server Service Pack 1 (SP1)。 Office Web Apps Server 的域要求Office Web Apps Server 场中的服务器都必须是域的一部分。它们可以在同一个域 （推荐） 中或位于同一个林中的不同域中。但是，如果您尝试在域控制器上安装它，Office Web Apps Server 将不起作用。 Office Web Apps Server 需要的服务器角色、服务及其他软件首先，以下是部署 Office Web Apps Server 时不应执行的一些操作。 请勿在运行 Office Web Apps Server 的服务器上安装任何其他服务器应用程序。包括 Exchange Server、SharePoint Server、Lync Server 和 SQL Server。如果您的服务器不足，则可以在这些服务器的其中一台上的虚拟机实例中运行 Office Web Apps Server。不要在端口 80、443 或 809 上安装依赖 Web 服务器 (IIS) 角色的任何服务或角色，因为 Office Web Apps Server 会定期删除这些端口上的 Web 应用程序。不要安装任何版本的 Office。如果已经安装，在安装 Office Web Apps Server 之前必须将其卸载。不要在域控制器上安装 Office Web Apps Server。它不会在包含 Active Directory 域服务 (AD DS) 的服务器上运行。 搭建域控服务器(DC)打开服务器管理，添加角色和功能默认下一步基于角色或基于功能的安装从服务器池中选择服务器，可以看到本机名称和ip地址勾选“DNS服务器”和“Active Directory域服务”默认下一步最后确认一下所有选择，开始安装安装完成服务器管理器-AD DS- 将此服务器升级为域控制器添加新林，输入根域名islocal.cc设置一个目录服务还原模式密码至此，与控制搭建工作已经完成！ owa服务器加入域控apps服务器上操作设置apps服务器ip地址，将dns地址设置为域控地址192.168.6.111点击系统属性-计算机名-更改-域-输入域名；输入域控服务器的用户名密码，成功加入，重启服务器 域控上操作服务器管理器-管理-添加服务器输入服务器名称，添加到计算机在所有服务器可以看到已经添加完成使用域管理员登录apps服务器，登录格式为：用户名：islocal\administrator，密码：域管理员密码加入域后，ping不通服务器，服务器本地关闭域防火墙 owa软件安装安装.NET Framework 4.5.2下载地址 https://www.microsoft.com/zh-cn/download/details.aspx?id=42643 安装IIS参考本文贴的第一张图，一定要安装全iis组件。 以管理员身份打开 Windows PowerShell 提示符，然后运行此命令示例来安装必需的角色和服务1Add-WindowsFeature Web-Server,Web-Mgmt-Tools,Web-Mgmt-Console,Web-WebServer,Web-Common-Http,Web-Default-Doc,Web-Static-Content,Web-Performance,Web-Stat-Compression,Web-Dyn-Compression,Web-Security,Web-Filtering,Web-Windows-Auth,Web-App-Dev,Web-Net-Ext45,Web-Asp-Net45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Includes,InkandHandwritingServices,NET-Framework-Features,NET-Framework-Core,NET-HTTP-Activation,NET-Non-HTTP-Activ,NET-WCF-HTTP-Activation45 安装Office Web Apps Server下载地址Office Web Apps Server1ed2k://|file|cn_office_web_apps_server_2013_with_sp1_x64_dvd_3832995.iso|530315264|C33F5E985FB1B7CC74A28FAA4857458C|/ 加载到本地光驱，双击setup.exe开始安装选择文件安装位置 安装Office Web Apps Server SP1补丁包（2012R2必须项）下载地址：https://support.microsoft.com/zh-cn/help/2880558/description-of-microsoft-office-web-apps-server-service-pack-1-sp1 安装语言包下载地址：https://www.microsoft.com/zh-cn/download/details.aspx?id=35490 owa服务器配置导入OfficeWebApps模块1Import-Module -Name OfficeWebApps 创建一个Office Web Apps Server12New-OfficeWebAppsFarm -InternalURL http://192.168.6.112 -AllowHttp -EditingEnabledSet-OfficeWebAppsFarm -OpenFromUrlEnabled:$true 验证安装结果http://192.168.6.112/hosting/discoveryhttp://192.168.6.112/op/generate.aspx这里的测试文档URL必须使用域名，IP地址会报错“很抱歉，由于某种原因不能为您打开。如果是本地定义的域名，只需要在预览服务器上添加一条hosts即可。 其他解决方案 Collabora Onlinehttps://www.collaboraoffice.com/collabora-online/ ONLYOFFICEhttps://helpcenter.onlyoffice.com/server/document.aspx 永中DCShttp://dcs.yozosoft.com/examples.html idocvhttps://www.idocv.com 百度https://cloud.baidu.com/product/doc.html 参考链接：https://technet.microsoft.com/zh-cn/library/jj219455.aspxhttp://www.cnblogs.com/timelyxyz/p/3645134.htmlhttp://blog.csdn.net/duanchuanttao/article/details/53467060http://blog.csdn.net/ituff/article/details/23880431]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>域控</tag>
        <tag>office</tag>
        <tag>在线预览</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scp拷贝大文件出现stalled故障解决方法]]></title>
    <url>%2Farlo%2F8954c4ab%2F</url>
    <content type="text"><![CDATA[最近倒腾oracle数据库异地备份，由于端口限制不能使用rsync（首选），只能使用scp脚本自动拷贝到本地服务器，数据库按用户备份的，最大一个文件53G，发现每次都拷贝不完就中断了；之前以为是网络的问题导致shell退出，今天开了screen，手动执行脚本，特地跟踪了一下，发现出现stalled的故障；网上有找到的方法有以下几种，个人认为第三种更治根。 限速scp -l 1000 /from/path /to/path #单位为Kbit，1000Kbit/8=125Kb 修改内核参数echo 0 &gt; /proc/sys/net/ipv4/tcp_sack 调整mtu值由于我的网络是PPPoE拨号的，最佳mtu值应为1492ifconfig eth0 mtu 1492orip link set dev eth0 mtu 1492 参考资料https://www.gpforums.co.nz/threads/399001-MTU-Value-1492-vs-1500https://stackoverflow.com/questions/11985008/sending-a-large-file-with-scp-to-a-certain-server-stalls-at-exactly-2112-kbhttp://www.tp-link.com/tw/article/?faqid=190http://www.cnblogs.com/wjoyxt/p/6873714.html]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>Linux</tag>
        <tag>Scp</tag>
        <tag>MTU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle表空间扩容]]></title>
    <url>%2Farlo%2F989e9822%2F</url>
    <content type="text"><![CDATA[在新装完的oracle数据库中导入数据，由于数据量比较大，报以下错误；12ORA-39171: Job is experiencing a resumable wait.ORA-01653: unable to extend table AIR_FORECAST.T_WRF_DATA by 8192 in tablespace USERS 此故障是由于数据库的表空间满了，造成的数据无法正常导入，我们需要手动来扩容表空间 查询当前实例名1select instance_name from v$instance; 查询表空间名1select tablespace_name from sys.dba_tablespaces; 查询默认表空间12345select a.property_name, a.property_value from database_properties a where a.property_name like &apos;%DEFAULT%&apos;;……DEFAULT_PERMANENT_TABLESPACEUSERS…… 查看表空间使用情况在PL SQL Developer 中执行一下SQL语句1SELECT a.tablespace_name &quot;表空间名&quot;,a.bytes / 1024 / 1024 &quot;表空间大小(M)&quot;,(a.bytes - b.bytes) / 1024 / 1024 &quot;已使用空间(M)&quot;,b.bytes / 1024 / 1024 &quot;空闲空间(M)&quot;,round(((a.bytes - b.bytes) / a.bytes) * 100, 2) &quot;使用比&quot;FROM (SELECT tablespace_name, sum(bytes) bytes FROM dba_data_files GROUP BY tablespace_name) a,(SELECT tablespace_name, sum(bytes) bytes, max(bytes) largest FROM dba_free_space GROUP BY tablespace_name) b WHERE a.tablespace_name = b.tablespace_name ORDER BY ((a.bytes - b.bytes) / a.bytes) DESC 查看USERS表空间文件及使用量1SELECT file_name,tablespace_name,bytes / 1024 / 1024 &quot;bytes MB&quot;,maxbytes / 1024 / 1024 &quot;maxbytes MB&quot; FROM dba_data_files WHERE tablespace_name = &apos;USERS&apos;; 查看USERS表空间文件是否自动扩展1SELECT file_id, file_name, tablespace_name, autoextensible, increment_by FROM dba_data_files WHERE tablespace_name = &apos;USERS&apos; ORDER BY file_id desc; 查看”autoextensible”对应的值是YES还是NO，若是NO，说明MSMS表空间的自动扩展功能没有开，改成YES就可以了。 查询所有的schema所占空间大小1select owner, sum(bytes)/1024/1024/1024 schema_size_gig from sys.dba_segments group by owner; 增加表空间文件查看表空间文件1SELECT * FROM dba_data_files t WHERE t.tablespace_name=&apos;USERS&apos;; 查看得知我们的表空间文件在/u01/app/oracle/oradata/sx21/目录下，新建的文件也放在此目录下,方便后期管理 查看表空间文件自增长文件最大值因为Oracle的物理文件最大只允许4194303个数据块(datablock).需要查看一下本地block块大小123456数据块的大小 物理文件的最大值 M=============================================== 2048 8191 M4096 16383 M8192 32767 M16384 65535 M 查看oracle数据库block大小123456789101112在sqlplus窗口中执行SQL&gt; show parameter db_block_size;NAME TYPE VALUE------------------------------------ ----------- ------------------------------db_block_size integer 8192在pl/SQL窗口中执行SQL&gt; select value from v$parameter where name=&apos;db_block_size&apos;;VALUE--------------------------------------------------------------------------------8192 添加表空间文件1SQL&gt; alter tablespace USERS add datafile &apos;/u01/app/oracle/oradata/sx21/users02.dbf&apos; size 5M autoextend on maxsize 32767M; ASM添加表空间文件12SQL&gt; alter tablespace USERS add datafile &apos;+DATA&apos; size 5M autoextend on maxsize 32767M;SQL&gt; select name from v$datafile; 注意：ASM增加数据文件或者创建表空间不需要指定数据文件名，只要指定 diskgroup即可,ASM会自动命名。 验证添加的表空间文件1234567891011SQL&gt; select file_name,file_id,tablespace_name FROM dba_data_files WHERE tablespace_name=&apos;USERS&apos;;FILE_NAME-------------------------------------------------------------------------------- FILE_ID TABLESPACE_NAME---------- ------------------------------/u01/app/oracle/oradata/sx21/users01.dbf 4 USERS/u01/app/oracle/oradata/sx21/users02.dbf 5 USERS 扩展阅读http://www.dba-oracle.com/t_bigfile_tablespace_tips.htm 参考资料：http://blog.csdn.net/u013806814/article/details/48400861http://blog.itpub.net/27042095/viewspace-1100993/http://blog.sina.com.cn/s/blog_9d4799c701017pw1.htmlhttps://blog.csdn.net/qq_33547950/article/details/79257882]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6.9环境静默安装Oracle11g]]></title>
    <url>%2Farlo%2F6dacbf16%2F</url>
    <content type="text"><![CDATA[系统基础环境操作系统：CentOS 6.9 x64Iptables：offSelinux：disabled 修改主机名安装oracle后不要修改主机名，会引起故障123vim /etc/sysconfig/networkNETWORKING=yesHOSTNAME=&quot;dbserver&quot; 1hostname dbserver 添加一条hosts记录，主机名映射1127.0.0.1 dbserver 基础软件安装1234567891011121314151617181920212223242526#默认是不安装32位软件包的，添加此选项echo &apos;multilib_policy=all&apos; &gt;&gt; /etc/yum.confyum -y install binutils-* compat-libstdc++-* elfutils-libelf-* elfutils-libelf-devel-* gcc-* gcc-c++-* glibc-* glibc-common-* glibc-devel-* glibc-headers-* ksh-* libaio-* libaio-devel-* libgcc-* libstdc++* libstdc++-devel* make-* sysstat-* unixODBC-* unixODBC-devel-* mksh#监测一下软件是否安装全rpm -q \binutils \compat-libstdc++-33 \elfutils-libelf \elfutils-libelf-devel \expat \gcc \gcc-c++ \glibc \glibc-common \glibc-devel \glibc-headers \libaio \libaio-devel \libgcc \libstdc++ \libstdc++-devel \make \pdksh \sysstat \unixODBC \unixODBC-devel | grep &quot;not installed&quot; 修改PAM配置文件123vim /etc/pam.d/loginsession required /lib64/security/pam_limits.sosession required pam_limits.so 修改内核参数1234567891011121314vim /etc/sysctl.conffs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048586#重新加载生效sysctl –p 修改系统资源限制123456vim /etc/security/limits.conf oracle soft nproc 2047 oracle hard nproc 16384 oracle soft nofile 1024 oracle hard nofile 65536oracle soft stack 10240 Oracle相关环境配置新建用户12345groupadd -g 500 oinstallgroupadd -g 501 dbauseradd -u 500 -g oinstall -G dba oracle#设置oracle用户密码为oracleecho &quot;oracle:oracle&quot; | chpasswd 修改用户配置文件123456789vim /etc/profileif [ $USER = &quot;oracle&quot; ]; then if [ $SHELL = &quot;/bin/ksh&quot; ]; then ulimit -p 16384 ulimit -n 65536 else ulimit -u 16384 -n 65536 fifi 新建目录并设置权限12345mkdir -p /u01/app/oracle/product/11.2.0/db_1mkdir -p /u01/app/oraInventorychown -R oracle.oinstall /u01/app/oraclechown -R oracle.oinstall /u01/app/oraInventorychmod -R 775 /u01/app 设置oracle用户环境变量12345678su - oracle$ vim ~/.bash_profile export ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1export ORACLE_SID=sx21export PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport NLS_LANG=American_America.ZHS16GBK 检查环境变量是否生效12345source ~/.bash_profileenv |grep ORAORACLE_SID=sx21ORACLE_BASE=/u01/app/oracleORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1 准备软件安装包下载地址: http://www.oracle.com/technetwork/database/enterprise-edition/downloads/112010-linx8664soft-100572.html可以使用cksum校验文件完整性linux.x64_11gR2_database_1of2.zip (1,239,269,270 bytes) (cksum - 3152418844)linux.x64_11gR2_database_2of2.zip (1,111,416,131 bytes) (cksum - 3669256139) 解压软件包12unzip linux.x64_11gR2_database_1of2.zipunzip linux.x64_11gR2_database_2of2.zip 解压后得到/home/oracle/database/response目录，该目录中有三个rsp文件，用来作为静默安装时的应答文件的模板。备份三个文件并修改其内容123db_install.rsp 安装应答netca.rsp 建立监听、本地服务名等网络设置的应答dbca.rsp 创建数据库应答 静默安装数据库软件修改db_install.rsp 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354egrep -v &quot;^#|^$&quot; db_install.rsporacle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v11_2_0oracle.install.option=INSTALL_DB_SWONLYORACLE_HOSTNAME=dbserverUNIX_GROUP_NAME=oinstallINVENTORY_LOCATION=/u01/app/oraInventorySELECTED_LANGUAGES=en,zh_CNORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1ORACLE_BASE=/u01/app/oracle/oracle.install.db.InstallEdition=EEoracle.install.db.EEOptionsSelection=falseoracle.install.db.optionalComponents=oracle.rdbms.partitioning:11.2.0.4.0,oracle.oraolap:11.2.0.4.0,oracle.rdbms.dm:11.2.0.4.0,oracle.rdbms.dv:11.2.0.4.0,oracle.rdbms.lbac:11.2.0.4.0,oracle.rdbms.rat:11.2.0.4.0oracle.install.db.DBA_GROUP=dbaoracle.install.db.OPER_GROUP=dbaoracle.install.db.CLUSTER_NODES=oracle.install.db.isRACOneInstall=oracle.install.db.racOneServiceName=oracle.install.db.config.starterdb.type=oracle.install.db.config.starterdb.globalDBName=orcloracle.install.db.config.starterdb.SID=orcloracle.install.db.config.starterdb.characterSet=ZHS16GBKoracle.install.db.config.starterdb.memoryOption=trueoracle.install.db.config.starterdb.memoryLimit=81920oracle.install.db.config.starterdb.installExampleSchemas=falseoracle.install.db.config.starterdb.enableSecuritySettings=trueoracle.install.db.config.starterdb.password.ALL=solution#123$$oracle.install.db.config.starterdb.password.SYS=oracle.install.db.config.starterdb.password.SYSTEM=oracle.install.db.config.starterdb.password.SYSMAN=oracle.install.db.config.starterdb.password.DBSNMP=oracle.install.db.config.starterdb.control=DB_CONTROLoracle.install.db.config.starterdb.gridcontrol.gridControlServiceURL=oracle.install.db.config.starterdb.automatedBackup.enable=falseoracle.install.db.config.starterdb.automatedBackup.osuid=oracle.install.db.config.starterdb.automatedBackup.ospwd=oracle.install.db.config.starterdb.storageType=oracle.install.db.config.starterdb.fileSystemStorage.dataLocation=oracle.install.db.config.starterdb.fileSystemStorage.recoveryLocation=oracle.install.db.config.asm.diskGroup=oracle.install.db.config.asm.ASMSNMPPassword=MYORACLESUPPORT_USERNAME=MYORACLESUPPORT_PASSWORD=SECURITY_UPDATES_VIA_MYORACLESUPPORT=DECLINE_SECURITY_UPDATES=truePROXY_HOST=PROXY_PORT=PROXY_USER=PROXY_PWD=PROXY_REALM=COLLECTOR_SUPPORTHUB_URL=oracle.installer.autoupdates.option=oracle.installer.autoupdates.downloadUpdatesLoc=AUTOUPDATES_MYORACLESUPPORT_USERNAME=AUTOUPDATES_MYORACLESUPPORT_PASSWORD= 执行静默安装12345678910$ pwd/home/oracle/database./runInstaller -silent -ignorePrereq -ignoreSysPrereqs -responseFile /home/oracle/database/response/db_install.rspStarting Oracle Universal Installer...Checking Temp space: must be greater than 120 MB. Actual 26363 MB PassedChecking swap space: must be greater than 150 MB. Actual 4095 MB PassedPreparing to launch Oracle Universal Installer from /tmp/OraInstall2017-12-27_02-06-55PM. Please wait ...[oracle@dbserver database]$ You can find the log of this install session at: /u01/app/oraInventory/logs/installActions2017-12-27_02-06-55PM.log 安装过程中可以另开一个窗口跟踪查看日志123456789101112tailf /u01/app/oraInventory/logs/installActions2017-12-27_02-06-55PM.log……INFO: Completed validating state &lt;finish&gt;INFO: Terminating all background operationsINFO: Terminated all background operationsINFO: Successfully executed the flow in SILENT modeINFO: Finding the most appropriate exit status for the current applicationINFO: Exit Status is 0INFO: Shutdown Oracle Database 11g Release 2 InstallerINFO: Unloading Setup Driver 123456789101112 #!/bin/sh #Root scripts to run/u01/app/oraInventory/orainstRoot.sh/u01/app/oracle/product/11.2.0/db_1/root.shTo execute the configuration scripts: 1. Open a terminal window 2. Log in as &quot;root&quot; 3. Run the scripts 4. Return to this window and hit &quot;Enter&quot; key to continue Successfully Setup Software. 一直到主窗口出现以上提示，以root用户打开一个窗口，一次执行下面操作123456789[root@dbserver ~]# /u01/app/oraInventory/orainstRoot.shChanging permissions of /u01/app/oraInventory.Adding read,write permissions for group.Removing read,write,execute permissions for world.Changing groupname of /u01/app/oraInventory to oinstall.The execution of the script is complete.[root@dbserver ~]# /u01/app/oracle/product/11.2.0/db_1/root.shCheck /u01/app/oracle/product/11.2.0/db_1/install/root_dbserver_2017-12-27_14-23-43.log for the output of root script 静默安装监听使用默认配置文件，不用修改12345678910111213141516$ORACLE_HOME/bin/netca /silent /responseFile /home/oracle/database/response/netca.rspParsing command line arguments: Parameter &quot;silent&quot; = true Parameter &quot;responsefile&quot; = /home/oracle/database/response/netca.rspDone parsing command line arguments.Oracle Net Services Configuration:Profile configuration complete.Oracle Net Listener Startup: Running Listener Control: /u01/app/oracle/product/11.2.0/db_1/bin/lsnrctl start LISTENER Listener Control complete. Listener started successfully.Listener configuration complete.Oracle Net Services configuration successful. The exit code is 0 默认监听是开启状态1234567891011121314151617181920212223[oracle@dbserver database]$ lsnrctl statusLSNRCTL for Linux: Version 11.2.0.1.0 - Production on 27-DEC-2017 14:26:34Copyright (c) 1991, 2009, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))STATUS of the LISTENER------------------------Alias LISTENERVersion TNSLSNR for Linux: Version 11.2.0.1.0 - ProductionStart Date 27-DEC-2017 14:25:48Uptime 0 days 0 hr. 0 min. 50 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.oraListener Log File /u01/app/oracle/diag/tnslsnr/dbserver/listener/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521))) (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=dbserver)(PORT=1521)))The listener supports no servicesThe command completed successfully 静默新建实例修改dbca.rsp配置这里只需要修改[CREATEDATABASE]部分即可，其他的保持默认123456789101112131415161718192021222324252627282930313233$ egrep -v &quot;^#|^$&quot; dbca.rsp [GENERAL]RESPONSEFILE_VERSION = &quot;11.2.0&quot;OPERATION_TYPE = &quot;createDatabase&quot;[CREATEDATABASE]GDBNAME = &quot;sx21&quot;SID = &quot;sx21&quot;TEMPLATENAME = &quot;General_Purpose.dbc&quot;SYSPASSWORD = &quot;solution#123&quot;SYSTEMPASSWORD = &quot;solution#123&quot;CHARACTERSET = &quot;ZHS16GBK&quot;NATIONALCHARACTERSET= &quot;AL16UTF16&quot;[createTemplateFromDB]SOURCEDB = &quot;myhost:1521:orcl&quot;SYSDBAUSERNAME = &quot;system&quot;TEMPLATENAME = &quot;My Copy TEMPLATE&quot;[createCloneTemplate]SOURCEDB = &quot;orcl&quot;TEMPLATENAME = &quot;My Clone TEMPLATE&quot;[DELETEDATABASE]SOURCEDB = &quot;orcl&quot;[generateScripts]TEMPLATENAME = &quot;New Database&quot;GDBNAME = &quot;orcl11.us.oracle.com&quot;[CONFIGUREDATABASE][ADDINSTANCE]DB_UNIQUE_NAME = &quot;orcl11g.us.oracle.com&quot;NODELIST=SYSDBAUSERNAME = &quot;sys&quot;[DELETEINSTANCE]DB_UNIQUE_NAME = &quot;orcl11g.us.oracle.com&quot;INSTANCENAME = &quot;orcl11g&quot;SYSDBAUSERNAME = &quot;sys&quot; 执行静默安装不清楚是什么原因，我执行静默安装命令，屏幕就一直闪烁，不能输入密码，所以我将密码写到dbca.rsp文件中了，可以避免此问题！12345678910111213141516171819202122232425262728$ORACLE_HOME/bin/dbca -silent -responseFile /home/oracle/database/response/dbca.rspCopying database files1% complete2% complete4% complete37% completeCreating and starting Oracle instance38% complete40% complete45% complete50% complete51% complete56% complete57% complete61% complete62% completeCompleting Database Creation66% complete70% complete73% complete74% complete85% complete86% complete98% complete100% completeLook at the log file &quot;/u01/app/oracle/cfgtoollogs/dbca/sx21/sx21.log&quot; for further details. 验证安装结果进程1234567891011121314151617181920212223[oracle@dbserver app]$ ps -ef |grep ora_oracle 5432 1 0 17:02 ? 00:00:00 ora_pmon_sx21oracle 5434 1 0 17:02 ? 00:00:00 ora_vktm_sx21oracle 5438 1 0 17:02 ? 00:00:00 ora_gen0_sx21oracle 5440 1 0 17:02 ? 00:00:00 ora_diag_sx21oracle 5442 1 0 17:02 ? 00:00:00 ora_dbrm_sx21oracle 5444 1 0 17:02 ? 00:00:00 ora_psp0_sx21oracle 5446 1 0 17:02 ? 00:00:00 ora_dia0_sx21oracle 5448 1 0 17:02 ? 00:00:01 ora_mman_sx21oracle 5450 1 0 17:02 ? 00:00:00 ora_dbw0_sx21oracle 5452 1 0 17:02 ? 00:00:00 ora_lgwr_sx21oracle 5454 1 0 17:02 ? 00:00:00 ora_ckpt_sx21oracle 5456 1 0 17:02 ? 00:00:00 ora_smon_sx21oracle 5458 1 0 17:02 ? 00:00:00 ora_reco_sx21oracle 5460 1 0 17:02 ? 00:00:00 ora_mmon_sx21oracle 5462 1 0 17:02 ? 00:00:00 ora_mmnl_sx21oracle 5464 1 0 17:02 ? 00:00:00 ora_d000_sx21oracle 5466 1 0 17:02 ? 00:00:00 ora_s000_sx21oracle 5558 1 0 17:02 ? 00:00:00 ora_qmnc_sx21oracle 5575 1 0 17:02 ? 00:00:00 ora_cjq0_sx21oracle 5579 1 0 17:02 ? 00:00:00 ora_q000_sx21oracle 5581 1 0 17:02 ? 00:00:00 ora_q001_sx21oracle 5585 1550 0 17:04 pts/0 00:00:00 grep ora_ 监听123456789101112131415161718192021222324252627[oracle@dbserver app]$ lsnrctl statusLSNRCTL for Linux: Version 11.2.0.1.0 - Production on 27-DEC-2017 17:04:44Copyright (c) 1991, 2009, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))STATUS of the LISTENER------------------------Alias LISTENERVersion TNSLSNR for Linux: Version 11.2.0.1.0 - ProductionStart Date 27-DEC-2017 16:49:14Uptime 0 days 0 hr. 15 min. 32 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /u01/app/oracle/product/11.2.0/db_1/network/admin/listener.oraListener Log File /u01/app/oracle/diag/tnslsnr/dbserver/listener/alert/log.xmlListening Endpoints Summary... (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521))) (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=dbserver)(PORT=1521)))Services Summary...Service &quot;sx21&quot; has 1 instance(s). Instance &quot;sx21&quot;, status READY, has 1 handler(s) for this service...Service &quot;sx21XDB&quot; has 1 instance(s). Instance &quot;sx21&quot;, status READY, has 1 handler(s) for this service...The command completed successfully 连接12345678910111213141516171819202122[oracle@dbserver app]$ sqlplus /nologSQL*Plus: Release 11.2.0.1.0 Production on Wed Dec 27 17:05:57 2017Copyright (c) 1982, 2009, Oracle. All rights reserved.SQL&gt; conn /as sysdbaConnected.SQL&gt; shutdown immediateDatabase closed.Database dismounted.ORACLE instance shut down.SQL&gt; startupORACLE instance started.Total System Global Area 3340451840 bytesFixed Size 2217952 bytesVariable Size 1811941408 bytesDatabase Buffers 1509949440 bytesRedo Buffers 16343040 bytesDatabase mounted.Database opened. 静默删除数据库实例1dbca -silent -deleteDatabase -sourcedb orcl -sid orcl -sysDBAUserName sys -sysDBAPassword password 扩展配置由于默认审计日志默认是开启状态，长时间使用后会早上SYSTEM表空间撑爆，磁盘占用率高，建议关闭sqlplus / as sysdba1234SQL&gt; show parameter audit_trailSQL&gt; alter system set audit_trail=none scope=spfile;SQL&gt; shutdown immediate;SQL&gt; startup 错误解析[WARNING] - My Oracle Support Username/Email Address Not SpecifiedDECLINE_SECURITY_UPDATES=true [FATAL] [INS-10101] The given response file response/db_install.rsp is not found.响应文件写为绝对路径/usr/local/src/oracle/database/response/db_install.rsp [FATAL] [INS-00001] Unknown irrecoverable error设置的密码中不能有% 常用语句12345678910111213141516171819202122232425262728293031--创建表空间CREATE TABLESPACE TS_TENV datafile &apos;/u01/app/oracle/oradata/monitor/ts_tenv01.dbf&apos; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 32767M EXTENT MANAGEMENT LOCAL;CREATE TABLESPACE TS_WEATHER datafile &apos;/u01/app/oracle/oradata/monitor/ts_weather01.dbf&apos; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 32767M EXTENT MANAGEMENT LOCAL;--创建临时表空间CREATE TEMPORARY TABLESPACE TS_TENV_TEMP TEMPFILE &apos;/u01/app/oracle/oradata/monitor/ts_tenv_temp01.dbf&apos; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 2048m EXTENT MANAGEMENT LOCAL;CREATE TEMPORARY TABLESPACE TS_WEATHER_TEMP TEMPFILE &apos;/u01/app/oracle/oradata/monitor/ts_weather_temp01.dbf&apos; SIZE 200m AUTOEXTEND ON NEXT 32m MAXSIZE 2048m EXTENT MANAGEMENT LOCAL;创建用户指定默认表空间--新建用户CREATE USER TENV IDENTIFIED BY tenv#123 DEFAULT TABLESPACE TS_TENV TEMPORARY TABLESPACE TS_TENV;CREATE USER WEATHER IDENTIFIED BY weather#123 DEFAULT TABLESPACE TS_WEATHER TEMPORARY TABLESPACE TS_WEATHER;--如果先新建用户了，使用以下命令修改默认表空间alter user TENV default tablespace TS_TENV;alter user WEATHER default tablespace TS_WEATHER;--授权连接权限GRANT CONNECT TO TENV; GRANT CONNECT TO WEATHER; --授权表空间GRANT UNLIMITED TABLESPACE TO TENV;GRANT UNLIMITED TABLESPACE TO WEATHER;--修改密码有效期为永久ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED ;SELECT * FROM dba_profiles WHERE profile=&apos;DEFAULT&apos; AND resource_name=&apos;PASSWORD_LIFE_TIME&apos;;--解锁账号alter user 用户名 identified by 原密码;alter user db_user account unlock;--查看每个用户连接数select username,count(username) from v$session where username is not null group by username; 参考文档：https://www.jianshu.com/p/b4200e721bfdhttp://blog.51cto.com/wzlinux/1710941]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[枚举卷期间出错: 客户端无法连接到请求中指定的目标……]]></title>
    <url>%2Farlo%2F143cd09f%2F</url>
    <content type="text"><![CDATA[存储：华为/OceanStor 2600 V3网络：FC服务器：Windows Server 2012 R2更新系统补丁重启后连接存储提示以下错误： 枚举存储期间出错。枚举卷期间出错: 客户端无法连接到请求中指定的目标。 请验证该目标上的服务是否正在运行以及是否正在接受请求。 有关目标(通常是 IIS 或 WinRM)上运行的 WS 管理服务，请查阅日志和文档。 如果目标是 WinRM 服务，则在目标上运行以下命令来分析和配置 WinRM 服务: “winrm quickconfig”。 这个错误应该跟 WinRM 服务有关，找到服务启用“ Windows Remote Management（WinRM）”服务后恢复正常;顺便设置服务为开机自启动。]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>华为</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建ftp服务器并配置虚拟用户登录]]></title>
    <url>%2Farlo%2F5cd2f164%2F</url>
    <content type="text"><![CDATA[vsftpd 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。本次搭建ftp服务器，采用虚拟用户登录；所谓虚拟用户就是没有使用真实的系统用户，只是通过映射到真实的账户和设置权限的目的。虚拟用户不能登录操作系统。 系统环境CentOS 6.9SELinux disabled 软件安装1yum -y install db4 db4-utils vsftpd 创建虚拟用户的宿主用户1useradd -u 600 -d /data/ftproot -s /sbin/nologin slvftp 创建用户名密码文件12345vim account.txtslftp1xxxxxxslftp2yyyyyy 生成虚拟用户认证文件1234db_load -T -t hash -f ./account.txt /etc/vsftpd/account.db#安全原因，修改认证文件权限chmod 600 /etc/vsftpd/account.db#执行完此操作，建议删除account.txt 配置认证文件1234vim /etc/pam.d/vsftpd.slauth required /lib64/security/pam_userdb.so db=/etc/vsftpd/accountaccount required /lib64/security/pam_userdb.so db=/etc/vsftpd/account#我这里是64位的操作系统，写的是/lib64,如果是32位的操作系统，写成/lib即可 修改配置文件12345678910111213141516171819202122232425262728293031323334vim /etc/vsftpd/vsftpd.conf#虚拟用户权限与匿名用户权限相同，虚拟用户权限单独设定virtual_use_local_privs=NO#服务器独立运行listen=YES#设定不允许匿名访问anonymous_enable=NO#设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问local_enable=YES#使用户不能离开主目录chroot_list_enable=YESchroot_list_enable=YESchroot_list_file=/etc/vsftpd/chroot_list#设定支持ASCII模式的上传和下载功能ascii_upload_enable=YESascii_download_enable=YES#PAM认证文件名。PAM将根据/etc/pam.d/vsftpd.sl进行认证pam_service_name=vsftpd.sl#设定启用虚拟用户功能guest_enable=YES#指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了guest_username=slvftp#设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名)user_config_dir=/etc/vsftpd/user_config/#配置vsftpd日志（可选）xferlog_enable=YESxferlog_std_format=YESxferlog_file=/var/log/xferlogdual_log_enable=YESvsftpd_log_file=/var/log/vsftpd.log#开启被动(PASV)模式pasv_enable=yespasv_min_port=10240pasv_max_port=10250 新建chroot_list空文件1touch /etc/vsftpd/chroot_list 创建虚拟用户的配置目录文件1234567891011121314151617181920212223mkdir /etc/vsftpd/user_config/#虚拟用户配置文件名必须与用户名一致vim /etc/vsftpd/user_config/slftp1guest_username=slvftp #虚拟用户的宿主用户local_root=/data/ftproot/slftp1 #虚拟用户根目录local_enable=YESwrite_enable=YES #写权限anon_umask=022anon_world_readable_only=NOanon_upload_enable=YES #上传权限anon_mkdir_write_enable=YES #创建文件夹权限anon_other_write_enable=YES #其他权限##############vim /etc/vsftpd/user_config/slftp2guest_username=slvftplocal_root=/data/ftproot/slftp2local_enable=YESwrite_enable=YESanon_umask=022anon_world_readable_only=NOanon_upload_enable=YESanon_mkdir_write_enable=YESanon_other_write_enable=YES 创建ftp根目录123mkdir -pv /data/ftproot/slftp&#123;1,2&#125;chmod 700 -R /data/ftprootchown slvftp.slvftp -R /data/ftproot 重启vsftp服务1/etc/init.d/vsftpd restart 防火墙开放端口123456789iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT iptables -A INPUT -p icmp -j ACCEPT iptables -A INPUT -i lo -j ACCEPT iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT#主要是下边这两条iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPTiptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 10240:10250 -j ACCEPT#所有允许规则应该在这条之前iptables -A INPUT -j REJECT --reject-with icmp-host-prohibited 测试12yum -y install lftplftp user:passwd@127.0.0.1 参考文档：https://dumplings.cc/bu-shu-vsftpyu-pei-zhi-xu-ni-yong-hu-deng-lu/]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>vsftp</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle RAC环境搭建(Oracle Linux 6.9+Oracle 11g R2+FreeNas)]]></title>
    <url>%2Farlo%2Fe07eb088%2F</url>
    <content type="text"><![CDATA[捣腾Oracle RAC环境已经半月有余，从对RAC一无所知到环境搭建成功，期间遇到很多坑，填了很多坑；特写此篇，记录一下搭建的过程，以备忘！话不多说，开干！网络环境：网络分为三个部分，Public网络用于访问业务应用，Priv网络用于检测心跳，Storge网络用于连接存储；VIP，rac-scan网络应与Public网络在同一网段12345主机名 Public网络 Priv网络 Storge网络 VIPrac1 192.168.100.11 172.16.10.11 172.16.20.11 92.168.100.21rac2 192.168.100.12 172.16.10.12 172.16.20.12 192.168.100.22rac-scan 192.168.100.23freenas 172.16.20.13 软件环境：Oracle Linux6.9GridOracle Database 11gASMlibFreeNas RAC搭建分为五个部分： 基础环境准备 共享存储搭建 网络搭建 Grid 安装 Database 安装 基础环境准备基础环境如无特别指明，都是需要在两台机器上操作的。 虚拟机环境搭建虚拟机资源配置rac1:4核/8G/200Grac2:4核/8G/200Gfreenas:2核/2G/100G+(200G+200G+20G+20G) 网络环境配置1234567虚拟机名称 网卡1 网卡2 网卡3rac1 VMnet1(NAT模式) VMnet2(仅主机模式) VMnet3(仅主机模式)rac2 VMnet1(NAT模式) VMnet2(仅主机模式) VMnet3(仅主机模式)freenas VMnet1(NAT模式)VMnet1:192.168.100.0/24VMnet2:172.16.10.0/24VMnet3:172.16.20.0/24 操作系统安装安装图形界面环境(过程略……) 操作系统配置修改主机名rac112vim /etc/sysconfig/networkHOSTNAME=rac1 rac212vim /etc/sysconfig/networkHOSTNAME=rac2 配置hosts123456789101112131415127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4########public#######192.168.100.11 rac1192.168.100.12 rac2#######priv#########172.16.10.11 rac1-priv172.16.10.12 rac2-priv######vip###########192.168.100.21 rac1-vip192.168.100.22 rac2-vip192.168.100.23 rac-scan172.16.20.13 freenas 配置时间同步关闭ntpd服务，使用oracle自身的集群时间同步12345678cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtimentpdate cn.ntp.org.cnvim /etc/sysconfig/ntpdSYNC_HWCLOCK=yesOPTIONS=&quot;-x -u ntp:ntp -p /var/run/ntpd.pid&quot;/etc/init.d/ntpd stopchkconfig ntpd offmv /etc/ntp.conf /etc/ntp.conf.bak 基础软件安装1234567891011121314151617181920212223242526#默认是不安装32位软件包的，添加此选项echo &apos;multilib_policy=all&apos; &gt;&gt; /etc/yum.confyum -y install binutils-* compat-libstdc++-* elfutils-libelf-* elfutils-libelf-devel-* gcc-* gcc-c++-* glibc-* glibc-common-* glibc-devel-* glibc-headers-* libaio-* libaio-devel-* libgcc-* libstdc++* libstdc++-devel* make-* sysstat-* unixODBC-* unixODBC-devel-* ksh-* mksh pdksh#监测一下软件是否安装全rpm -q \binutils \compat-libstdc++-33 \elfutils-libelf \elfutils-libelf-devel \expat \gcc \gcc-c++ \glibc \glibc-common \glibc-devel \glibc-headers \libaio \libaio-devel \libgcc \libstdc++ \libstdc++-devel \make \pdksh \sysstat \unixODBC \unixODBC-devel | grep &quot;not installed&quot; 修改PAM配置文件12vi /etc/pam.d/loginsession required /lib64/security/pam_limits.so 设置内核参数1234567891011121314vi /etc/sysctl.conffs.aio-max-nr = 1048576 fs.file-max = 6815744 kernel.shmmni = 4096 kernel.sem = 250 32000 100 128 net.ipv4.ip_local_port_range = 9000 65500 net.core.rmem_default = 262144 net.core.rmem_max = 4194304 net.core.wmem_default = 262144 net.core.wmem_max = 1048586重新加载生效sysctl –p 创建用户grid1234567groupadd -g 1000 oinstall groupadd -g 1001 asmadmin groupadd -g 1002 asmdba groupadd -g 1003 asmoperuseradd -u 1100 -g oinstall -G asmadmin,asmdba,asmoper -d /home/grid -s /bin/bash grid#设置密码grid用户密码为oracleecho oracle|passwd --stdin grid 配置grid用户环境变量RAC1：123456789101112131415161718su - grid#vi .bash_profile#export PS1=&quot;`/bin/hostname -s`-&gt;&quot;export TMP=/tmpexport TMPDIR=$TMPexport ORACLE_SID=+ASM1export ORACLE_BASE=/u01/app/gridexport ORACLE_HOME=/u01/app/11.2.0/gridexport TNS_ADMIN=$ORACLE_HOME/network/adminexport PATH=/usr/sbin:$PATHexport PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport LANG=en_US.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK#使配置文件生效source .bash_profile RAC2：123456789101112131415161718su - grid#vi .bash_profile#export PS1=&quot;`/bin/hostname -s`-&gt;&quot;export TMP=/tmpexport TMPDIR=$TMPexport ORACLE_SID=+ASM2export ORACLE_BASE=/u01/app/gridexport ORACLE_HOME=/u01/app/11.2.0/gridexport TNS_ADMIN=$ORACLE_HOME/network/adminexport PATH=/usr/sbin:$PATHexport PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport LANG=en_US.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK#使配置文件生效source .bash_profile 创建用户oracle123456su - rootgroupadd -g 1200 dbagroupadd -g 1201 operuseradd -u 1101 -g oinstall -G dba,oper,asmdba -d /home/oracle -s /bin/bash oracle#设置密码grid用户密码为oracleecho oracle|passwd --stdin oracle 配置oracle用户环境变量RAC1：1234567891011121314151617181920su - oracle#vi .bash_profile#export PS1=&quot;`/bin/hostname -s`-&gt;&quot;export TMP=/tmpexport TMPDIR=$TMPexport ORACLE_HOSTNAME=rac1export ORACLE_SID=orcl1export ORACLE_UNQNAME=orclexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/11gexport TNS_ADMIN=$ORACLE_HOME/network/adminexport PATH=/usr/sbin:$PATHexport PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport LANG=en_US.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK#使配置文件生效source .bash_profile RAC2：1234567891011121314151617181920su - oracle#vi .bash_profile#export PS1=&quot;`/bin/hostname -s`-&gt;&quot;export TMP=/tmpexport TMPDIR=$TMPexport ORACLE_HOSTNAME=rac2export ORACLE_SID=orcl2export ORACLE_UNQNAME=orclexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/11gexport TNS_ADMIN=$ORACLE_HOME/network/adminexport PATH=/usr/sbin:$PATHexport PATH=$PATH:$ORACLE_HOME/binexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport LANG=en_US.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK#使配置文件生效source .bash_profile 创建目录，修改权限12345678910su - rootmkdir -p /u01/app/grid mkdir -p /u01/app/11.2.0/gridchown -R grid:oinstall /u01chown -R grid:oinstall /u01/app/11.2.0/gridmkdir -p /u01/app/oraclechown -R oracle:oinstall /u01/app/oraclechmod -R 775 /u01export LANG=en_US.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK 配置profile12345678910vim /etc/profileif [ \$USER = &quot;oracle&quot; ] || [ \$USER = &quot;grid&quot; ];then if [ \$SHELL = &quot;/bin/ksh&quot; ];then ulimit -p 16384 ulimit -n 65536 else ulimit -u 16384 -n 65536 fi umask 022 fi 修改Oracle用户限制1234567891011121314vi /etc/security/limits.conforacle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536oracle soft stack 10240oracle hard stack 32768grid soft nproc 2047grid hard nproc 16384grid soft nofile 1024grid hard nofile 65536grid soft stack 10240grid hard stack 32768 ssh 互信1234su - gridssh-keygen (一路回车)ssh-copy-id -i rac2ssh-copy-id -i rac1 1234su - oraclessh-keygen (一路回车)ssh-copy-id -i rac2ssh-copy-id -i rac1 测试一下1234ssh rac1 dateThu Nov 23 14:00:03 CST 2017ssh rac2 dateThu Nov 23 14:00:24 CST 2017 使用FreeNas搭建iscsi存储安装操作系统使用FreeNAS-9.2.1.7-RELEASE-x64.iso镜像搭建NAS存储，一块系统磁盘，四块存储盘选择1 Install/Upgrade 安装FreeNAS选择第一块系统磁盘全新安装(虚拟机环境之前安装过，新环境应该没有这一步)安装警告，例行问候，选择Yes安装完成重启系统 配置网络提示是否删除现有的配置，输入n是否配置DHCP，输入n；是否配置IPv4,输入y；输入ip地址、子网掩码；是否配置IPv6,输入n配置完成后，即可通过url来管理freenas，访问地址为http://172.16.20.13新版本第一次登录会让修改密码ps:如果密码忘记，可以在刚才的步骤里选择7）Reset WebGUI login credentials，在此步骤可以输入新密码 配置iscsi设置中文语言，上海时区开启iSCSI服务配置全局目标，设置iSCSI名称iqn.2017-11.cc.islocal.istgt配置Portals配置初始的授权配置授权用户grid添加iscsi目标设备依次添加4块存储磁盘关联添加的存储设备为LUN 安装Grid Infrastructure 如果使用Centos6.x操作系统安装rac，建议使用UEK内核;uek内核是Oracle Linux、Oracle Database、中间件和硬件工程师团队合作的结果，是一个快速、现代、可靠的内核，专门针对Oracle软件和硬件进行了优化。随着硬件的快速发展，为了更好的兼容并支持快速发展的硬件，Linux系统版本及内核也在不断的更新，uek正是在这样的环境下应运而生的产物。安装uek内核可以参考以下文档https://docs.oracle.com/cd/E37670_01/E37355/html/ol_obtain_uek.htmlhttps://docs.oracle.com/cd/E52668_01/E39381/html/ol_import_gpg.htmlhttp://www.oracle.com/technetwork/server-storage/linux/asmlib/index-101839.html ASM 分区创建方法一：使用ASMlib创建ASM分区12yum -y install oracleasm-support oracle-rdbms-server-11gR2-preinstallrpm -ivh http://download.oracle.com/otn_software/asmlib/oracleasmlib-2.0.12-1.el6.x86_64.rpm 上传linux.x64_11gR2_grid.zip到/usr/local/src目录下1234cd /usr/local/src/unzip linux.x64_11gR2_grid.zip/usr/local/src/grid/rpmrpm -ivh cvuqdisk-1.0.7-1.rpm 初始化asmRAC112345678910111213141516[root@rac1 rpm]# /etc/init.d/oracleasm configure -iConfiguring the Oracle ASM library driver.This will configure the on-boot properties of the Oracle ASM librarydriver. The following questions will determine whether the driver isloaded on boot and what permissions it will have. The current valueswill be shown in brackets (&apos;[]&apos;). Hitting &lt;ENTER&gt; without typing ananswer will keep that current value. Ctrl-C will abort.Default user to own the driver interface [grid]: gridDefault group to own the driver interface [oinstall]: oinstallStart Oracle ASM library driver on boot (y/n) [y]: yScan for Oracle ASM disks on boot (y/n) [y]: yWriting Oracle ASM library driver configuration: doneInitializing the Oracle ASMLib driver: [ OK ]Scanning the system for Oracle ASMLib disks: [ OK ] 1/usr/sbin/oracleasm init RAC212345678910111213141516[root@rac2 src]# /etc/init.d/oracleasm configure -iConfiguring the Oracle ASM library driver.This will configure the on-boot properties of the Oracle ASM librarydriver. The following questions will determine whether the driver isloaded on boot and what permissions it will have. The current valueswill be shown in brackets (&apos;[]&apos;). Hitting &lt;ENTER&gt; without typing ananswer will keep that current value. Ctrl-C will abort.Default user to own the driver interface [grid]: gridDefault group to own the driver interface [oinstall]: oinstallStart Oracle ASM library driver on boot (y/n) [y]: yScan for Oracle ASM disks on boot (y/n) [y]: yWriting Oracle ASM library driver configuration: doneInitializing the Oracle ASMLib driver: [ OK ]Scanning the system for Oracle ASMLib disks: [ OK ] 配置iscsi客户端1yum -y install iscsi-initiator-utils 12[root@rac1 rpm]# iscsiadm -m discovery -t sendtargets -p 172.16.20.13172.16.20.13:3260,1 iqn.2017-11.cc.islocal.istgt:iscsi 123[root@rac1 rpm]# /etc/init.d/iscsi restartStopping iscsi: [ OK ]Starting iscsi: [ OK ] iscsi命令拓展查看iscsi target信息123iscsiadm -m node -p ip_addriscsiadm -m node session -p ip_addriscsiadm -m node discovery -P ip_addr 登录target连接1iscsiadm -m node -T iqn.2017-11.cc.islocal.istgt:iscsi -p ip_addr -l 登出target连接1iscsiadm -m node -T iqn.2017-11.cc.islocal.istgt:iscsi -p ip_addr -u 删除target条目记录1iscsiadm -m node -o delete -T iqn.2017-11.cc.islocal.istgt:iscsi -p ip_addr 磁盘分区fdisk -l 可以发现已经识别到4个磁盘sdb,sdc,sdd,sde,对磁盘进行分区“n/p/1/回车/回车/w” 创建ASM分区1234/etc/init.d/oracleasm createdisk ASMDATA /dev/sdb1/etc/init.d/oracleasm createdisk BACKUP /dev/sdc1/etc/init.d/oracleasm createdisk OCR /dev/sdd1/etc/init.d/oracleasm createdisk VOTINGDISK /dev/sde1 1234567[root@rac1 rpm]# /etc/init.d/oracleasm scandisksScanning the system for Oracle ASMLib disks: [ OK ][root@rac1 rpm]# /etc/init.d/oracleasm listdisksASMDATABACKUPOCRVOTINGDISK 在rac2上发现asm磁盘1yum -y install iscsi-initiator-utils 12[root@rac2 rpm]# iscsiadm -m discovery -t sendtargets -p 172.16.20.13172.16.20.13:3260,1 iqn.2017-11.cc.islocal.istgt:iscsi 123[root@rac2 rpm]# /etc/init.d/iscsi restartStopping iscsi: [ OK ]Starting iscsi: [ OK ] 123456789[root@rac2 ~]# start_udev Starting udev: [ OK ][root@rac2 src]# /etc/init.d/oracleasm scandisksScanning the system for Oracle ASMLib disks: [ OK ][root@rac2 src]# /etc/init.d/oracleasm listdisksASMDATABACKUPOCRVOTINGDISK 方法二：使用udev方式创建ASM分区配置iscsi客户端1yum -y install iscsi-initiator-utils 12[root@rac1 rpm]# iscsiadm -m discovery -t sendtargets -p 172.16.20.13172.16.20.13:3260,1 iqn.2017-11.cc.islocal.istgt:iscsi 123[root@rac1 rpm]# /etc/init.d/iscsi restartStopping iscsi: [ OK ]Starting iscsi: [ OK ] 将ASM磁盘添加到udev，防止开始发现磁盘顺序不一致导致的异常问题12345678[root@rac1 ~]# /sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/sdb13300000007a38757b[root@rac1 ~]# /sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/sdc13300000008853f678[root@rac1 ~]# /sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/sdd13300000009b03058c[root@rac1 ~]# /sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/sde13300000006968868f 12345[root@rac1 rules.d]# vim 99-iscsi-asm.rulesKERNEL==&quot;sd*&quot;, BUS==&quot;scsi&quot;, PROGRAM==&quot;/sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;, RESULT==&quot;3300000007a38757b&quot;, NAME=&quot;asm-data&quot;, OWNER=&quot;grid&quot;, GROUP=&quot;oinstall&quot;, MODE=&quot;0660&quot;KERNEL==&quot;sd*&quot;, BUS==&quot;scsi&quot;, PROGRAM==&quot;/sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;, RESULT==&quot;3300000008853f678&quot;, NAME=&quot;asm-backup&quot;, OWNER=&quot;grid&quot;, GROUP=&quot;oinstall&quot;, MODE=&quot;0660&quot;KERNEL==&quot;sd*&quot;, BUS==&quot;scsi&quot;, PROGRAM==&quot;/sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;, RESULT==&quot;3300000009b03058c&quot;, NAME=&quot;asm-ocr&quot;, OWNER=&quot;grid&quot;, GROUP=&quot;oinstall&quot;, MODE=&quot;0660&quot;KERNEL==&quot;sd*&quot;, BUS==&quot;scsi&quot;, PROGRAM==&quot;/sbin/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;, RESULT==&quot;3300000006968868f&quot;, NAME=&quot;asm-vdisk&quot;, OWNER=&quot;grid&quot;, GROUP=&quot;oinstall&quot;, MODE=&quot;0660&quot; 123[root@rac1 rules.d]# scp 99-iscsi-asm.rules rac2:/etc/udev/rules.d/99-iscsi-asm.rules[root@rac1 rules.d]# start_udev Starting udev: [ OK ] 12345[root@rac1 rules.d]# ll /dev/asm-*brw-rw---- 1 grid asmadmin 8, 33 Nov 23 17:48 /dev/asm-backupbrw-rw---- 1 grid asmadmin 8, 17 Nov 23 17:48 /dev/asm-databrw-rw---- 1 grid asmadmin 8, 49 Nov 23 17:48 /dev/asm-ocrbrw-rw---- 1 grid asmadmin 8, 65 Nov 23 17:48 /dev/asm-vdisk 在rac2上发现asm磁盘1yum -y install iscsi-initiator-utils 12[root@rac2 rpm]# iscsiadm -m discovery -t sendtargets -p 172.16.20.13172.16.20.13:3260,1 iqn.2017-11.cc.islocal.istgt:iscsi 123[root@rac2 rpm]# /etc/init.d/iscsi restartStopping iscsi: [ OK ]Starting iscsi: [ OK ] 12[root@rac2 ~]# start_udev Starting udev: [ OK ] 12345[root@rac2 ~]# ll /dev/asm-*brw-rw---- 1 grid asmadmin 8, 33 Nov 23 17:54 /dev/asm-backupbrw-rw---- 1 grid asmadmin 8, 17 Nov 23 17:54 /dev/asm-databrw-rw---- 1 grid asmadmin 8, 49 Nov 23 17:54 /dev/asm-ocrbrw-rw---- 1 grid asmadmin 8, 65 Nov 23 17:54 /dev/asm-vdisk 安装Grid建议直接用grid用户登录图形桌面，而不是root登录su - grid切换过去。12rac1-&gt;cd /usr/local/src/gridrac1-&gt;./runcluvfy.sh stage -pre crsinst -n rac1,rac2 -fixup -verbose 安装前监测一下环境，如果有failed，按照要求去修复，我这里有几个软件包太新，不是太影响，我们就开始安装吧。执行./runInstaller，开始安装安装和配置一个GI集群高级安装添加中文支持取消GNS选项，保持SCAN Name和hosts里配置的一样添加rac2根据之前配置的网络，配置网络类型选择ASM存储这里遇到几个几个坑，详细说一下吧；1.如果默认没有在候选磁盘(Candidate Disks)里,选择所有磁盘(All disks),看看是否可以显示出来；2.如果还是没有发现，点一下改变其他路径(Change Discovery Path),rhel系列系统默认路径是/dev/raw/\, 我这里是/dev/asm-*;3.如果磁盘显示出来是灰色，不能选择，可能是练习的时候，之前已经使用过磁盘做过asm了，可以执行“dd if=/dev/zero of=/dev/rhdisk2 bs=1024 count=100”，然后重新开始安装试试，如果还不行，请从存储方面开始排查；4.我这里配置的udev方式发现保证磁盘的唯一性，现在发现一个问题，start_udev后可以发现磁盘，/dev/asm-*都生成了；执行oraclescandisk后发现不了ASM磁盘，/dev/oracleasm/disks/目录下是空的，但是安装时候找到了，是可用状态，有点小疑惑。*ASM提供三种冗余模式，我们使用External；ASM三种模式后期学习了，在单独写一篇吧。选择Yes默认默认的三个组默认安装路径忽略ALL所有的配置信息安装完成，使用root账号依次在rac1，rac2上执行脚本;如果你执行root.sh出现以下错误，恭喜你！这个问题折磨了我太久，后来在网上看到这是一个bug！1234CRS-4124: Oracle High Availability Services startup failed.CRS-4000: Command Start failed, or completed with errors.ohasd failed to start: Inappropriate ioctl for deviceohasd failed to start at /opt/app/11.2.0/grid/crs/install/rootcrs.pl line 443. 此错误解决方法123删除之前的配置：/u01/app/11.2.0/grid/crs/install/roothas.pl -deconfig -force -verbose窗口1：/u01/app/11.2.0/grid/root.sh窗口2：/bin/dd if=/var/tmp/.oracle/npohasd of=/dev/null bs=1024 count=1 （刚开始执行root.sh时候，还没生成npohash文件，等日志出现“Adding daemon to inittab”的时候，在窗口2中使用root用户执行此命令，等root.sh执行成功后，ctrl+c结束此命令即可） 出现以下提示，方为脚本执行成功。1234567Configure Oracle Grid Infrastructure for a Cluster ... succeededUpdating inventory properties for clusterwareStarting Oracle Universal Installer...Checking swap space: must be greater than 500 MB. Actual 7999 MB PassedThe inventory pointer is located at /etc/oraInst.locThe inventory is located at /u01/app/oraInventory 这个错误没事，直接点击Next完成安装 验证安装状态123456789su - gridcrs_stat -tcrsctl check cluster -allolsnodes -s -n -tcrsctl check crssrvctl status asmsrvctl status scansrvctl status vip -n rac1srvctl status scan_listener 创建ASM磁盘组在grid 用户下，执行 asmca，启动 asm 磁盘组创建向导DATA组，存放数据文件，包括/dev/asm-data,/dev/asm-backup;VOTINGDISK组，存放闪回文件，包含/dev/asm-vdiskDisk Groups，点击create 按钮，在弹出的创建界面中填写磁盘组名称，选择external(none)，并勾选成员，选择完毕后点击 ok；确认stat为2 of 2时,退出asmca 安装oracle11gr2 database 软件建议直接用oracle用户登录图形桌面，而不是root登录su - oracle切换过去。这个安装过程也很简单，基本上和单机版的一样；12rac1-&gt;cd /usr/local/src/databaserac1-&gt;./runInstaller 创建和配置一个数据库服务器模式选择rac集群中的节点高级安装添加中文支持服务器版本默认安装路径一般用途实例名称，SID名称(ps:这里的截图稍微有点问题，sid应该是orcl，不是orcl1)自动分配内存选择中文字符集连接asm存储的密码不备份选择DATA磁盘组设置sys/system密码默认管理组监测依赖配置信息安装完成依次执行脚本12345Entries will be added to the /etc/oratab file as needed byDatabase Configuration Assistant when a database is createdFinished running generic part of root.sh script.Now product-specific root actions will be performed.Finished product-specific root actions. 12sqlplus system/oracle@orclselect inst_id,instance_number,instance_name from gv$instance; 参考资料：http://v.qq.com/vplus/91c845f5c21fd8a6a25e9827b38c171ehttp://www.dba-oracle.com/t_reset_an_asm_diskgroup.htmhttp://www.oracle.com/technetwork/cn/articles/hunter-rac11gr2-iscsi-083834-zhs.htmlhttp://blog.csdn.net/u010098331/article/details/50767353https://docs.oracle.com/cd/E11882_01/doc.112/e28441/require.htm#CDMIG110http://blog.sina.com.cn/s/blog_563c17780102ux53.htmlhttps://blogs.oracle.com/database4cn/11gr2-crsgrid-scansingle-client-access-name]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>集群</tag>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>RAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows组策略几个问题小计]]></title>
    <url>%2Farlo%2F9bdfcc8c%2F</url>
    <content type="text"><![CDATA[桌面没有“计算机”开始-运行-输入以下内容1rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0 注册表编辑被管理员禁用第一步：打开组策略窗口，开始-运行-gptdit.msc第二步：选择用户配置-管理模板-系统，双击系统选项找到【阻止访问注册表编辑工具】第三步：双击【阻止访问注册表编辑工具】选择已禁用，点击确定。第四步：在开始-运行输入regedit，打开注册表。 说明注册表已经可以访问了。 服务灰色，无法正常使用MMC 在该文档中引用的管理单元受到策略限制第一步：开始-运行-regedit，启动注册表编辑器第二步：HKEY_CURRENT_USER\Software\Policies\Microsoft\MMC{58221C66-EA27-11CF-ADCF-00AA00A80033}\Restrict_Run，将值设为0 任务管理器无法正常使用第一步：打开组策略窗口，开始-运行-gptdit.msc第二步：选择用户配置-管理模板-系统-Ctrl+Alt+Del选项第三步：在该列表中打开 删除“任务管理器” 的属性，在 删除“任务管理器” 属性中的“设置”选项卡中点选“已禁用”，确定。 要远程登录，你需要具有通过远程桌面服务进行的登录权限要远程登录，你需要具有通过远程桌面服务进行的登录权限。默认情况下，远程桌面用户组的成员有这项权限。如果你所属的组没有这项权限，或者远程桌面用户组已经删除了这项权限，那么需要手动为你授予这一权限第一步：gpedit进入策略组:计算机配置-&gt;Windows设置-&gt;安全设置-&gt;本地策略-&gt;用户权限分配第二步：找到拒绝通过远程桌面服务登录,把里面的账号去了即可 修改远程登录3389端口第一步: 打开“开始→运行”，输入“regedit”，打开注册表，第二步: 进入[HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/Wds/rdpwd/Tds/tcp]，将PortNamber值(默认值是3389)，修改为新的端口，例如12389，注意使用十进制。第三部：进入[HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/Terminal Server/WinStations/RDP-Tcp]，将PortNumber值(默认是3389)修改为新的端口，如12389，注意使用十进制。 修改远程桌面最大连接数 打开组策略设置gpedit.msc–&gt;计算机配置–&gt;管理模板–&gt;Windows 组件–&gt;远程桌面服务–&gt;远程桌面会话主机–&gt;连接–&gt;限制连接数量 打开组策略设置gpedit.msc–&gt;计算机配置–&gt;管理模板–&gt;Windows 组件–&gt;远程桌面服务–&gt;远程桌面会话主机–&gt;连接–&gt;将远程桌面服务用户限制到单独的远程桌面服务会话(已禁用)Win10家庭版找不到gpedit.msc组策略复制一下内容，新建一个.bat文件，然后使用管理员身份运行1234567891011@echo offpushd &quot;%~dp0&quot;dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txtdir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txtfor /f %%i in (&apos;findstr /i . List.txt 2^&gt;nul&apos;) do dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;pause 出现身份验证错误，要求的函数不受支持在本地计算机上操作，非远程计算机！！！ 修改组策略解决此错误原因是检查更新了KB4103718的补丁造成的。 使用微软官方建议修改本地组策略： 开始运行输入gpedit.msc 计算机配置&gt;管理模板&gt;系统&gt;凭据分配&gt;加密Oracle修正 选择启用并选择易受攻击。 易受攻击– 使用 CredSSP 的客户端应用程序将通过支持回退到不安全的版本使远程服务器遭受攻击，但使用 CredSSP 的服务将接受未修补的客户端。 PS:该操作仅用于专业版，如果是家庭版请考虑升级(本人是家庭版，在X宝上买的key升级为专业版了);或者卸载KB4103718补丁重启。 修改注册表解决Windows10家庭版的用户，因为系统中没有组策略编辑器，需要修改注册表来实现。 开始-运行-输入 “regedit” 找到注册表路径：HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System\CredSSP\Parameters 一般系统下，大概到了System后面再没有后面的路径，需要自行手动新建\CredSSP\Parameters 先新建项“CredSSP”，然后在CredSSP下新建项“Parameters” 然后在“Parameters”下新建DWORD(32位)，名称为“AllowEncryptionOracle”，设置值为“2”。 然后进行尝试，如果不行，请重启一下自己的计算机。 Windows远程桌面密码不能保存 打开组策略设置gpedit.msc 计算机配置 &gt;&gt; 管理模板 &gt;&gt; 系统 &gt;&gt; 凭据分配 下面的 “允许分配保存的凭据用于仅NTLM服务器身份验证” 选择已启用，点击显示将TERMSRV/*添加到列表中 修复图片查看器复制以下内容，新建.reg文件 12345678910111213141516171819202122232425262728293031323334353637383940414243Windows Registry Editor Version 5.00 ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.jpg] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.jpeg] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.gif] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.png] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.bmp] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.tiff] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; ; Change Extension&apos;s File Type [HKEY_CURRENT_USER\Software\Classes\.ico] @=&quot;PhotoViewer.FileAssoc.Tiff&quot; 参考地址：http://ytweb.blog.51cto.com/5865824/1177266https://jingyan.baidu.com/article/3a2f7c2e6ab84626afd61114.htmlhttp://blog.sina.com.cn/s/blog_4298a2c80102vii4.htmlhttp://www.cnblogs.com/q149072205/p/6097433.htmlhttp://blog.csdn.net/flyingdream123/article/details/50724107http://www.soncs.com/NewsShow/144.html]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>组策略</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10无法正常连接sslvpn]]></title>
    <url>%2Farlo%2Fe72ff5d%2F</url>
    <content type="text"><![CDATA[环境Dell燃7000Win 10 64bitHangzhou DPtech Co.,Ltd. SSL VPN 现象1、无法创建虚拟网卡2、使用vpn自带的修复工具后驱动不对，“Windows 无法验证此设备所需的驱动程序的数字签名。该值受安全引导策略保护，无法进行修改或删除” 解决方法1、重新笔记本2、进入BIOS-Secure Boot，取消Windows UEFI模式3、删除Secure Key(可以备份一下，我没备份，删除后暂时未发现异常)4、重启后秒拨参考：http://www.cnblogs.com/easyc/p/6132581.html]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>vpn</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins使用Publish Over CIFS插件实现静态页面部署到Windows服务器]]></title>
    <url>%2Farlo%2F9a888771%2F</url>
    <content type="text"><![CDATA[发布静态内容操作很简单，一般分两步；一、获取svn内容。二、拷贝到服务器发布目录；以前静态内容都是在Linux环境下使用Nginx发布，持续集成发布的时候Hudson SCP publisher plugin,调用linux下Scp命令，通过SSH协议拷贝到发布目录就可以了；最近遇到一个问题，需要发布静态页面到Windows服务器下。不论是IIS，还是Nginx，也都存在一个拷贝内容到发布目录的问题，Windows下采取目录共享方式，通过CIFS协议拷贝。 共享发布目录共享nginx发布目录jzhome Nginx 配置文件修改1234567891011121314151617181920212223…… server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; location /mypic &#123; proxy_pass http://127.0.0.1:8888/mypic; &#125; location /JzAir &#123; proxy_pass http://127.0.0.1:9999/JzAir; &#125; location /Jzapp &#123; proxy_pass http://127.0.0.1:8080/Jzapp; &#125; location /jzhome &#123; root F:\\deploy\\nginx-1.12.1\\; index index.html index.htm; &#125;&#125;…… 安装Jenkins插件安装Publish Over CIFS插件，安装完成后重启Jenkins 配置CIFSJenkins-系统管理-系统配置-Publish over CIFS 配置JobJob-构建后步骤PS:这里有点比较难懂一点，Source files要一个能包含所有发布内容的父级目录，所以当发布内容为abc/html/xxx,我们在获取svn代码的时候，获取到abc这一层，这里Source files填写html/**,Remove prefix填写html,Remote directory为空，就可以将html目录下的所有内容发布到共享服务器上]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(6)监控SQL Server数据库]]></title>
    <url>%2Farlo%2F35d80780%2F</url>
    <content type="text"><![CDATA[监控SQL Server相对来说比较简单，首先我们下载一个MS SQL的模板文件下载地址：https://share.zabbix.com/databases/microsoft-sql-server/template-ms-sql-2012 修改zabbix_agent.conf文件添加下边这行到配置文件最后1UserParameter=sqldatabasename.discovery,powershell -NoProfile -ExecutionPolicy Bypass -File C:\zabbix\scripts\SQLBaseName_To_Zabbix.ps1 将powershell脚本放在目录下将SQLBaseName_To_Zabbix.ps1脚本放在C:\zabbix\scripts\目录下 重启zabbix agent重启客户端zabbix agent服务 导入模板文件导入模板MS SQL 2012.xml 关联模板 查看最新数据]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
        <tag>MSSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(5)通过JMX监控Tomcat]]></title>
    <url>%2Farlo%2Fe35d6a2a%2F</url>
    <content type="text"><![CDATA[Zabbix监控tomcat主要使用的是zabbix的zabbix-java-gateway。从Zabbix 2.0开始，内置了监控JMX的功能，叫做“Zabbix Java Gateway”，在Zabbix Server和Zabbix Proxy上启动名为“Zabbix Java Gateway”的进程，当需要获取JMX数据时，Zabbix Server会“问”JMX Gateway，然后JMX Gateway根据JMX管理API去查询需要的数据。在使用时，Java程序不需要在代码中新增任何东西，只需要在启动的时候加上一些JVM参数，使得它可以支持使用端口监控JMX。JMX的全称是Java Management Extensions，即Java管理扩展。Java程序会开放一些端口，用来获取运行状况。 安装jmx服务器安装jdk下载JDK配置环境变量 安装jmx服务1yum -y install zabbix-java-gateway 配置jmx服务123456egrep -v &apos;#|^$&apos; /etc/zabbix/zabbix_java_gateway.confLISTEN_IP=&quot;0.0.0.0&quot;LISTEN_PORT=10052PID_FILE=&quot;/var/run/zabbix/zabbix_java.pid&quot;START_POLLERS=5TIMEOUT=3 12systemctl start zabbix-java-gatewaysystemctl enable zabbix-java-gateway 修改zabbix server配置添加以下三行，这里配置的StartJavaPollers值要小于之前java_gateway中的START_POLLERS1234tail -n 3 /etc/zabbix/zabbix_server.conf JavaGateway=127.0.0.1JavaGatewayPort=10052 StartJavaPollers=3 修改zabbix_server.conf后重启服务1systemctl restart zabbix-server Tomcat配置修改修改配置文件Windows下tomcat在F:\apache-tomcat-7.0.70(zabbix)\bin\catalina.bat中set “CURRENT_DIR=%cd%”下添加以下内容12set CATALINA_OPTS=-Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false# 如果zabbix添加JMX后报错“java.net.SocketTimeoutException: connection timed out: service:jmx:rmi:///jndi/rmi:/” 添加此参数 -Djava.rmi.server.hostname=192.168.6.124 测试JMX下载以下两个jar包放在tomcat lib目录下。下载cmdline-jmxclient-0.10.3.jar下载catalina-jmx-remote.jar123456F:\apache-tomcat-7.0.70(zabbix)\lib&gt;java -jar cmdline-jmxclient-0.10.3.jar - 192.168.6.124:12345 java.lang:type=Memory NonHeapMemoryUsage10/10/2017 16:31:57 +0800 org.archive.jmx.Client NonHeapMemoryUsage:committed: 24838144init: 12746752max: 100663296used: 24806392 在zabbix web页面中添加JMX端口导入模板zabbix自带的”Template App Generic Java JMX”和”Template App Apache Tomcat JMX”模板很多都获取不到数据，从网上找了个模板，监控项不多，但是都是很实用的。 添加JMX端口jmx的端口一定要与在catalina.bat下配置的jmxremote.port一样 关联模板 查看图形 参考链接：http://wzlinux.blog.51cto.com/8021085/1692444http://blog.csdn.net/jhfsdfs/article/details/65629174http://www.fblinux.com/?p=616]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle删除用户报错ORA-01940: cannot drop a user that is currently connected]]></title>
    <url>%2Farlo%2Fdd79d161%2F</url>
    <content type="text"><![CDATA[oracle导入数据之前，删除用户时候报错“ORA-01940: cannot drop a user that is currently connected”，原因是因为用户正在连接使用。12345SQL&gt; drop user air_forecast cascade;drop user air_forecast cascade*ERROR at line 1:ORA-01940: cannot drop a user that is currently connected 查询一下当前用户连接12345SQL&gt; select sid,serial# from v$session where username=&apos;AIR_FORECAST&apos;; SID SERIAL#---------- ---------- 237 2083 252 3564 杀掉占用进程1234567SQL&gt; alter system kill session &apos;237,2083&apos;;System altered.SQL&gt; alter system kill session &apos;252,3564&apos;;System altered. 删除用户1234SQL&gt; drop user air_forecast cascade;User dropped. PS：上述语句中没有状态列，所以看到删除的进程还在，其实是已经标记为KILLED状态了(status 为要删除用户的session状态，如果还为inactive，说明没有被kill掉，如果状态为killed，说明已kill)，删除进程后使用如下语句查询.1select saddr,sid,serial#,paddr,username,status from v$session where username is not null; 导入用户数据12SQL&gt; select * from dba_directories; #查询存储文件目录，将备份文件拷贝到此目录下shell&gt; impdp userid=&quot;&apos;sys/password@sx21 as sysdba&apos;&quot; schemas=air_forecast directory=DATA_PUMP_DIR dumpfile=AIR_FORECAST.DMP]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库错误表SYS.AUD$无法通过8192(在表空间SYSTEM中)扩展]]></title>
    <url>%2Farlo%2F1998d04e%2F</url>
    <content type="text"><![CDATA[数据库报错信息123456[Content]ORA-00604: 递归 SQL 级别 1 出现错误ORA-01653: 表 SYS.AUD$ 无法通过 8192 (在表空间 SYSTEM 中) 扩展ORA-02002: 写入审计线索时出错ORA-00604: 递归 SQL 级别 1 出现错误ORA-01653: 表 SYS.AUD$ 无法通过 8192 (在表空间 SYSTEM 中) 扩展 该错误原因为表空间无法扩展故障，查找后得知单个表空间文件最大32G，有两个方法扩大表空间（1）创建多个数据文件，都不能超过32g（2）创建大表空间。create bigfile tablespace 他的上限是8EB，不过，oracle10及以后版本才能用。这里我们使用第一种方法处理一下此故障。 Windows下切换SID12345678C:\Users\Administrator&gt;SET ORACLE_SID=sx21C:\Users\Administrator&gt;sqlplus /nologSQL&gt; conn /as sysdba# 查询当前实例SQL&gt; select instance_name from v$instance；INSTANCE_NAME----------------sx21 增加一个表空间文件1234# 查询表空间路径SQL&gt; SELECT FILE_NAME,TABLESPACE_NAME,AUTOEXTENSIBLE FROM dba_data_files WHERE TABLESPACE_NAME=&apos;SYSTEM&apos;;# 在同路径目录下添加一个表空间文件SQL&gt; ALTER TABLESPACE &quot;SYSTEM&quot; ADD DATAFILE &apos;E:\APP\ADMINISTRATOR\ORADATA\SX21\SYSTEM02.DBF&apos; SIZE 1000M AUTOEXTEND ON NEXT 50M MAXSIZE UNLIMITED; 执行完成后重新查看表空间使用情况1SQL&gt; SELECT UPPER(F.TABLESPACE_NAME) &quot;表空间名&quot;, D.TOT_GROOTTE_MB &quot;表空间大小(M)&quot;, D.TOT_GROOTTE_MB - F.TOTAL_BYTES &quot;已使用空间(M)&quot;, TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100,2),&apos;990.99&apos;) &quot;使用比&quot;, F.TOTAL_BYTES &quot;空闲空间(M)&quot;, F.MAX_BYTES &quot;最大块(M)&quot; FROM (SELECT TABLESPACE_NAME, ROUND(SUM(BYTES) / (1024 * 1024), 2) TOTAL_BYTES, ROUND(MAX(BYTES) / (1024 * 1024), 2) MAX_BYTES FROM SYS.DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) F, (SELECT DD.TABLESPACE_NAME, ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB FROM SYS.DBA_DATA_FILES DD GROUP BY DD.TABLESPACE_NAME) D WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME ORDER BY 4 DESC; 参考链接：http://www.jydba.net/oracle数据文件大小的限制/]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>Troubleshooting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(4)通过orabbix插件监控Oracle数据库]]></title>
    <url>%2Farlo%2F780360a7%2F</url>
    <content type="text"><![CDATA[DBforBIX可以支持市面上主流的数据库监控，包括Oracle，Mysql，PostgreSQL，MSSQL，DB2，这篇文章简单的记录一下我监控oracle的过程；软件环境：Jdk 1.8.0_112zabbix 3.4.2orabbix 1.2.3 安装jdk下载jdk：http://www.oracle.com/technetwork/java/archive-139210.html12345tar xf jdk-8u112-linux-x64.tar.gz -C /usr/local/vim /etc/profileexport JAVA_HOME=/usr/local/jdk1.8.0_112/export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH 1source /etc/profile oracle中增加监控用户权限创建用户12345su - oracle$ sqlplus /nologSQL&gt; conn /as sysdbaSQL&gt; CREATE USER ZABBIX IDENTIFIED BY &apos;&lt;PASSWORD&gt;&apos; DEFAULT TABLESPACE SYSTEM TEMPORARY TABLESPACE TEMP PROFILE DEFAULT ACCOUNT UNLOCK;SQL&gt; CREATE USER ZABBIX IDENTIFIED BY zabbix DEFAULT TABLESPACE SYSTEM TEMPORARY TABLESPACE TEMP PROFILE DEFAULT ACCOUNT UNLOCK; 赋予权限123456GRANT CONNECT TO ZABBIX;GRANT RESOURCE TO ZABBIX;GRANT CREATE SESSION TO ZABBIX; GRANT SELECT ANY DICTIONARY TO ZABBIX;GRANT UNLIMITED TABLESPACE TO ZABBIX;GRANT SELECT ANY DICTIONARY TO ZABBIX; 如果是oracle11g的话，需执行以下语句执行以下语句的时候，注意一下全角半角标点符号12SQL&gt; exec dbms_network_acl_admin.create_acl(acl =&gt;&apos;resolve.xml&apos;,description =&gt; &apos;resolve acl&apos;, principal =&gt;&apos;ZABBIX&apos;,is_grant =&gt; true, privilege =&gt; &apos;resolve&apos;);SQL&gt; exec dbms_network_acl_admin.assign_acl(acl =&gt;&apos;resolve.xml&apos;, host =&gt;&apos;*&apos;); 验证语句1SQL&gt; select utl_inaddr.get_host_name(&apos;127.0.0.1&apos;) from dual; 安装orabbix1234wget https://nchc.dl.sourceforge.net/project/orabbix/orabbix-1.2.3.zipmkdir /usr/local/orabbixmv orabbix-1.2.3.zip /usr/local/orabbix/unzip orabbix-1.2.3.zip 12cp config.props.sample config.propsvim config.props 1234567891011121314151617ZabbixServerList=ZabbixServerZabbixServer.Address=192.168.6.103ZabbixServer.Port=10051OrabbixDaemon.Sleep=300OrabbixDaemon.MaxThreadNumber=100#DatabaseList这里配置的主机名一定要和Zabbix里添加的主机名称一致，否则获取不到数据DatabaseList=vm00DatabaseList.MaxActive=10DatabaseList.MaxWait=100DatabaseList.MaxIdle=1vm00.Url=jdbc:oracle:thin:@192.168.6.100:1521:ORCLvm00.User=ZABBIXvm00.Password=zabbixvm00.MaxActive=10vm00.MaxWait=100vm00.MaxIdle=1vm00.QueryListFile=./conf/query.props 12345cd /usr/local/orabbixvim run.sh修改java为/usr/local/jdk1.8.0_112/bin/javachmod +x run.shcp init.d/orabbix /etc/init.d/ 12345vim /etc/init.d/orabbix修改orabbix=/opt/orabbix为orabbix=/usr/local/orabbixchmod +x /etc/init.d/orabbixchkconfig --level 35 --add orabbix /etc/init.d/orabbix start 如果出现异常，可以查看日志排查 /usr/local/orabbix/logs/orabbix.log 导入模板将/usr/local/orabbix/template/Orabbix_export_full.xml模板导入添加主机，关联oracle数据库监控模板默认的配置文件无法正常获取到dbfilesize和dbsize，需要手动修改一下配置文件/usr/local/orabbix/conf/query.props在配置文件最后添加12345678dbfilesize.Query=select to_char(sum(bytes/1024/1024/10), &apos;FM99999999999999990&apos;) retvalue from dba_data_files dbsize.Query=SELECT to_char(sum( NVL(a.bytes/1024/1024/10 - NVL(f.bytes/1024/1024/10, 0), 0)), &apos;FM99999999999999990&apos;) retvalue \FROM sys.dba_tablespaces d, \(select tablespace_name, sum(bytes) bytes from dba_data_files group by tablespace_name) a, \(select tablespace_name, sum(bytes) bytes from dba_free_space group by tablespace_name) f \ WHERE d.tablespace_name = a.tablespace_name(+) AND d.tablespace_name = f.tablespace_name(+) \AND NOT (d.extent_management like &apos;LOCAL&apos; AND d.contents like &apos;TEMPORARY&apos;) 在QueryList最后添加,dbfilesize,dbsize123456QueryList=archive,audit,dbblockgets,dbconsistentgets,dbhitratio,dbphysicalread,dbversion,hitratio_body,hitratio_sqlarea,hitratio_table_proc, \lio_current_read,locks,maxprocs,maxsession,miss_latch,pga_aggregate_target, pga,phio_datafile_reads,phio_datafile_writes,phio_redo_writes,pinhitratio_body,pinhitratio_sqlarea,pinhitratio_table-proc,pinhitratio_trigger, \pool_dict_cache,pool_free_mem,pool_lib_cache,pool_misc,pool_sql_area,procnum,session_active,session_inactive,session,session_system,sga_buffer_cache, \sga_fixed,sga_java_pool,sga_large_pool,sga_log_buffer,sga_shared_pool,tbl_space,userconn,waits_controfileio,waits_directpath_read, \waits_file_io,waits_latch,waits_logwrite,waits_multiblock_read,waits_singleblock_read,hitratio_trigger,lio_block_changes,lio_consistent_read,waits_other,waits_sqlnet,users_locked,uptime,dbfilesize,dbsize 可以在最新数据里看到已经监控到的数据 orabbix for zabbix4.x如果使用的zabbix4.x版本，orabbix1.2.3默认是不能获取到监控项的，可以参考https://github.com/snickerjp/orabbix，重新编译orabbix-1.2.3.jar，替换目前版本即可；如果不想编译，这里有现成的: https://pan.baidu.com/s/1-QmNXEphOtJL6c-OZg9Q-A 提取码: 76zt 失效联系我。 参考链接：https://www.kancloud.cn/devops-centos/centos-linux-devops/361200http://fengwan.blog.51cto.com/508652/1722118http://www.smartmarmot.com/wiki/index.php?title=DBforBIX#Install_steps_for_Oracle]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(3)邮件报警配置]]></title>
    <url>%2Farlo%2F3efe0c83%2F</url>
    <content type="text"><![CDATA[报警的方式有很多，邮件，短信，微信，钉钉，最简单的方式这种脚本去发邮件，在此记录一下配置过程。 配置邮件发送安装mailx1yum -y install mailx 安装好，自己就有软链接了12[root@vm03 ~]# ls -l /usr/bin/maillrwxrwxrwx 1 root root 5 May 6 02:07 /usr/bin/mail -&gt; mailx 配置mailxvim /etc/mail.rc12345set from=user@aliyun.comset smtp=smtp.aliyun.comset smtp-auth-user=user@aliyun.comset smtp-auth-password=&apos;&lt;password&gt;&apos;set smtp-auth=login 发送一封测试邮件1echo &apos;test&apos; |mailx -s &apos;abc&apos; abc@qq.com 修改配置文件12vim /etc/zabbix/zabbix_server.confAlertScriptsPath=/usr/lib/zabbix/alertscripts 发送邮件脚本vim z_sendmail.sh1234#!/bin/bashmessages=`echo $3 | tr &apos;\r\n&apos; &apos;\n&apos;`subject=`echo $2 | tr &apos;\r\n&apos; &apos;\n&apos;`echo &quot;$&#123;messages&#125;&quot; | mail -s &quot;$&#123;subject&#125;&quot; $1 &gt;&gt;/tmp/sendmail.log 2&gt;&amp;1 使用脚本发送一封测试邮件1234chmod +x z_sendmail.shtouch /tmp/sendmail.logchown zabbix.zabbix /tmp/sendmail.log./z_sendmail.sh user@qq.com &quot;hello&quot; &quot;abc&quot; 添加报警类型创建报警类型z_sendmail管理-报警媒介类型-创建媒体类型脚本参数1234567名称：z_sendmail类型：脚本脚本名称：z_sendmail.sh添加以下3个参数，分别对应z_sendmail.sh脚本需要的3个参数收件人地址:&#123;ALERT.SENDTO&#125;主题:&#123;ALERT.SUBJECT&#125;详细内容:&#123;ALERT.MESSAGE&#125; 设置用户报警媒介 配置触发器告警修改默认的告警模板设置为“‘非维护状态’且‘报警值&gt;=警告’”时触发动作 故障操作ps:这个模板标题不会乱码，其他的标题需要做utf8转码gb23121234567891011默认接收人：故障&#123;TRIGGER.STATUS&#125;:服务器 &#123;HOSTNAME1&#125;:&#123;TRIGGER.NAME&#125;默认信息:告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;请至Montoring-Events中查看详细情况。 恢复操作12345678910默认接收人：恢复&#123;TRIGGER.STATUS&#125;:服务器&#123;HOSTNAME1&#125;:&#123;TRIGGER.NAME&#125;默认信息：告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;报警已恢复，请放松心情。 测试告警关闭zabbix agent，测试邮件 ps:我用qq邮箱+授权码方式测试邮件，手动发送可以，系统提示发送成功，就是收不到，浪费了一天时间，坑好深！使用阿里云邮箱测试顺利！]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(2)监控客户端安装]]></title>
    <url>%2Farlo%2Fb6f2d4bf%2F</url>
    <content type="text"><![CDATA[linux 客户端安装安装客户端软件12rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpmyum install zabbix-agent 配置连接服务器信息vim /etc/zabbix/zabbix_agentd.conf123Server=192.168.6.103ServerActive=192.168.6.103Hostname=silu1 启动服务12systemctl start zabbix-agentsystemctl enable zabbix-agent 添加主机主机名称一定要和配置文件中的Hostname一致如果使用主动模式，这里的ip地址填写0.0.0.0 Windows 客户端安装安装windows 客户端下载客户端软件 https://www.zabbix.com/downloads/3.4.0/zabbix_agents_3.4.0.win.zip解压到C盘根目录 配置连接服务器信息C:\zabbix_agents_3.4.0.win\conf\zabbix_agentd.win.conf123Server=192.168.6.103ServerActive=192.168.6.103Hostname=silu2 注册服务1C:\&gt;c:\zabbix_agents_3.4.0.win\bin\win64\zabbix_agentd.exe -i -c c:\zabbix_agents_3.4.0.win\conf\zabbix_agentd.win.conf 启动服务使用以下命令启动1net start &quot;Zabbix Agent&quot; 或者在本地服务中启动 添加主机和linux方法以下，选择Windows模板即可]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix(1)监控搭建]]></title>
    <url>%2Farlo%2F3b5e53af%2F</url>
    <content type="text"><![CDATA[Zabbix是一款能够监控各种网络参数以及服务器健康性、完整性的分布式监控软件；系统环境Centos 7.3.1611Selinux offIptables offFirewalld off软件环境Zabbix 3.4.2Httpd 2.4.6Php 5.4.16MariaDB 10.2.7 使用部署包安装zabbix安装zabbix server12rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpmyum install zabbix-server-mysql zabbix-web-mysql 配置数据库123456vim /etc/yum.repos.d/MariaDB.repo[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.3/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 123456789101112yum install MariaDB-server MariaDB-clientcp /usr/share/mysql/my-medium.cnf /etc/my.cnfsystemctl start mariadb.servicesystemctl enable mariadb.servicemysql_secure_installation#初始化数据库，设置root密码mysql -uroot -p&lt;password&gt;mysql&gt; create database zabbix character set utf8 collate utf8_bin;mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &apos;&lt;password&gt;&apos;;mysql&gt; quit;cd /usr/share/doc/zabbix-server-mysql-3.4.2zcat create.sql.gz | mysql -uroot zabbix -p 配置zabbix_server.conf参数vim /etc/zabbix/zabbix_server.conf1234DBHost=localhostDBName=zabbixDBUser=zabbixDBPassword=zabbix 启动Zabbix Server12systemctl start zabbix-serversystemctl enable zabbix-server 编辑Zabbix前端的PHP配置Zabbix前端的Apache配置文件位于 /etc/httpd/conf.d/zabbix.conf 。一些PHP设置已经完成了配置。1234567php_value max_execution_time 300php_value memory_limit 128Mphp_value post_max_size 16Mphp_value upload_max_filesize 2Mphp_value max_input_time 300php_value always_populate_raw_post_data -1php_value date.timezone Asia/Shanghai 启动httpd12systemctl start httpdsystemctl enable httpd 配置zabbix前端在浏览器中配置zabbixZabbix前端可以在浏览器中通过 http://zabbixserver/zabbix 进行访问。 确认所有php参数都设置ok 填写mysql数据库信息，用户名密码 确认所有配置信息正确 默认的用户名／密码为 Admin/zabbix 系统配置配置中文界面替换中文字体在Windows系统里找一个中文字体（华文楷体）C:\Windows\Fonts\STKAITI.TTF上传到zabbix服务器替换掉默认的字体/usr/share/fonts/dejavu/DejaVuSans.ttf 开启中文支持如果默认中文(zh_CN)支持被关闭，可以将zh_CN后边的false选项修改为true；12345678vim /usr/share/zabbix/include/locales.inc.phpfunction getLocales() &#123; return [ &apos;en_GB&apos; =&gt; [&apos;name&apos; =&gt; _(&apos;English (en_GB)&apos;), &apos;display&apos; =&gt; true], &apos;en_US&apos; =&gt; [&apos;name&apos; =&gt; _(&apos;English (en_US)&apos;), &apos;display&apos; =&gt; true], &apos;bg_BG&apos; =&gt; [&apos;name&apos; =&gt; _(&apos;Bulgarian (bg_BG)&apos;), &apos;display&apos; =&gt; false], &apos;zh_CN&apos; =&gt; [&apos;name&apos; =&gt; _(&apos;Chinese (zh_CN)&apos;), &apos;display&apos; =&gt; true],…… 在web界面修改用户资料、语言 启用zabbix server监控安装zabbix agent12yum install zabbix-agentsystemctl start zabbix-agent 在配置-主机中启用zabbix server CentOS 6.x 安装ZabbixCentOS 6.x 默认的php版本太低，需借助第三方源升级php;建议PHP≥5.4 MySql≥5.61234rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpmyum -y install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-pecl-xhprof php-gd php-mysql php-bcmath php-ldaprpm -ql zabbix-web | grep example.confcp /usr/share/doc/zabbix-web-3.4.8/httpd22-example.conf /etc/httpd/conf.d/zabbix.conf 参考资料:https://www.zabbix.com/documentation/3.4/zh/manualhttp://www.rfyy.net/archives/1742.htmlhttps://www.zabbix.com/documentation/3.4/manual/installation/install_from_packages/rhel_centos]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDK环境变量配置]]></title>
    <url>%2Farlo%2F3f60947a%2F</url>
    <content type="text"><![CDATA[Windows我的jdk安装在 C:\Program Files\Java\jdk1.8.0_202 目录下，以下为配置过程：1.我的电脑-（右键）属性-高级系统设置-高级-环境变量2.系统变量-新建12变量名：JAVA_HOME变量值：C:\Program Files\Java\jdk1.8.0_202 12变量名：CLASSPATH变量值：%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar 12变量名：Path变量值：C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x86;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x64;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;E:\Program Files\TortoiseSVN\bin;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin Linux编辑/etc/profile 文件，在文件最后添加以下内容123export JAVA_HOME=/usr/local/jdk1.8.0_202/export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH source /etc/profile 保留系统以前自己配置的项，不要动！]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>Linux</tag>
        <tag>Windows</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WindowsUpdate不能更新，错误提示8024402F解决方法]]></title>
    <url>%2Farlo%2Fe0a98909%2F</url>
    <content type="text"><![CDATA[Windows系统下WindowsUpdate不能更新了，显示的是8024402F错误。微软上看到了解决方法：使用以下DNS服务：首选DNS服务器：4.2.2.1备用DNS服务器：4.2.2.2使用以后马上见效果。]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>更新</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins持续集成发布时tomcat不能删除目录下文件]]></title>
    <url>%2Farlo%2Ffd00fe8d%2F</url>
    <content type="text"><![CDATA[使用jenkins自动发布到tomcat时遇到一个问题，发布的时候不能自动删除tomcat下的工程目录，必须关闭tomcat之后，才能删除；提示如下1&quot;org.codehaus.cargo.container.tomcat.internal.TomcatManagerException: The Tomcat Manager responded &quot;FAIL - Unable to delete [C:\ths\Tomcat8082-alk\webapps\SuperStation]. The continued presence of this file may cause problems.&quot; 解决方法在元素中增加一个属性antiResourceLocking=”true” antiJARLocking=”true”，默认是”false”。1&lt;Context reloadable=&quot;true&quot; antiJARLocking=&quot;true&quot; antiResourceLocking=&quot;true&quot;&gt; 实际上，这两个参数就是配置Tomcat的资源锁定和Jar包锁定策略。 antiJARLocking先来看看应用的antiJARLocking属性设置为true时，Tomcat是怎么处理的。针对antiJARLocking属性的处理集中在WebappClassLoader的getResource和findResourceInternal方法里，主要原理是将包含在Jar包里的资源抽取放到应用的工作目录（work里应用对应的目录）下去。把这个属性设置为true之后，部署应用就可以在work\Catalina\localhost\struts2-blank\loader目录下看到被解压的Jar包内容。antiJARLocking属性在有的时候并不会生效，从WebappClassLoader的getResource和findResource方法逻辑里可以看出一些端倪，在一些情况下（通过对Loader的delegate、searchExternalFirst等相关属性进行配置），资源的获取并不是WebappClassLoader去做的，而是其父加载器的getResource方法或父类的findResource方法去做的，WebappClassLoader的父类是URLClassLoader、父加载器是URLClassLoader实例。 antiResourceLocking当antiResourceLocking设置为true的时候，Tomcat不会锁定应用下的任何文件。那Tomcat是怎么做到这一点的呢？在Tomcat的架构里，应用也是一个级别的容器，对应的接口是Context；各级容器本身都具备生命周期，而且配置了多个生命周期监听器来监听容器不同的生命周期过程。Tomcat在初始化的时候，给Context增加了一个生命周期监听器org.apache.catalina.startup.ContextConfig；然后在Context真正开始启动之前，会有一个BEFORE_START_EVENT状态，ContextConfig监听到这个状态的事件后，就会针对antiResourceLocking进行处理。总结一下，就是如果应用的antiResourceLocking属性设置为true，就将应用的doc base移到临时目录下，让Tomca不会占用webapps下的文件。Tomcat里java.io.tmpdir默认指向Tomcat的temp目录。 副作用从上面的分析来看，antiResourceLocking为true有几个副作用：1) 会延长应用的启动时间，因为多了临时目录的清理和往临时目录拷贝应用内容的操作；2) 如果不知道这个属性的原理，修改webapps下应用的JSP，那就不会动态重加载到新的页面内容了，因为应用的doc base已经不再在webapps下了；3) 停止Tomcat的时候，临时目录下实际的doc base会被删掉，结合第二条和第三条，如果要修改应用的JSP，那必须将改动同时拷贝到两个目录下（原始doc base和临时目录下的doc base）。所以Tomcat里这个属性缺省为false。在使用Tomcat 6.0.24之前的版本时，如果要用这个属性解决文件被锁的问题，三思而行。 参考链接：http://blog.csdn.net/yanjun008/article/details/41249753]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Jenkins</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下如何拨VPN]]></title>
    <url>%2Farlo%2F350a96fc%2F</url>
    <content type="text"><![CDATA[由于公司的svn和maven仓库地址都在内网，使用Centos系统搭建持续集成的时候，没有办法访问服务器，又不想换Windows环境；于是想办法在linux下拨通vpn！ 安装vpn客户端1yum -y install pptp pptp-setup 创建一个vpn连接1pptpsetup --create pptpd --server SERVER_IP --username USERNAME --password PASSWORD --encrypt --start –create是创建的连接名称–server是vpn的ip地址;–username是用户名–password是密码，也可以没这个参数，命令稍后会自动询问。这样可以保证账号安全–encrypt 是表示需要加密，不必指定加密方式，命令会读取配置文件中的加密方式–start是表示创建连接完后马上连接 编辑配置文件创建vpn连接完成后，会有两个配置文件(ps:有域的情况下，配置文件中\需要写成\\)vim /etc/ppp/peers/pptpd12345678910# written by pptpsetuppty &quot;pptp 1.2.3.4 --nolaunchpppd&quot;locknoauthnobsdcompnodeflatename domain\\username remotename pptpdipparam pptpdrequire-mppe-128 vim /etc/ppp/chap-secrets12345# Secrets for authentication using CHAP# client server secret IP addresses# added by pptpsetup for pptpddomain\\username pptpd &quot;password&quot; * 复制开启\断开脚本123cp /usr/share/doc/ppp-2.4.5/scripts/pon /usr/sbin/cp /usr/share/doc/ppp-2.4.5/scripts/poff /usr/sbin/chmod +x /usr/sbin/pon /usr/sbin/poff pon vpnname 开启vpnpoff vpnname 断开vpn 尝试拨vpn1pon pptpd 查看连接情况1ip a 如果有异常的话，可以跟踪系统日志排查1tailf /var/log/messages 设置路由1route add -net 192.168.0.0/24 dev ppp0]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>Linux</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins邮件通知配置]]></title>
    <url>%2Farlo%2Fc26ec4ea%2F</url>
    <content type="text"><![CDATA[Jenkins环境搭建完成了,项目自动化编译打包也调通了，但是我们不能保证每次都是正常的，根据自己的情况(构建失败，构建状态不稳定)配置邮件通知是有必要的；这篇文章我采用腾讯qq邮箱来发送，使用公司邮箱来接收； 常用的几种方式 使用内置的邮件插进（使用全局的配置，只能有一个接收方） 使用邮件扩展插件【Email Extension Plugin】（使用全局的配置，能有多个接收方，但是只能有一个发送方） 使用邮件扩展插件【Email Extension Plugin】+Groovy脚本（实现每个Job对应不同的发送邮件，多个发送方） 开发邮件转发中间件或者使用Foxmail这些工具来转发（每个Job发送到对应的邮箱，然后中间件负责转发到成员列表的邮箱。对发送插件没什么要求，只要能发送即可）(这篇文章只说一下前两种方式) 使用QQ邮箱发送qq授权码设置参考：http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256使用内置的邮件插件配置管理员邮件地址系统管理–&gt;系统设置–&gt;Jenkins Location配置邮件通知系统管理–&gt;系统设置–&gt;邮件通知–&gt;高级，配置如下：这里密码填写我们神的“qq授权码”测试邮件提醒勾选“通过发送测试邮件测试配置”看到“Email was successfully sent”即为成功，去邮箱里看一下使用邮件拓展插件系统管理–&gt;系统设置–&gt;Extended E-mail Notification邮件内容配置以下是参考网上的配置：12345678910111213141516171819Default Subject: 构建通知:$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS! Default Content!Default Content:(本邮件是程序自动下发的，请勿回复！)&lt;br/&gt;&lt;hr/&gt;项目名称：$PROJECT_NAME&lt;br/&gt;&lt;hr/&gt;构建编号：$BUILD_NUMBER&lt;br/&gt;&lt;hr/&gt;svn版本号：$&#123;SVN_REVISION&#125;&lt;br/&gt;&lt;hr/&gt;构建状态：$BUILD_STATUS&lt;br/&gt;&lt;hr/&gt;触发原因：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;构建日志地址：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;构建地址：&lt;a href=&quot;$BUILD_URL&quot;&gt;$BUILD_URL&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;变更集:$&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;&lt;hr/&gt; 全局属性详解Default Content Type：指定构建后发送邮件内容的类型，有Text和HTML两种。Use List-ID Email Header：为所有的邮件设置一个List-ID的邮件信头，这样你就可以在邮件客户端使用过滤。Add ‘Precedence: bulk’ Email Header：设置优先级。Default Recipients：自定义默认电子邮件收件人列表。如果没有被项目配置覆盖,该插件会使用这个列表。Reply To List：回复列表Emergency reroute：如果这个字段不为空，所有的电子邮件将被单独发送到该地址（或地址列表）。Excluded Committers：防止邮件被邮件系统认为是垃圾邮件,邮件列表应该没有扩展的账户名(如:@domain.com),并且使用逗号分隔。Default Subject：自定义邮件通知的默认主题名称。该选项能在邮件的主题字段中替换一些参数，这样你就可以在构建中包含指定的输出信息。Maximum Attachment Size：邮件最大附件大小。Default Pre-send Script：默认发送前执行的脚本。Enable Debug Mode：启用插件的调试模式。这将增加额外的日志输出，构建日志以及Jenkins的日志。在调试时是有用的，但不能用于生产。Enable Security：启用时，会禁用发送脚本的能力，直接进入Jenkins实例。如果用户试图访问Jenkins管理对象实例，将抛出一个安全异常。Content Token Reference：邮件中可以使用的变量，所有的变量都是可选的。具体介绍请查看全局邮件变量章节。 Job中邮件配置在构建后操作——”Add Post-build Actions”选项中勾选”Editable Email Notification”标签Project Recipient List：这是一个以逗号(或者空格)分隔的收件人邮件的邮箱地址列表。允许您为每封邮件指定单独的列表。Ps：如果你想在默认收件人的基础上添加收件人：$DEFAULT_RECIPIENTS,&lt;新的收件人&gt;Default Subject：允许你配置此项目邮件的主题。Default Content：跟Default Subject的作用一样，但是是替换邮件内容。Attach Build Log：附件构建日志。Compress Build Log before sending：发送前压缩生成日志（zip格式）。 添加触发器 查看构建失败日志 查看收件箱 参考链接：http://www.cnblogs.com/yangxia-test/p/4366172.html]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins打包不能发现本地仓库包]]></title>
    <url>%2Farlo%2Fd4636f97%2F</url>
    <content type="text"><![CDATA[jenkins里新建了一个maven风格的项目，打包过程中找不到ojdbc的包，然后手动下载，加载到本地仓库中了，jenkins依然提示找不到这个包。123[ERROR] Failed to execute goal on project atmosphere: Could not resolve dependencies for project com.ths:atmosphere:war:0.0.1-SNAPSHOT: Failure to find com.oracle:ojdbc14:jar:10.2.0.4.0 in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -&gt; [Help 1]org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project atmosphere: Could not resolve dependencies for project com.ths:atmosphere:war:0.0.1-SNAPSHOT: Failure to find com.oracle:ojdbc14:jar:10.2.0.4.0 in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forcedat org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:221) 手动加载jar包到本地仓库1/usr/local/apache-maven-3.3.9/bin/mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=/usr/local/src/ojdbc14-10.2.0.4.0.jar 手动maven编译打包在工作目录下尝试手动编译打包，可以成功1/usr/local/apache-maven-3.3.9/bin/mvn compile install package 然后我茫然了，同一台机器，同一个版本的jdk，同一个版本的mvn，同一份代码；本地maven编译打包可以成功，通过jenkins调用maven打包就找不到ojdbc的包，失败了；容我喝杯白开水压压惊！我仔细排查了jenkins里边的配置，maven的全局配置使用的是默认的；maven版本和本地是一样的3.3.9；maven的仓库是默认地址~/.m2/repository;终于发现问题的所在了，原因就是maven的仓库是不一样的；本地执行maven编译打包使用的是root用户，仓库地址为/root/.m2/repository; jenkins程序是以jenkins用户启动起来的，默认的仓库地址为/var/lib/jenkins/.m2/repository/;我之前手动导入jar只导入到root用户下的仓库中了； 解决方法直接拷贝jar包到1cp /root/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/ojdbc14-10.2.0.4.0.jar /var/lib/jenkins/.m2/repository/com/oracle/ojdbc14/10.2.0.4.0/ojdbc14-10.2.0.4.0.jar 修改本地maven仓库的地址123vim $MAVEN_HOME/conf/settings.xml&lt;localRepository&gt;/path/.m2/repository&lt;/localRepository&gt; 扩展阅读maven仓库的优先级别：本地仓库 &gt;profile &gt; pom中的repository &gt; mirrorhttp://toozhao.com/2012/07/13/compare-priority-of-maven-repository/]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat启动慢原因排查]]></title>
    <url>%2Farlo%2Fd8e5626d%2F</url>
    <content type="text"><![CDATA[故障现象1Tomcat启动异常，卡在以下提示处123INFO: validateJarFile(/usr/local/apache-tomcat-7.0.79/webapps/thsbox/WEB-INF/lib/tomcat-servlet-api-8.5.15.jar) - jar not loaded. See Servlet Spec 3.0, section 10.7.2. Offending class: javax/servlet/Servlet.classAug 17, 2017 2:36:19 PM org.apache.catalina.startup.TldConfig executeINFO: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time. 关闭TLDs1234567vim /usr/local/apache-tomcat-7.0.79/conf/context.xml&lt;Context processTlds=&quot;false&quot;&gt; &lt;!-- Default set of monitored resources --&gt; &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt; ……&lt;/Context&gt; 屏蔽jar包1234vim /usr/local/apache-tomcat-7.0.79/conf/catalina.propertiestomcat.util.scan.StandardJarScanFilter.jarsToSkip=\tomcat-servlet-api-8.5.15.jar 更改以上两个地方，日志还是会打印出来，启动还是卡主 故障现象2起初以为是启动不起来了，后来一直等着，发现只是很慢，可以启动起来的,在7分钟左右1INFO: Server startup in 432720 ms 跟踪日志有重大发现1WARNING: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [422,085] milliseconds 第一种修改方法1234vim /usr/local/jdk1.8.0_112/jre/lib/security/java.security#securerandom.source=file:/dev/randomsecurerandom.source=file:/dev/./random 修改完成后INFO: Server startup in 118722 ms(还是慢) 第二种修改方法123vim /usr/local/apache-tomcat-7.0.79/bin/catalina.sh修改第232行JAVA_OPTS=&quot;$JAVA_OPTS $JSSE_OPTS -Djava.security.egd=file:/dev/./urandom&quot; 修改完成后INFO: Server startup in 8985 ms 参考：http://www.cnblogs.com/raphael5200/p/6844510.html]]></content>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lustre文件系统部署]]></title>
    <url>%2Farlo%2Fc6d9ba0c%2F</url>
    <content type="text"><![CDATA[软件下载https://downloads.hpdd.intel.com/public/lustre/https://downloads.hpdd.intel.com/public/e2fsprogs/1.42.7.wc1/http://mirror.symnds.com/software/zfsonlinux/repo/epel-testing/6/x86_64/ldiskfsprogs-1.42.7.wc1.3chaos-7.ch5.1.1.x86_64.rpm 查看lustre版本和操作系统对应关系参考：https://wiki.hpdd.intel.com/display/PUB/Lustre+Support+Matrix 2.4以后的版本支持多个mds查看lustre版本lctl get_param version &lt;未完待续&gt; 参考文档：http://www.google.com.pg/patents/CN102169448A?cl=zhhttp://cdn.opensfs.org/wp-content/uploads/2014/10/6-LUG-Inspur-WWWrevised.pdf]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>Lustre</tag>
        <tag>文件系统</tag>
        <tag>分布式</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lustre文件系统简介]]></title>
    <url>%2Farlo%2Fab1d26cf%2F</url>
    <content type="text"><![CDATA[Lustre是一款开源的，基于对象存储的集群并行分布式文件系统，具有很高的扩展性、可用性、易用性、性能等，在高性能计算中应用很广泛，世界十大超级计算中心当中的七个以及超过50%的全球top50超级计算机都在使用Lustre。可以支持上万个节点，数以PB的数量存储系统。从1999年lustre项目起，他的版权所有者就在不断的变换，从lustre项目组到Sun公司到Oracle再到Whamclound，最终被因特尔收购。基于对象的文件系统将文件的元数据和文件数据分离开来，存储在不同的服务器上。文件系统的客户用利用元数据服务器和对象存储服务器来为用户提供一个完整的文件系统抽象。基于对象的文件系统具有性能优势，文件系统客户通过对象存储服务器来访问文件内容，而元数据服务器只有在文件打开时才需要连接。 Lustre文件系统包括三种主要的功能单元元数据服务器MDS(Metadata Server)元数据服务器（metadata servers，MDSes）。一个Lustre文件系统通常拥有两个元数据服务器（active和standby），一个元数据服务器则拥有若干元数据目标（metadata targets，MDTs）。元数据目标存储名字空间元数据：文件名、目录、访问权限、文件结构等信息。不同于诸如GPFS和PanFS等基于块并由元数据服务器控制所有块分配的分布式文件系统，Lustre元数据服务器仅仅关心路径搜索和权限检查而不会牵涉任何的文件I/O操作。该特性避免元数据服务器成为集群扩展的瓶颈。单个文件系统拥有多个元数据目标是从2.4开始引入的新特性。 对象存储服务器OSS(Object Storage Server)对象存储服务器（object storage servers，OSSes）将文件数据存储于一个或多个对象存储目标（object storage targets，OSTs）中。取决于服务器硬件，一个对象存储服务器通常有二到八个对象存储目标，每个对象存储目标管理一个本地文件系统。Lustre文件系统的空间等于所有对象存储目标的容量总和。 客户端Client客户机（Clients）能访问并使用数据。Lustre为所有客户机提供统一的命名空间。Lustre支持多种网络类型，包括Infiniband，Omni-Path，以太网等。如果远程直接内存访问（RDMA）传输可用，Lustre将利用它提高吞吐量降低CPU使用率。 参考链接：https://zh.wikipedia.org/wiki/Lustrehttps://www.ibm.com/developerworks/cn/linux/l-ofs/index.htmlhttp://blog.csdn.net/fsdev/article/details/7310975http://mp.weixin.qq.com/s/QvBEU6yebkChMPNmcCZrWQ]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>Lustre</tag>
        <tag>文件系统</tag>
        <tag>分布式</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mariadb(MHA)高可用集群搭建]]></title>
    <url>%2Farlo%2F49c257f9%2F</url>
    <content type="text"><![CDATA[MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司youshimaton（现就职于Facebook公司）开发，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。该软件由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台MySQL服务器上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。 在MHA自动故障切换过程中，MHA试图从宕机的主服务器上保存二进制日志，最大程度的保证数据的不丢失，但这并不总是可行的。例如，如果主服务器硬件故障或无法通过ssh访问，MHA没法保存二进制日志，只进行故障转移而丢失了最新的数据。使用MySQL 5.5的半同步复制，可以大大降低数据丢失的风险。MHA可以与半同步复制结合起来。如果只有一个slave已经收到了最新的二进制日志，MHA可以将最新的二进制日志应用于其他所有的slave服务器上，因此可以保证所有节点的数据一致性。目前MHA主要支持一主多从的架构，要搭建MHA,要求一个复制集群中必须最少有三台数据库服务器，一主二从，即一台充当master，一台充当备用master，另外一台充当从库，因为至少需要三台服务器，出于机器成本的考虑，淘宝也在该基础上进行了改造，目前淘宝TMHA已经支持一主一从。 MHA工作原理总结为以下几条： 从宕机崩溃的master保存二进制日志事件（binlog events）; 识别含有最新更新的slave; 应用差异的中继日志(relay log) 到其他slave; 应用从master保存的二进制日志事件(binlog events); 提升一个slave为新master; 使用其他的slave连接新的master进行复制。 配置基础环境mysql主充复制集群搭建mha的环境是基于mysql主从复制环境上搭建的，主从复制请参考http://islocal.cc/arlo/b48c6366/ ，本文搭建的为一主三从环境 配置互相无密码验证配置hosts复制到到其他几台机器12345cat /etc/hosts192.168.6.126 mysql_a #从库 #node192.168.6.127 mysql_b #主库 #node192.168.6.128 mysql_c #备用主库 #node192.168.6.102 vm02 #从库 #manager mysql_a1234ssh-keygen ssh-copy-id mysql_bssh-copy-id mysql_csssh-copy-id vm02 mysql_b1234ssh-keygen ssh-copy-id mysql_assh-copy-id mysql_csssh-copy-id vm02 mysql_c1234ssh-keygen ssh-copy-id mysql_assh-copy-id mysql_bssh-copy-id vm02 vm021234ssh-keygen ssh-copy-id mysql_assh-copy-id mysql_bssh-copy-id mysql_c mysql 配置建立mysql用户，赋予权限在3台mysql服务器上分别新建mha用户，并授权1234MariaDB [test_repl]&gt; grant all privileges on *.* to &apos;mha&apos;@&apos;mysql_a&apos; identified by &apos;222222&apos;;MariaDB [test_repl]&gt; grant all privileges on *.* to &apos;mha&apos;@&apos;mysql_b&apos; identified by &apos;222222&apos;;MariaDB [test_repl]&gt; grant all privileges on *.* to &apos;mha&apos;@&apos;mysql_c&apos; identified by &apos;222222&apos;;MariaDB [test_repl]&gt; grant all privileges on *.* to &apos;mha&apos;@&apos;vm02&apos; identified by &apos;222222&apos;; 修改mysql参数在2台slave上修改12mysql -e &apos;set global read_only=1&apos;mysql -uroot -pffffff -e &apos;show slave status\G&apos;|egrep &apos;Slave_IO|Slave_SQL&apos; 安装mha manager安装mha manager123456[root@vm02 src]# yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes -y[root@vm02 src]# cd mha4mysql-manager-0.56/[root@vm02 mha4mysql-manager-0.56]# perl Makefile.PL [root@vm02 mha4mysql-manager-0.56]# make &amp;&amp; make install[root@vm02 ~]# cp /usr/local/src/mha4mysql-manager-0.56/samples/scripts/master_ip_failover /usr/local/bin/[root@vm02 ~]# cp /usr/local/src/mha4mysql-manager-0.56/samples/scripts/master_ip_online_change /usr/local/bin/ 主配置文件123456789101112131415161718192021222324252627282930313233343536373839[server default]user=mhapassword=222222ping_interval=1remote_workdir=/tmprepl_user=replrepl_password=111111ssh_user=rootmanager_workdir=/var/log/masterha/app1manager_log=/var/log/masterha/app1/manager.logmaster_binlog_dir= /var/lib/mysql/master_ip_failover_script= /usr/local/bin/master_ip_failovermaster_ip_online_change_script= /usr/local/bin/master_ip_online_changereport_script=/usr/local/send_reportsecondary_check_script= /usr/local/bin/masterha_secondary_check -s mysql_b -s mysql_c --master_host=mysql_b --master_ip=192.168.6.127 --master_port=3306shutdown_script=&quot;&quot;[server1]hostname=mysql_bport=3306[server2]master_binlog_dir=/var/lib/mysqlhostname=mysql_cport=3306candidate_master=1check_repl_delay=0[server3]master_binlog_dir=/var/lib/mysqlhostname=mysql_aport=3306[server4]master_binlog_dir=/var/lib/mysqlhostname=vm02port=3306 安装mha node1234# yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker perl-DBD-MySQL [root@mysql_a mha4mysql-node-0.56]# ansible mysql -a &apos;perl Makefile.PL chdir=/usr/local/src/mha4mysql-node-0.56/&apos;[root@mysql_a mha4mysql-node-0.56]# ansible mysql -a &apos;make chdir=/usr/local/src/mha4mysql-node-0.56/&apos;[root@mysql_a mha4mysql-node-0.56]# ansible mysql -a &apos;make install chdir=/usr/local/src/mha4mysql-node-0.56/&apos; 测试ssh连通性123456789101112131415161718192021[root@vm02 ~]# masterha_check_ssh --conf=/etc/mastermha/app1.cnfWed Aug 2 17:12:59 2017 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.Wed Aug 2 17:12:59 2017 - [info] Reading application default configurations from /etc/mastermha/app1.cnf..Wed Aug 2 17:12:59 2017 - [info] Reading server configurations from /etc/mastermha/app1.cnf..Wed Aug 2 17:12:59 2017 - [info] Starting SSH connection tests..Wed Aug 2 17:13:00 2017 - [debug] Wed Aug 2 17:13:00 2017 - [debug] Connecting via SSH from root@mysql_a(192.168.6.126:22) to root@mysql_b(192.168.6.127:22)..Wed Aug 2 17:13:00 2017 - [debug] ok.Wed Aug 2 17:13:00 2017 - [debug] Connecting via SSH from root@mysql_a(192.168.6.126:22) to root@mysql_c(192.168.6.128:22)..Wed Aug 2 17:13:00 2017 - [debug] ok.Wed Aug 2 17:13:01 2017 - [debug] Wed Aug 2 17:13:00 2017 - [debug] Connecting via SSH from root@mysql_b(192.168.6.127:22) to root@mysql_a(192.168.6.126:22)..Wed Aug 2 17:13:00 2017 - [debug] ok.Wed Aug 2 17:13:00 2017 - [debug] Connecting via SSH from root@mysql_b(192.168.6.127:22) to root@mysql_c(192.168.6.128:22)..Wed Aug 2 17:13:00 2017 - [debug] ok.Wed Aug 2 17:13:01 2017 - [debug] Wed Aug 2 17:13:01 2017 - [debug] Connecting via SSH from root@mysql_c(192.168.6.128:22) to root@mysql_a(192.168.6.126:22)..Wed Aug 2 17:13:01 2017 - [debug] ok.Wed Aug 2 17:13:01 2017 - [debug] Connecting via SSH from root@mysql_c(192.168.6.128:22) to root@mysql_b(192.168.6.127:22)..Wed Aug 2 17:13:01 2017 - [debug] ok.Wed Aug 2 17:13:01 2017 - [info] All SSH connection tests passed successfully. 测试主从复制1[root@vm02 ~]# masterha_check_repl --conf=/etc/mastermha/app1.cnf 报错1234Thu Aug 3 17:10:16 2017 - [info] MHA::MasterMonitor version 0.56.Thu Aug 3 17:10:18 2017 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm, ln401] Error happend on checking configurations. Use of uninitialized value in string eq at /usr/local/share/perl5/MHA/Server.pm line 236.Thu Aug 3 17:10:18 2017 - [error][/usr/local/share/perl5/MHA/MasterMonitor.pm, ln500] Error happened on monitoring servers.Thu Aug 3 17:10:18 2017 - [info] Got exit code 1 (Not master dead). 解决方法还没找到，所以就卡在这里了，网上也没找到有效的解决方法；好悲催，有知道的可以知道我一下，联系方式关于里边有；我怀疑是不是因为我mha0.56和Mariadb10.2.7版本不匹配，或者Mariadb太新导致的；先放一放，后期找到解决方法了再处理吧。 参考：http://www.cnblogs.com/gomysql/p/3675429.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>集群</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>Mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mariadb 读写分离集群搭建]]></title>
    <url>%2Farlo%2Fb48c6366%2F</url>
    <content type="text"><![CDATA[基础环境配置iptables: disabledselinux: disabled|系统 |主机名 |IP地址 |角色 ||CentOS 7.2 x64 |mysql_a |192.168.6.126 |Atlas代理服务 ||CentOS 7.2 x64 |mysql_b |192.168.6.127 |Mysql主服务器 ||CentOS 7.2 x64 |mysql_c |192.168.6.128 |Mysql 从服务器| 在mysql_a上安装ansible123456[root@mysql_a ~]# yum -y install epel-release[root@mysql_a ~]# yum -y install ansible[root@mysql_a ~]# vim /etc/ansible/hosts[mysql]mysql_bmysql_c 建立无密码通信123[root@mysql_a ~]# ssh-keygen -t rsa[root@mysql_a ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub mysql_b[root@mysql_a ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub mysql_c 保持服务器时间同步123[root@mysql_a ~]# ansible mysql -a &apos;timedatectl set-timezone Asia/Shanghai&apos;[root@mysql_a ~]# ansible mysql -a &apos;timedatectl set-ntp true&apos;[root@mysql_a ~]# ansible mysql -a &apos;ntpdate cn.ntp.org.cn&apos; 配置三台服务器的hosts12345cat /etc/hosts192.168.6.126 mysql_a192.168.6.127 mysql_b192.168.6.128 mysql_c[root@mysql_a ~]# ansible mysql -m copy -a &apos;src=/etc/hosts dest=/etc/hosts&apos; 搭建Mariadb(mysql)主从复制配置Mariadb yum源12345678[root@mysql_a ~]# vim /etc/yum.repos.d/MariaDB.repo# MariaDB 10.2 CentOS repository list - created 2017-07-27 03:36 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 安装Mariadb(mysql)123[root@mysql_a ~]# ansible mysql -m copy -a &apos;src=/etc/yum.repos.d/MariaDB.repo dest=/etc/yum.repos.d/MariaDB.repo&apos;[root@mysql_a ~]# ansible mysql -m yum -a &apos;name=MariaDB-server state=installed&apos;[root@mysql_a ~]# ansible mysql -m yum -a &apos;name=MariaDB-client state=installed&apos; Ps：也可以下载以下几个rpm包，使用yum localinstall *.rpm 进行安装（速度会快一些）1234567[root@mysql_b mariadb]# lltotal 171204-rw-r--r-- 1 root root 8353220 Aug 1 13:56 galera-25.3.20-1.rhel7.el7.centos.x86_64.rpm-rw-r--r-- 1 root root 50251656 Aug 1 09:46 MariaDB-10.2.7-centos7-x86_64-client.rpm-rw-r--r-- 1 root root 158012 Aug 1 09:46 MariaDB-10.2.7-centos7-x86_64-common.rpm-rw-r--r-- 1 root root 2975776 Aug 1 09:46 MariaDB-10.2.7-centos7-x86_64-compat.rpm-rw-r--r-- 1 root root 113565340 Aug 1 09:46 MariaDB-10.2.7-centos7-x86_64-server.rpm 拷贝模板配置文件1[root@mysql_a ~]# ansible mysql -a &apos;cp /usr/share/mysql/my-medium.cnf /etc/my.cnf&apos; 各服务器上执行初始化操作mysql_secure_installation 修改mysql_b配置文件1234567vim /etc/my.cnflog-bin=/var/lib/mysql/mysql-binbinlog_format=rowserver-id = 127sync_binlog = 1innodb_support_xa = 1innodb-flush-log-at-trx-commit=1 建立授权账号123456789[root@mysql_b mariadb]# mysql -uroot -pffffffMariaDB [mysql]&gt; grant replication slave on *.* to &apos;repl&apos;@&apos;192.168.6.%&apos; identified by &apos;111111&apos;;MariaDB [(none)]&gt; show master status;+------------------+----------+--------------+------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql-bin.000002 | 342 | | |+------------------+----------+--------------+------------------+1 row in set (0.00 sec) 修改mysql_c配置文件12345vim /etc/my.cnfbinlog_format=rowserver-id = 128replicate-ignore-db=mysqlrelay_log=relay-bin 重启两台Mariadb(mysql)服务1[root@mysql_a ~]# ansible mysql -a &apos;systemctl restart mariadb.service&apos; 开启主从同步12345[root@mysql_c mysql]# mysql -uroot –pffffffMariaDB [(none)]&gt; stop slave;MariaDB [(none)]&gt; change master to master_host=&apos;mysql_b&apos;, master_user=&apos;repl&apos;, master_password=&apos;111111&apos;,master_log_file=&apos;mysql-bin.000002&apos;,master_log_pos=342;MariaDB [(none)]&gt; start slave;MariaDB [(none)]&gt; show slave status\G Atlas安装配置安装Mariadb(Mysql)客户端123[root@mysql_a mariadb]# yum install MariaDB-client[root@mysql_a mariadb]# systemctl status mariadb.service //确保Atlas本机没有mysql服务被启动Unit mariadb.service could not be found. 安装atlas下载的时候有两个软件包带分片功能的Atlas-sharding 和Atlas，我们下后边这个（el6的包centos7可以安装）12[root@mysql_a src]# axel https://github.com/Qihoo360/Atlas/releases/download/2.2.1/Atlas-2.2.1.el6.x86_64.rpm[root@mysql_a src]# rpm -ivh Atlas-2.2.1.el6.x86_64.rpm 安装目录为/usr/local/mysql-proxy/，会在此目录下生成bin,conf,lib,log四个目录 生成一个加密字符串，配置文件中会用到12[root@mysql_a bin]# ./encrypt 111111kOVJsquUepY= 修改配置文件360团队很良心，中文注释很详细12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758[root@mysql_a bin]# vim /usr/local/mysql-proxy/conf/test.cnf[mysql-proxy]#带#号的为非必需的配置项目#管理接口的用户名admin-username = nsxq#管理接口的密码admin-password = ffffff#Atlas后端连接的MySQL主库的IP和端口，可设置多项，用逗号分隔proxy-backend-addresses = 192.168.6.127:3306#Atlas后端连接的MySQL从库的IP和端口，@后面的数字代表权重，用来作负载均衡，若省略则默认为1，可设置多项，用逗号分隔proxy-read-only-backend-addresses = 192.168.6.128:3306@1#用户名与其对应的加密过的MySQL密码，密码使用PREFIX/bin目录下的加密程序encrypt加密，下行的user1和user2为示例，将其替换为你的MySQL的用户名和加密密码！pwds = atlas:kOVJsquUepY=#设置Atlas的运行方式，设为true时为守护进程方式，设为false时为前台方式，一般开发调试时设为false，线上运行时设为true,true后面不能有空格。daemon = true#设置Atlas的运行方式，设为true时Atlas会启动两个进程，一个为monitor，一个为worker，monitor在worker意外退出后会自动将其重启，设为false时只有worker，没有monitor，一般开发调试时设为false，线上&gt;运行时设为true,true后面不能有空格。keepalive = true#工作线程数，对Atlas的性能有很大影响，可根据情况适当设置event-threads = 8#日志级别，分为message、warning、critical、error、debug五个级别log-level = message#日志存放的路径log-path = /usr/local/mysql-proxy/log#SQL日志的开关，可设置为OFF、ON、REALTIME，OFF代表不记录SQL日志，ON代表记录SQL日志，REALTIME代表记录SQL日志且实时写入磁盘，默认为OFF#sql-log = OFF#慢日志输出设置。当设置了该参数时，则日志只输出执行时间超过sql-log-slow（单位：ms)的日志记录。不设置该参数则输出全部日志。#sql-log-slow = 10#实例名称，用于同一台机器上多个Atlas实例间的区分#instance = test#Atlas监听的工作接口IP和端口proxy-address = 0.0.0.0:1234 #分表设置，此例中person为库名，mt为表名，id为分表字段，3为子表数量，可设置多项，以逗号分隔，若不分表则不需要设置该项#tables = person.mt.id.3#默认字符集，设置该项后客户端不再需要执行SET NAMES语句#charset = utf8#允许连接Atlas的客户端的IP，可以是精确IP，也可以是IP段，以逗号分隔，若不设置该项则允许所有IP连接，否则只允许列表中的IP连接#client-ips = 127.0.0.1, 192.168.1#Atlas前面挂接的LVS的物理网卡的IP(注意不是虚IP)，若有LVS且设置了client-ips则此项必须设置，否则可以不设置#lvs-ips = 192.168.1.1 启动Atlas服务12345[root@mysql_a bin]# ./mysql-proxyd test start[root@mysql_a mariadb]# ps -ef |grep mysqlroot 21456 1 0 15:24 ? 00:00:00 /usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/test.cnfroot 21457 21456 0 15:24 ? 00:00:00 /usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/test.cnfroot 21607 20025 0 15:35 pts/0 00:00:00 grep --color=auto mysql 通过Atlas访问通过管理接口访问1[root@mysql_a mariadb]# mysql -h127.0.0.1 -P2345 -unsxq –pffffff 通过工作接口访问123要保证这个用户在主从节点上都有权限，在主从节点上都添加一个用户MariaDB [mysql]&gt; grant all on *.* to atlas@&apos;192.168.6.%&apos; identified by &apos;111111&apos;;[root@mysql_a mariadb]# mysql -h127.0.0.1 -P1234 -uatlas -p111111 参考连接：https://github.com/Qihoo360/Atlas/wikihttp://www.cnblogs.com/yyhh/p/5084844.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>Mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mariadb主从复制集群]]></title>
    <url>%2Farlo%2Ffe63d61c%2F</url>
    <content type="text"><![CDATA[Centos7系统中将Mysql置换为Mariadb了；Mariadb是Mysql数据库被Oracle公司收购之后Mysql之前的开发者基于mysql开发的开源数据库，完全兼容mysql；更详细的纠葛请自行google。Mysql的主从复制是指从服务器向主服务器索取二进制binlog文件，在从服务器上把日志文件重新执行，从而获取主服务器数据，保证从服务器和主服务器的数据保持同步。但由于是异步的复制，从服务器在一定程度上落后于主服务器，刚写入到主服务器上的数据可能服务在从服务器上查询得到。 复制原理过程 从服务器创建I/O线程连接主数据库，向主数据请库服务器求二进制日志文件（binlog） 主服务器上启动Binlog Dump,将二进制日志文件发送给I/O线程，I/O线程获取数据后将数据卸载从库的中继日志中（relay log） SQL线程读取中继日志并执行 日志方式 statement：基于语句级别的binlog，记录修改数据的sql语句。 row： 基于行级别的binlog逐行记录数据的变更。 mixed：由Mysql数据库自动选择哪种方式记录binlog。raw格式下日志文件会很大，会影响磁盘的I/O,在传输过程中也会影响带宽，根据情况自行选择。 集群环境搭建系统：Centos7 x64软件：Mariadb 10.2 stable 保持服务器时间同步123timedatectl set-timezone Asia/Shanghaitimedatectl set-ntp truentpdate cn.ntp.org.cn 安装Mariadb软件配置yum源参考https://downloads.mariadb.org/mariadb/repositories/vim /etc/yum.repos.d/MariaDB.repo1234567# MariaDB 10.2 CentOS repository list - created 2017-07-27 03:36 UTC# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.2/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1 安装1yum -y install MariaDB-server MariaDB-client 启动服务，并设置开机启动12systemctl start mariadb.servicesystemctl enable mariadb.service 初始化服务器1234可以初始化过程中设置密码mysql_secure_installation也可以进入数据库后设置密码update user set password=PASSWORD(&quot;SOME_ROOT_PASSWORD&quot;) where User=&apos;root&apos;; 配置主服务器将以下配置添加到my.cnf中[mysqld]下123456server-id=102 #服务器ID号(取值范围为1到2的32次方-1的整数，建议使用ip地址最后一位，保持唯一性),写成server_id 不生效log-bin=/var/lib/mysql/mariadb-bin #二进制文件存放位置binlog_format=row #日志类型为rawsync_binlog = 1 #事务一提交，就将二进制日志同步至磁盘上innodb_support_xa = 1 #支持分布式事务innodb-flush-log-at-trx-commit=1 #针对innodb的设置 给slave开相应的权限1GRANT REPLICATION SLAVE ON *.* TO ‘repl’@‘192.168.6.103’ IDENTIFIED BY ‘123456’; 配置从服务器将以下配置添加到my.cnf中[mysqld]下1234server-id=103 #服务器ID号(取值范围为1到2的32次方-1的整数，建议使用ip地址最后一位，保持唯一性)read_only = 1 #从服务器为只读状态（确保数据的一致性）log-bin=/var/lib/mysql/mariadb-bin #中继日志存放目录 replicate-ignore-db=mysql #不需要同步的数据库（忽略的库最好配置在slave上，让master有最全的binlog） Mysql版本从5.1.7以后开始就不支持“master-host”类似的参数；在从库上执行如下命令；123change master to master_host=&apos;192.168.6.102&apos;, master_user=&apos;repl&apos;, master_password=&apos;123456&apos;; #好像不需要master_log_file和master_log_pos也可以;slave start;show slave status\G #查看同步状态 测试在主服务器上新建数据库，建表，插入数据;在从库上查询；1234567891011mysql -uroot -pffffffMariaDB [(none)]&gt; create database test_repl;MariaDB [(none)]&gt; use test_repl;MariaDB [test_repl]&gt; CREATE TABLE Persons (PersonID int,LastName varchar(255),FirstName varchar(255),Address varchar(255),City varchar(255));MariaDB [test_repl]&gt; INSERT INTO Persons VALUES (1, &quot;LastName1&quot;, &quot;FirstName1&quot;, &quot;Address1&quot;, &quot;City1&quot;); 在从库上查询；123mysql -uroot -pffffffMariaDB [(none)]&gt; use test_repl;MariaDB [test_repl]&gt; select * from Persons; 可以在主库上看到连接的从库信息（一主多从很有用）1234567MariaDB [test_repl]&gt; show slave hosts;+-----------+------+------+-----------+| Server_id | Host | Port | Master_id |+-----------+------+------+-----------+| 3 | | 3306 | 1 |+-----------+------+------+-----------+1 row in set (0.00 sec) 问题记录Q1：Q：Got fatal error 1236 from master when reading data from binary log: ‘Could not find first log file name in binary log index file’A：123MariaDB [test_repl]&gt; stop slave;MariaDB [test_repl]&gt; reset slave;MariaDB [test_repl]&gt; start slave; Q2:Q:Could not execute Update_rows event on table mysql.user; Can’t find record in ‘user’, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event’s master log mariadb-bin.000003, end_log_pos 1749A:12345678MariaDB [test_repl]&gt; stop slave; Query OK, 0 rows affected (0.00 sec)MariaDB [test_repl]&gt; set global sql_slave_skip_counter=1; Query OK, 0 rows affected (0.00 sec)MariaDB [test_repl]&gt; start slave;Query OK, 0 rows affected (0.01 sec) Q3：Q：Last_SQL_Errno: 1146Last_SQL_Error: Unable to load replication GTID slave state from mysql.gtid_slave_pos: Table ‘mysql.gtid_slave_pos’ doesn’t existA:主从的版本是一样是，不清楚为什么会出现这样的问题，使用mysql_upgrade升级修复了一下好了；1mysql_upgrade -uroot -pffffff 扩展阅读Mysql默认的复制是异步的，Mysql(5.5以后版本)半同步复制 参考链接：https://linux.cn/article-5491-1.htmlhttp://joelhy.github.io/2015/02/06/mariadb-master-slave-replication/http://www.cnblogs.com/gomysql/p/3662492.html]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
        <tag>Mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下多线程下载工具Axel]]></title>
    <url>%2Farlo%2F1a27e5da%2F</url>
    <content type="text"><![CDATA[Linux 平台下默认的下载工具是wget，可在慢速或不稳定的网络连接下保持健壮性，如果由于网络问题下载失败，它将继续重试，直到整个文件下载完成；但是wget不支持多线程下载，这里推荐一个axel，可实现对同一个文件建立多个连接，每个连接下载单独的文件片段以更快地完成下载，支持HTTP,HTTPS,FTP,FTPS协议； 安装源码安装下载地址https://sourceforge.net/projects/axel2/files/ 包管理器安装看教程说epel源中带有这个工具，但是我Centos 6.8 没发现；于是自已下载一个rpm包安装，推荐下载地址 http://pkgs.org/ 使用基本用法如下：1alex [选项][下载目录][下载地址] 参数如下：1234567-s 指定每秒下载最大的比特数（如限速为512KB/s，设置为 -s 512000）-n 指定同时打开的下载线程数 (如指定10个线程，设置为 -n 10)-o 指定下载路径（如下载到/tmp目录，设置为 -o /tmp；也可以指定下载后的文件名，如下载后文件名为test.tgz,设置为 -o /tmp/test.tgz）-S 搜索镜像，并下载-v 打印更多状态信息-a 打印简洁的进度信息-q 不显示下载进度 实例1axel -n 10 -a -o /tmp ftp://ftpprd.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/enkf.20170724/12/gdas.t12z.atmf009s.mem011.nemsio 断点续传如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。axel 默认具有恢复未完成的下载的行为。Axel 在下载文件时定期更新状态文件（扩展名为 .st）。由于某些原因，下载中途停止了？不用担心，只要使用相同的 axel 命令，它将会检查 file 和 file.st，如果找到，它会从停止处恢复下载。 参考：http://man.linuxde.net/axel]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>Linux</tag>
        <tag>下载</tag>
        <tag>axel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intel编译器(parallel_studio_xe)安装]]></title>
    <url>%2Farlo%2Fe5fb788a%2F</url>
    <content type="text"><![CDATA[软件环境CentOS 7.2 x64parallel_studio_xe_2013_update2_intel64.tgzintel_eval.lic 安装安装依赖环境1[root@vm00 ~]# yum -y install libstdc++.so.5 gcc-c++ 开始安装123[root@vm00 src]# tar xf parallel_studio_xe_2013_update2_intel64[root@vm00 src]# cd parallel_studio_xe_2013_update2_intel64[root@vm00 parallel_studio_xe_2013_update2_intel64]# ./install.sh 初始化，欢迎界面-——————————————————————————-Initializing, please wait…-——————————————————————————- Step no: 1 of 7 | Welcome-——————————————————————————-Welcome to the Intel(R) Parallel Studio XE 2013 Update 2 for Linux* installationprogram. -——————————————————————————-You will complete the steps below during this installation:Step 1 : WelcomeStep 2 : LicenseStep 3 : ActivationStep 4 : Intel(R) Software Improvement ProgramStep 5 : OptionsStep 6 : InstallationStep 7 : Complete-——————————————————————————-Press “Enter” key to continue or “q” to quit: 回车-——————————————————————————-Checking the prerequisites. It can take several minutes. Please wait…-——————————————————————————- 提示不支持的操作系统，跳过即可Step no: 1 of 7 | Options &gt; Missing Optional Pre-requisite(s)-——————————————————————————-There are one or more optional unresolved issues. It is highly recommended toresolve them all before you continue the installation. You can fix them withoutexiting from the installation and re-check. Or you can quit from theinstallation, fix them and run the installation again.-——————————————————————————-Missing optional pre-requisites– Intel(R) Composer XE 2013 Update 2 for Linux*: unsupported OS-——————————————————————————- Skip missing optional pre-requisites [default] Show the detailed info about issue(s) Re-check the pre-requisites h. Helpb. Back to the previous menuq. Quit-——————————————————————————-Please type a selection or press “Enter” to accept default choice [1]: 回车 接受条约，输入acceptStep no: 2 of 7 | License-——————————————————————————-As noted in the Intel(R) Software Development Product End User LicenseAgreement, the Intel(R) Software Development Product you install will send Intelthe products serial number and other system information to help Intel improvethe product and validate license compliance. No personal information will betransmitted.-——————————————————————————-To continue with the installation of this product you are required to acceptthe terms and conditions of the End User License Agreement (EULA). The EULAis displayed using the “more” utility. Press the spacebar to advance to thenext page or enter “q” to skip to the end. After reading the EULA, you mustenter “accept” to continue the installation or “decline” to return to theprevious menu.-——————————————————————————-IMPORTANT - READ BEFORE COPYING, INSTALLING OR USING.Do not copy, install, distribute, public display, or use the Materials providedunder this license agreement (“Agreement”), until you have carefully read thefollowing terms and conditions. By copying, installing, distributing, publicly displaying, or otherwise usingthe Materials, you agree to be bound by the terms of this Agreement.If you do not agree to the terms of this Agreement, do not copy,install, distribute, publicly display, or use the Materials. End User License Agreement for the Intel(R) Software Development Products(Version May 2012) LICENSE DEFINITIONS: A. “Materials” are defined as the software, documentation, license keycodes (if applicable) and other materials, including any updates and upgradethereto, that are provided to you under this Agreement. Materials alsoinclude the Redistributables, Cluster OpenMP Library, and Sample Sourceas defined below. B. “Redistributables” are the files listed in the following text files thatmay be included in the Materials for the applicable Intel Software DevelopmentProduct: clredist.txt, credist.txt, fredist.txt, redist.txt, redist-rt.txt. C. “Cluster OpenMP Library”, is comprised of the files listed in the“clredist.txt” file specified above, is the Intel(R) Cluster OpenMP Libraryadd-on option to the Intel(R) C++ Compiler for Linux andIntel(R) Fortran Compiler for Linux* products (“Intel Compiler for Linux”).The use of the Cluster OpenMP Library is conditioned on having a valid licensefrom Intel for the Cluster OpenMP Library and for either Intel(R) C++ Compilerfor Linux or Intel(R) Fortran Compiler for Linux, and further is governed by theterms and conditions of the license agreement for applicable the Intel Compilerfor Linux. D. “Source Code” is defined as the Materials provided in human readableformat, and includes modification that you make or are made on your behalf. E. “Sample Source” is the Source Code file(s) that: (i) demonstrate certainlimited functions included in the binary libraries of the Intel(R) IntegratedPerformance Primitives (“Intel(R) IPPs”); (ii) are identified as Intel IPPsample source code; (iii) are obtained separately from Intel after you registeryour copy of the Intel(R) IPPs product with Intel; and (iv) are subject to allof the terms and conditions of this Agreement. F. “Microsoft Platforms” means any current and future Microsoft operatingsystem products, Microsoft run-time technologies (such as the .NET Framework),and Microsoft application platforms(such as Microsoft Office or Microsoft Dynamics) that Microsoft offers. LICENSE GRANT: A. Subject to all of the terms and conditions of this Agreement,Intel Corporation (“Intel”) grants to you a non-exclusive, non-assignable,copyright license to use the Materials. B. Subject to all of the terms and conditions of this Agreement, Intelgrants to you a non-exclusive, non-assignable copyright license to modify theMaterials, or any portions thereof, that are (i) provided in Source Code formor, (ii) are defined as Redistributables and are provided in text form. C. Subject to all of the terms and conditions of this Agreement and anyspecific restrictions which may appear in the Redistributables text files, Intelgrants to you a non-exclusive, non-assignable, fully-paid copyright license todistribute (except if you received the Materials under an Evaluation Licenseas specified below) the Redistributables, including any modifications pursuantto Section 2.B, or any portions thereof, as part of the product or applicationyou developed using the Materials. If such application is a softwaredevelopment library, then attribution, as specified in the product release notesof the corresponding Materials shall be displayed prominently in that product’sor application’s associated documentation and on the product or application’sweb site (if any). LICENSE RESTRICTIONS: A. If you receive your first copy of the Materials electronically, and asecond copy on media, then you may use the second copy only in accordance withyour applicable license stated in this Agreement, or for backup or archivalpurposes. You may not provide the second copy to another user. B. You may NOT: (i) use, copy, distribute, or publicly display theMaterials except as provided in this Agreement; (ii) rent or lease the Materialsto any third party; (iii) assign this Agreement or transfer the Materialswithout the express written consent of Intel; (iv) modify, adapt, or translatethe Materials in whole or in part except as provided in this Agreement;(v) reverse engineer, decompile, or disassemble the Materials; (vi) attempt tomodify or tamper with the normal function of a license manager that regulatesusage of the Materials; (vii) distribute, sublicense or transfer the SourceCode form of any components of the Materials or derivatives thereof to any thirdparty except as provided in this Agreement; (viii) distribute Redistributablesexcept as part of a larger program that adds significant primary functionalitydifferent from that of the Redistributables; (ix) distribute theRedistributables to run on a platform other than a Microsoft Platform if per theaccompanying user documentation the Materials are meant to execute only on aMicrosoft Platform; (x) include the Redistributables in malicious, deceptive,or unlawful programs; or (xi) modify or distribute the Source Code of anyRedistributable so that any part of it becomes subject to an Excluded License.An “Excluded License” is one that requires, as a condition of use, modification,or distribution, that the licensed software or other software incorporated into,derived from or distributed with such software (a) be disclosed or distributedin Source Code form; (b) be licensed by the user to third parties for thepurpose of making and/or distributing derivative works;or (c) be redistributable at no charge. Open source software includes, withoutlimitation, software licensed or distributed under any of thefollowing licenses or distribution models, or licenses or distribution modelssubstantially similar to any of the following: (a) GNU’s General Public License(GPL) or Lesser/Library GPL (LGPL), (b) the Artistic License (e.g., PERL),(c) the Mozilla Public License, (d) the Netscape Public License, (e) the SunCommunity Source License (SCSL), (f) the Sun Industry Source License (SISL),and (g) the Common Public License (CPL). C. The scope and term of your license depends on the type of license youare provided by Intel. The variety of license types are set forth below, whichmay not be available for all “Intel(R) Software Development Products” andtherefore may not apply to the Materials. For more information on the types oflicenses, please contact Intel or your sales representative. i. PRE-RELEASE LICENSE: If you are using the Materials under the controlof a pre-release license, (a) the Materials are deemed to be pre-release code(e.g., alpha or beta release, etc), which may not be fully functional and whichIntel may substantially modify in development of a commercial version, and forwhich Intel makes no assurances that it will ever develop or make generallyavailable a commercial version, and (b) if you are an individual, you have theright to use the Materials only for the duration of the pre-release term, whichis specified in the Materials, or until the commercial release, if any, of theMaterials, whichever is shorter. You may install copies of the Materials on anunlimited number of computers provided that you are the only individual usingthe Materials and only one copy of the Materials is in use at any one time.A separate license is required for each additional use and/or individual userin all other cases, including without limitation, use by persons, computersystems, and other use methods known now and in the future. If you are anentity, Intel grants you the right to designate one individual within yourorganization to have the sole right to use the Materials in the mannerspecified provided above. ii. EVALUATION LICENSE: If you are using the Materials under the controlof an evaluation license, you as an individual may use the Materials only forinternal evaluation purposes and only for the term of the evaluation, whichmay be controlled by the license key code for the Materials.NOTWITHSTANDING ANYTHING TO THE CONTRARY ELSEWHERE IN THISAGREEMENT, YOU MAY NOT DISTRIBUTE ANY PORTION OF THE MATERIALS, AND THEAPPLICATION AND/OR PRODUCT DEVELOPED BY YOU MAY ONLY BE USED FOREVALUATION PURPOSES AND ONLY FOR THE TERM OF THE EVALUATION. You mayinstall copies of the Materials on a reasonable number of computers to conductyour evaluation provided that you are the only individual using the Materialsand only one copy of the Materials is in use at any one time. A separatelicense is required for each additional use and/or individual user in all othercases, including without limitation, use by persons, computer systems, and otheruse methods known now and in the future. Intel may provide you with a licensecode key that enables the Materials for an evaluation license. If you are anentity, Intel grants you the right to designate one individual within yourorganization to have the sole right to use the Materials in the mannerprovided above. iii. NONCOMMERCIAL-USE LICENSE: If you are using the Materials under thecontrol of a noncommercial-use license, if you are an individual, you as anindividual may use the Materials only for non-commercial use where you receiveno fee, salary or any other form of compensation. The Materials may not be usedfor any other purpose, whether “for profit” or “not for profit.” Any workperformed or produced as a result of use of the Materials cannot be performedor produced for the benefit of other parties for a fee, compensation or anyotherreimbursement or remuneration. You may install copies of the Materials on anunlimited number of computers provided that you are the only individual usingthe Materials and only one copy of the Materials is in use at any one time.A separate license is required for each additional use and/or individual userin all other cases, including without limitation, use by persons, computersystems, and other methods of use known now and in the future. Intel willprovide you with a license code key that enables the Materials for anoncommercial-use license. If you obtained a time-limited noncommercial-uselicense, the duration (time period) of your license and your ability to use theMaterials is limited to the time period of the obtained license, which iscontrolled by the license key code for the Materials. If you are an entity,Intel grants you the right to designate one individual within your organizationto have the sole right to use the Materials in the manner provided above. iv. SINGLE-USER LICENSE: If you are using the Materials under the controlof a single-user license, you as an individual may install and use the Materialson an unlimited number of computers provided that you are the only individualusing the Materials and only one copy of the Materials is in use at any onetime. A separate license is required for each additional use and/or individualuser in all other cases, including without limitation, use by persons, computersystems, and other methods of use known now and in the future. Intel willprovide you with a license code key that enables the Materials for a single-userlicense. If you obtained a time-limited single-user license, the term of yourlicense and your ability to use the Materials is limited to the specified timeperiod, which is controlled by the license key code for the Materials. If youare an entity, Intel grants you the right to designate one individual withinyour organization to have the sole right to use the Materials in the mannerprovided above. v. NODE-LOCKED LICENSE: If you are using the Materials under the control of a node-locked license, you may use the Materials only on a single designatedcomputer by no more than the authorized number of concurrent users. A separatelicense is required for each additional concurrent user and use, and/or computersystems in all other cases, including without limitation, use by persons,computer systems, and other methods of use known now and in the future. Intelwill provide you with a license code key that enables the Materials for a Node-Locked license up to the authorized number of concurrent users. If you obtaineda time-limited node-locked license, the term of your license and your ability touse the Materials is limited to the specified time, which is controlled by thelicense key code for the Materials. vi. FLOATING LICENSE: If you are using the Materials under the control of afloating license, you may (a) install the Materials on an unlimited number ofcomputers that are connected to the designated network and (b) use the Materialby no more than the authorized number of concurrent individual users.A separate license is required for each additional concurrent individual userand each additional use by a computer system and/or network on which theMaterials are used. You understand that you must obtain a separate license forevery and any use of the Materials under a floating license, regardless ofwhether such use is, without limitation, by persons, computer systems, and othermethods of use known now and in the future. Intel will provide you with alicense code key that enables the Materials for a floating license up to theauthorized number of concurrent users. If you obtained a time-limited Floatinglicense, the duration (time period) of your license and your ability to use theMaterials is limited to the time period of the obtained license, which iscontrolled by the license key code for the Materials. Intel Library FloatingLicense: If the Materials are the Intel(R) Math Kernel Library or the Intel(R)Integrated Performance Primitives Library or the Intel(R) Threading BuildingBlocks (either “Intel Library”), then the Intel Library is provided to you as anadd-on option to either the Intel(R) C++ Compiler product or the Intel(R)Fortran Compiler product (either, an “Intel Compiler”) for which you have aFloating license, and as such, in addition to the terms and conditions above,the Intel Library may only be used by the authorized concurrent users (as notedabove) of that Intel Compiler Floating license. D. DISTRIBUTION: Distribution of the Redistributables is also subject tothe following limitations: You (i) shall be solely responsible to yourcustomers for any update or support obligation or other liability which mayarise from the distribution, (ii) shall not make any statement that your productis “certified”, or that its performance is guaranteed, by Intel, (iii) shall notuse Intel’s name or trademarks to market your product without writtenpermission, (iv) shall use a license agreement that prohibits disassembly andreverse engineering of the Redistributables, (v) shall indemnify, hold harmless,and defend Intel and its suppliers from and against any claims or lawsuits,including attorney’s fees, that arise or result from your distribution ofany product. E. Intel(R) Integrated Performance Primitives (Intel IPP). The followingterms and conditions apply only to the Intel IPP. i. Notwithstanding anything in this Agreement to the contrary, if youimplement the Sample Sources in your application or if you use Intel IPP toimplement algorithms that are protected by others’ licenses then you may needadditional licenses from various entities. Should any such additional licensesbe required, you are solely responsible for obtaining any such licenses andagree to obtain any such licenses at your own expense. ii. Notwithstanding anything herein to the contrary, a valid license toIntel IPP is a prerequisite to any license for Sample Source, and possession ofSample Source does not grant any license to Intel IPP (or any portion thereof).To access Sample Source, you must first register your licensed copy of the IntelIPP with Intel. By downloading, installing or copying any Sample Source file,you agree to be bound by terms of this Agreement. F. SOFTWARE TRANSFER: Except for Pre-Release Licenses or EvaluationLicenses or Non-Commercial Licenses, as specified above, you may permanentlytransfer the Materials you received pursuant to a license type listed inSection 3(C) above, and all of your rights under this Agreement, to anotherparty (“Recipient”) solely in conjunction with a change of ownership, merger,acquisition, sale or transfer of all, substantially all or any part of yourbusiness or assets or otherwise, either voluntarily, by operation of law ofotherwise subject to the following: You must notify Intel of the transfer bysending a letter to Intel (i) identifying the legal entities of Recipient andyou, (ii) identifying the Materials (i.e., the specific Intel software products)and the associated serial numbers to be transferred, (iii) certifying that youretain no copies of the Materials, (iv) certifying that the Recipient has agreedin writing to be bound by all of the terms and conditions of this Agreement, (v)certifying that the Recipient has been notified that in order to receive supportfrom Intel for the Materials they must notify Intel in writing of the transferand provide Intel with the information specified in subsection (ii) above alongwith the name and email address of the individual assigned to use the Materials,and (vi) providing your email address so that we may confirm receipt of yourletter. Please send such letter to: Intel Corporation2111 NE 25th AvenueHillsboro, OR 97124Attn: DPD Contracts Management, JF1-15 COPYRIGHT: Title to the Materials, modifications thereto provided byIntel and all copies thereof remain with Intel or its suppliers. The Materialsare protected by intellectual property rights, including without limitation,United States copyright laws and international treaty provisions. You will notremove any copyright or other proprietary notice from the Materials. You agreeto prevent any unauthorized copying of the Materials. Except as expresslyprovided herein, no license or right is granted to you directly or byimplication, inducement, estoppel or otherwise; specifically Intel does notgrant any express or implied right to you under Intel patents, copyrights,trademarks, or trade secrets. NO WARRANTY, NO SUPPORT AND LIMITED REPLACEMENT: THE MATERIALS ANDINFORMATION ARE PROVIDED “AS IS” WITH NO WARRANTIES, EXPRESS OR IMPLIED. INTELSPECIFICALLY DISCLAIMS ANY AND ALL WARRANTIES, INCLUDING WITHOUT LIMITATION,ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,NON-INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS, OR ANY WARRANTY OTHERWISEARISING OUT OF ANY PROPOSAL, SPECIFICATION, OR SAMPLE. If the media on whichthe Materials are furnished are found to be defective in material or workmanshipunder normal use for a period of ninety (90) days from the date of receipt,Intel’s entire liability and your exclusive remedy shall be the replacement ofthe media. This offer is void if the media defect results from accident, abuse,or misapplication. Intel may make changes to the Materials, or to items referenced therein, at anytime without notice, but is not obligated to support, update or provide trainingfor the Materials. Intel may in its sole discretion offer such support, updateor training services under separate terms at Intel’s then-current rates. You mayrequest additional information on Intel’s service offerings from an Intel salesrepresentative. LIMITATION OF LIABILITY: NEITHER INTEL NOR ITS SUPPLIERS SHALL BELIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FORLOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION,OR OTHER LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE, EVENIF INTEL HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. BECAUSE SOMEJURISDICTIONS PROHIBIT THE EXCLUSION OR LIMITATION OF LIABILITY FORCONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TOYOU. UNAUTHORIZED USE: THE MATERIALS ARE NOT DESIGNED, INTENDED, ORAUTHORIZED FOR USE IN ANY TYPE OF SYSTEM OR APPLICATION IN WHICH THE FAILURE OFTHE MATERIALS COULD CREATE A SITUATION WHERE PERSONAL INJURY OR DEATH MAY OCCUR(e.g., MEDICAL SYSTEMS, LIFE SUSTAINING OR LIFE SAVING SYSTEMS). Should youuse the Materials for any such unintended or unauthorized use, you herebyindemnify, defend, and hold Intel and its officers, subsidiaries and affiliatesharmless against all claims, costs, damages, and expenses, and reasonableattorney fees arising out of, directly or indirectly, such use and any claim ofproduct liability, personal injury or death associated with such unintended orunauthorized use, even if such claim alleges that Intel was negligent regardingthe design or manufacture of the Materials. USER SUBMISSIONS: This Agreement does not obligate you to provide Intelwith materials, information, comments, suggestions or other communicationregarding the Materials. However, you agree that any material, information,comments, suggestions or other communication you transmit or post to an Intelwebsite (including but not limited to, submissions to the Intel Premier Supportand/or other customer support websites or online portals) or provide to Intelunder this Agreement related to the features, functions, performance or useof the Materials are deemed non-confidential and non-proprietary(“Communications”). Intel will have no obligations with respect to theCommunications. You hereby grant to Intel a non-exclusive, perpetual,irrevocable, royalty-free, copyright license to copy, modify, create derivativeworks, publicly display, disclose, distribute, license and sublicense throughmultiple tiers of distribution and licensees, incorporate and otherwise use theCommunications and all data, images, sounds, text, and other things embodiedtherein, including derivative works thereto, for any and all commercial ornon-commercial purposes. You are prohibited from posting or transmitting to orfrom an Intel website or provide to Intel any unlawful, threatening, libelous,defamatory, obscene, pornographic, or other material that would violate any law.If you wish to provide Intel with information that you intend to be treated asconfidential information, Intel requires that such confidential information beprovided pursuant to a non-disclosure agreement (“NDA”), so please contact yourIntel representative to ensure the proper NDA is in place. Nothing in this Agreement will be construed as preventing Intel from reviewingyour Communications and errors or defects in Intel products discovered whilereviewing your Communications. Furthermore, nothing in this Agreement will beconstrued as preventing Intel from implementing independently-developedenhancements to Intel’s own error diagnosis methodology to detect errors ordefects in Intel products discovered while reviewing your Communications or toimplement bug fixes or enhancements in Intel products. The foregoing may includethe right to include your Communications in regression test suites. CONSENT. You agree that Intel, its subsidiaries or suppliers maycollect and use technical and related information, including but not limited totechnical information about your computer, system and application software, andperipherals, that is gathered periodically to facilitate the provision ofsoftware updates, product support and other services to you (if any) related tothe Materials, and to verify compliance with the terms of this Agreement. Intelmay use this information, as long as it is in a form that does not personallyidentify you, to improve our products or to develop and provide services ortechnologies to you. TERMINATION OF THIS LICENSE: This Agreement becomes effective on thedate you accept this Agreement and will continue until terminated as providedfor in this Agreement. If you are using the Materials under the control of atime-limited license, for example an Evaluation License, this Agreementterminates without notice on the last day of the time period, which is specifiedin the Materials, and/or controlled by the license key code for the Materials.Intel may terminate this license immediately if you are in breach of any of itsterms and conditions and such breach is not cured within thirty (30) days ofwritten notice from Intel. Upon termination, you will immediately return toIntel or destroy the Materials and all copies thereof. In the event oftermination of this Agreement, the license grant to any Redistributablesdistributed by you in accordance with the terms and conditions of thisAgreement, prior to the effective date of such termination, shall survive anysuch termination of this Agreement U.S. GOVERNMENT RESTRICTED RIGHTS: The technical data and computersoftware covered by this license is a “Commercial Item,” as such term is definedby the FAR 2.101 (48 C.F.R. 2.101) and is “commercial computer software” and“commercial computer software documentation” as specified under FAR 12.212(48 C.F.R. 12.212) or DFARS 227.7202 (48 C.F.R. 227.7202), as applicable. Thiscommercial computer software and related documentation is provided to end usersfor use by and on behalf of the U.S. Government, with only those rights as aregranted to all other end users pursuant to the terms and conditions herein. Usefor or on behalf of the U.S. Government is permitted only if the party acquiringor using this software is properly authorized by an appropriate U.S. Governmentofficial. This use by or for the U.S. Government clause is in lieu of, andsupersedes, any other FAR, DFARS, or other provision that addresses Governmentrights in the computer software or documentation covered by this license. Allcopyright licenses granted to the U.S. Government are coextensive with thetechnical data and computer software licenses granted herein. The U.S.Government shall only have the right to reproduce, distribute, perform, display,and prepare derivative works as needed to implement those rights. GENERAL PROVISIONS A. ENTIRE AGREEMENT: This Agreement is intended to be the entire agreementbetween you and Intel with respect to matters contained herein, and supersedesall prior or contemporaneous agreements and negotiations with respect to thosematters. No waiver of any breach or default shall constitute a waiver of anysubsequent breach or default. If any provision of this Agreement is determinedby a court to be unenforceable, you and Intel will deem the provision to bemodified to the extent necessary to allow it to be enforced to the extentpermitted by law, or if it cannot be modified, the provision will be severed anddeleted from this Agreement, and the remainder of the Agreement will continue ineffect. Any change, modification or waiver to this Agreement must be in writingand signed by an authorized representative of you and an officer (or delegate)of Intel, and must specifically identify this Agreement by its title (e.g.,“End User License Agreement for the Intel(R) Software Development Products”) andversion, i.e., May 2012). B. APPLICABLE LAWS: Any claim arising under or relating to this Agreementshall be governed by the internal substantive laws of the State of Delaware,without regard to principles of conflict of laws. You agree that the terms ofthe United Nations Convention on Contracts for the Sale of Goods do not applyto this Agreement. You agree that your distribution and export/re-export of theSoftware and permitted modifications shall be in compliance with the laws,regulations, orders or other restrictions of applicable export laws. THIRD PARTY PROGRAMS. The Materials may include third party programsor materials that are governed by the third party’s license terms, includingwithout limitation, open source software. The license terms associated withsuch third party programs or materials govern your use of same, and Intel isnot liable for such third party programs or materials. Other names and brands may be claimed as the property of others -——————————————————————————-Do you agree to be bound by the terms and conditions of this license agreement?Type “accept” to continue or “decline” to back to the previous menu: accept 选择激活方式，选择4使用激活文件Step no: 3 of 7 | Activation-——————————————————————————-If you have purchased this product and have the serial number and a connectionto the internet you can choose to activate the product at this time. Activationis a secure and anonymous one-time process that verifies your software licensingrights to use the product. Alternatively, you can choose to evaluate theproduct or defer activation by choosing the evaluate option. Evaluation softwarewill time out in about one month. Also you can use license file, licensemanager, or remote activation if the system you are installing on does nothave internet access activation options.-——————————————————————————- Use existing license [default] I want to activate my product using a serial number I want to evaluate my product or activate later I want to activate either remotely, or by using a license file, or by using alicense manager h. Helpb. Back to the previous menuq. Quit-——————————————————————————-Please type a selection or press “Enter” to accept default choice [1]: 4 指定license文件Step no: 3 of 7 | Activation &gt; Advanced activation-——————————————————————————-You can use license file, license manager, or the system you are installing ondoes not have internet access activation options.-——————————————————————————- Use a different computer with internet access [default] Use a license file Use a license server h. Helpb. Back to the previous menuq. Quit-——————————————————————————-Please type a selection or press “Enter” to accept default choice [1]: 2Note: Press “Enter” key to back to the previous menu.Please type the full path to your license file(s):/root/intel_eval.lic-——————————————————————————-Activation completed successfully.-——————————————————————————-Press “Enter” key to continue: 回车 是否加入改进，2为不加入Step no: 4 of 7 | Intel(R) Software Improvement Program-——————————————————————————-Help improve your experience with Intel(R) software Participate in the design of future Intel software. Select ‘Yes’ to give uspermission to learn about how you use your Intel software and we will do therest. - No Personal contact information is collected - There are no surveys or additional follow-up emails by opting in - You can stop participating at any time Learn more about Intel(R) Software Improvement Program http://software.intel.com/en-us/articles/software-improvement-program With your permission, Intel may automatically receive anonymous informationabout how you use your current and future Intel software.-——————————————————————————- Yes, I am willing to participate and improve Intel software. (Recommended) No, I don’t want to participate in the Intel(R) Software Improvement Programat this time. b. Back to the previous menuq. Quit-——————————————————————————-Please type a selection: 2 最后一次确认安装路径，可修改Step no: 5 of 7 | Options-——————————————————————————-You are now ready to begin installation. You can use all default installationsettings by simply choosing the “Start installation Now” option or you cancustomize these settings by selecting any of the change options given belowfirst. You can view a summary of the settings by selecting“Show pre-install summary”.-——————————————————————————- Start installation Now Change install directory [ /opt/intel ] Change components to install [ Custom ] Change advanced options Show pre-install summary h. Helpb. Back to the previous menuq. Quit-——————————————————————————-Please type a selection or press “Enter” to accept default choice [1]: 回车 检测安装环境，跳过即可Step no: 5 of 7 | Options &gt; Missing Optional Pre-requisite(s)-——————————————————————————-There are one or more optional unresolved issues. It is highly recommended toresolve them all before you continue the installation. You can fix them withoutexiting from the installation and re-check. Or you can quit from theinstallation, fix them and run the installation again.-——————————————————————————-Missing optional pre-requisites– Intel(R) Composer XE 2013 Update 2 for Linux: No compatible Java RuntimeEnvironment (JRE) found-——————————————————————————- Skip missing optional pre-requisites [default] Show the detailed info about issue(s) Re-check the pre-requisites h. Helpb. Back to the previous menuq. Quit-——————————————————————————-Please type a selection or press “Enter” to accept default choice [1]: 回车 开始安装Step no: 6 of 7 | Installation-——————————————————————————-Each component will be installed individually. If you cancel the installation,components that have been completely installed will remain on your system. Thisinstallation may take several minutes, depending on your system and the optionsyou selected.-——————————————————————————-Installing Intel Debugger 13.0 on Intel(R) 64 component… done-——————————————————————————-Finalizing installation… done-——————————————————————————- 安装完成Step no: 7 of 7 | Complete-——————————————————————————-Thank you for installing and using theIntel(R) Parallel Studio XE 2013 Update 2 for Linux* Reminder: Intel(R) VTune(TM) Amplifier XE users must be members of the “vtune”permissions group in order to use Event-based Sampling. To register your product purchase, visithttps://registrationcenter.intel.com/RegCenter/registerexpress.aspx?media=5G9 To get started using Intel(R) VTune(TM) Amplifier XE 2013 Update 4: - To set your environment variables: source /opt/intel/vtune_amplifier_xe_2013/amplxe-vars.sh - To start the graphical user interface: amplxe-gui - To use the command-line interface: amplxe-cl - For more getting started resources: /opt/intel/vtune_amplifier_xe_2013/ documentation/en/welcomepage/get_started.html. To get started using Intel(R) Inspector XE 2013 Update 4: - To set your environment variables: source /opt/intel/inspector_xe_2013/inspxe-vars.sh - To start the graphical user interface: inspxe-gui - To use the command-line interface: inspxe-cl - For more getting started resources: /opt/intel/inspector_xe_2013/ documentation/en/welcomepage/get_started.html. To get started using Intel(R) Advisor XE 2013 Update 2: - To set your environment variables: source /opt/intel/advisor_xe_2013/advixe-vars.sh - To start the graphical user interface: advixe-gui - To use the command-line interface: advixe-cl - For more getting started resources: /opt/intel/advisor_xe_2013/ documentation/en/welcomepage/get_started.html. To get started using Intel(R) Composer XE 2013 Update 2 for Linux*: - Set the environment variables for a terminal window using one of the following (replace &quot;intel64&quot; with &quot;ia32&quot; if you are using a 32-bit platform). For csh/tcsh: $ source /opt/intel/bin/compilervars.csh intel64 For bash: $ source /opt/intel/bin/compilervars.sh intel64 To invoke the installed compilers: For C++: icpc For C: icc For Fortran: ifort To get help, append the -help option or precede with the man command. - For more getting started resources: /opt/intel/composer_xe_2013/Documentation/en_US/get_started_lc.htm. /opt/intel/composer_xe_2013/Documentation/en_US/get_started_lf.htm. To view movies and additional training, visithttp://www.intel.com/software/products. -——————————————————————————-q. Quit [default]-——————————————————————————-Please type a selection or press “Enter” to accept default choice [q]: 回车 设置环境变量12[root@vm00 parallel_studio_xe_2013_update2_intel64]# source /opt/intel/bin/compilervars.sh intel64将此行内容加入到/etc/profile中，否则重启后失效 验证安装的正确性12[root@vm00 parallel_studio_xe_2013_update2_intel64]# icc -vicc version 13.1.0 (gcc version 4.4.7 compatibility) 参考链接：http://www.cnblogs.com/iDove/p/4103231.html]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>Intel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7下Rsync服务器搭建配置]]></title>
    <url>%2Farlo%2F98679d8a%2F</url>
    <content type="text"><![CDATA[之前写了个Windows下oracle多用户自动备份的脚本，这个备份完数据还是存在服务器本地的，如果系统宕机的话，数据还是没有了，这样的备份是没有意义滴；所以我们需要把数据转移到其他的存储上，常用的方式是使用Rsync工具来保持同步数据，接下来我们搭建一个简单的Rsync服务器。 安装部署rsync服务器1234[root@sftp_server ~]# yum -y install rsync[root@sftp_server ~]# mkdir -p /etc/rsyncd/[root@sftp_server ~]# touch /etc/rsyncd/rsyncd.conf[root@sftp_server ~]# ln -s /etc/rsyncd/rsyncd.conf /etc/rsyncd.conf 配置rsync服务器主配置文件/etc/rsyncd.conf123456789101112131415161718192021222324[root@sftp_server ~]# cat /etc/rsyncd.conf uid = root gid = root use chroot = yes hosts allow=192.168.10.33/24hosts deny=*max connections=5pid file = /var/run/rsyncd.pid secrets file = /etc/rsyncd/rsyncd.secrets motd file = /etc/rsyncd/rsyncd.motd log file = /var/log/rsync.logtransfer logging = yes log format = %t %a %m %f %bsyslog facility = local3timeout = 300[db_backup] path = /data/backup/ list=yes read only = no ignore errors auth users = rdatabase comment = Oracle Database Backup 密码验证文件/etc/rsyncd/rsyncd.secrets1234[root@sftp_server ~]# cat /etc/rsyncd/rsyncd.secrets rdatabase:sss[root@sftp_server ~]# chown root.root /etc/rsyncd/rsyncd.secrets[root@sftp_server ~]# chmod 600 /etc/rsyncd/rsyncd.secrets 欢迎提示信息文件/etc/rsyncd/rsyncd.motd1234[root@sftp_server ~]# cat /etc/rsyncd/rsyncd.motd++++++++++++++++++++++++++++ Oracle Database Backup! ++++++++++++++++++++++++++++ 启动服务12[root@sftp_server ~]# systemctl start rsyncd.service[root@sftp_server ~]# systemctl enable rsyncd.service 防火墙配置123firewall-cmd --zone=public --add-port=873/tcp --permanentfirewall-cmd --zone=public --add-service=rsyncd --permanentfirewall-cmd --reload 客户端配置有几个细节地方需要主机 rsync命令执行的时候，前边的是src(源)，后边的是dest(目标) 路径后有/只会同步目录下的内容，路径后没有/，会把当前目录（路径的最后一层）同步过去 linux客户端配置12# yum install -y rsync[airmodel@silu ~]$ rsync -avzP /tmp/data/ rdatabase@192.168.6.23::db_backup #把本机/tmp/data/目录下的内容同步到rsync服务器db_backup模块配置的目录中去，如果要将rsync服务器上内容同步至本机，路径位置换一下即可 windows 客户端配置 下载free版本的cwrsync软件 https://itefix.net/cwrsync 在c盘根目录新建一个密码文件password.rsync，内容为sss（这里写的密码和rsync服务器上的要对应，只写密码，不需要用户名） cwrsync不识别Windows路径，C盘需要写为/cygdrive/c，E盘需要写为/cygdrive/e 新建一个计划任务，实现自动化备份，操作可以参考以下示例以下实例内容为：将本地E:\database_backup\目录下的内容同步至rsync服务的db_backup模块中定义的路径中去，密码文件为C:\password.rsync 1C:\cwRsync_5.5.0_x86_Free\bin\rsync.exe -azvP --password-file=/cygdrive/c/password.rsync /cygdrive/e/database_backup/ rdatabase@192.168.6.23::db_backup 更优方式linux下可以部署inotify+rsync，实现实时同步数据]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>rsync</tag>
        <tag>同步</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Aansible palybook 创建lvm并自动挂载]]></title>
    <url>%2Farlo%2F1e1aab57%2F</url>
    <content type="text"><![CDATA[由于工作中经常会遇到添加磁盘，分区，挂载这种操作，使用ansible后再也不用一台台的搞了；主要使用到lvg，lvol，filesystem，mount模块；123456789101112131415161718192021222324252627282930313233343536- hosts: test vars: vg_name: &quot;vgtest&quot; lv_name: &quot;lvtest&quot; pvs_name: &quot;/dev/sdb&quot; dir_path: &quot;/data&quot; tasks: - name: 创建一个vg lvg: vg: &quot;&#123;&#123;vg_name&#125;&#125;&quot; pvs: &quot;&#123;&#123;pvs_name&#125;&#125;&quot; pesize: 4 - name: 创建一个lv lvol: vg: &quot;&#123;&#123;vg_name&#125;&#125;&quot; lv: &quot;&#123;&#123;lv_name&#125;&#125;&quot; size: 100%PVS - name: 格式化lv filesystem: fstype: ext4 dev: &quot;/dev/&#123;&#123;vg_name&#125;&#125;/&#123;&#123;lv_name&#125;&#125;&quot; - name: 获取UUID shell: blkid /dev/&quot;&#123;&#123;vg_name&#125;&#125;&quot;/&quot;&#123;&#123;lv_name&#125;&#125;&quot; |awk &apos;&#123;print $2&#125;&apos; register: result ignore_errors: True - name: 创建挂载目录 file: path: &quot;&#123;&#123;dir_path&#125;&#125;&quot; state: directory mode: 0755 - name: 使用UUID挂载lvm分区 mount: path: /data src: &quot;&#123;&#123;result.stdout&#125;&#125;&quot; fstype: ext4 state: mounted 由于我一直习惯使用UUID挂载分区（UUID是每个分区的唯一标识），所以我加了一步获取UUID的操作，这步也可以略去，挂载的时候使用分区名称进行挂载；还有一点就是使用lvm分区的时候，将整个磁盘做成pv是不需要进行分区操作的，这点比较方便；如果要做分区操作的话，可以使用以下playbook：hosts: test123456789101112vars: dev_name1: &quot;/dev/sdb&quot; dev_name2: &quot;/dev/sdb1&quot;tasks: - name: Disk Partition shell : fdisk &quot;&#123;&#123;dev_name1&#125;&#125;&quot; &lt; /tmp/fdisk_temp.conf - name: Disk Mkfs ext4 filesystem: fstype: ext4 dev: &quot;&#123;&#123;dev_name2&#125;&#125;&quot; - name: Disk Mount shell: blkid /dev/sdb1 |awk &apos;&#123;print $2&#125;&apos;| sed -n &apos;s/$/ \/data ext4 defaults 0 0/p&apos; &gt;&gt; /etc/fstab &amp;&amp; mount -a 受控机/tmp/fdisk_temp.conf内容1234567np11wq]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible Playbook入门篇]]></title>
    <url>%2Farlo%2F45b10f7e%2F</url>
    <content type="text"><![CDATA[playbook 是由一组ansible调用module命令的集合，使用yaml语言编写，执行顺序自上而下；1命令格式：ansible-playbook test.yml Playbook 组成Target section: 定义将要执行playbook的远程主机组 name：执行过程中会打印出来变量的值 hosts：定义远程的主机组 user：执行该任务组的用户 remote_user: 与user一样，任选其一 sudo：如果设置为yes，执行该任务组的用户在执行任务的时候获取root权限 sudo_user：如果sudo设置为yes，user设置为user1，sudo_user设置为user2，那么user1会获取user2权限 connection：通过什么方式连接到远程主机，默认是ssh gather_facts：除非明确定义不需要在远程主机上执行setup模块，否则会默认自动执行；不需要执行setup模块，需False该选项。 Variable section：定义playbook运行时需要使用的变量 vars：格式为“变量名称:变量值” vars_files：将变量名称和变量值定义在一个文件中，调用该文件，文件格式为每行一个“变量名称:变量值” vars_prompt：定义一个变量，通过交互方式让用户输入变量值 Task section：定义将要在远程主机上执行的任务列表 tasks： #三种写法如下 调用模块name: 定义名称action：模块名称 模块参数调用 直接使用模块name: 定义名称模块名称：调用方法 模块使用name：定义名称模块名称：模块参数调用 Handler section：定义task执行完成以后需要调用的任务满足一下两点才能达到触发的效果，否则会不生效。 必须在tasks中使用notify调用 在notify中定义内容一定要和tasks中定义的 - name 内容一样 新建用户的示例123456789101112[root@vm00 ~]# cat test.yaml - name: &quot;新建用户&quot; hosts: test user: root vars: user: &quot;user3&quot; password: &quot;$1$01a9gEpb$nlv.OmSa1c4jDaGgeoDKi0&quot; #加密后的密码，可以参考上篇文章中user模块使用 uid: &quot;700&quot; tasks: - name: &quot;新建用户&quot; user: name=&quot;&#123;&#123;user&#125;&#125;&quot; password=&quot;&#123;&#123;password&#125;&#125;&quot; uid=&quot;&#123;&#123;uid&#125;&#125;&quot;# user: name=&quot;&#123;&#123;user&#125;&#125;&quot; state=absent remove=yes #删除用户的话就使用这行 1[root@vm00 ~]# ansible-playbook test.yaml 修改selinux，安装epel扩展包1234567891011121314[root@vm00 ~]# cat test2.yml- hosts: test vars: packages: &quot;epel-release&quot; tasks: - name: &quot;永久关闭selinux&quot; command: sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config - name: &quot;安装epel扩展包&quot; yum: name=&#123;&#123;packages&#125;&#125; state=present notify: - reboot system handlers: - name: reboot system command: reboot 参考链接：http://breezey.blog.51cto.com/2400275/1757624]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible 模块篇]]></title>
    <url>%2Farlo%2F7a718f23%2F</url>
    <content type="text"><![CDATA[Ansible 之所以能自动化完成这么多操作，都是依赖于丰富的模块；类似Jenkins软件的强大的插件支持 查看模块1[root@vm00 ~]# ansible-doc -l 查看模块参数用法12[root@vm00 ~]# ansible-doc -s module[root@vm00 ~]# ansible-doc help module ansible 命令格式1ansible 主机或组-m 模块名-a &apos;模块参数&apos; command 模块默认缺省模块12[root@vm00 ~]# ansible all -m command -a &quot;/bin/echo &apos;hello,sir.&apos;&quot;[root@vm00 ~]# ansible all -a &apos;chdir=/usr/local/src/ tar -cvzf test.tgz file&apos; shell 模块和command一样；支持管道1[root@vm00 ~]# ansible test -m shell -a &apos;ps -ef |grep java&apos; raw 模块和command一样；支持管道 ping 模块测试主机连通性，没有参数1[root@vm00 ~]# ansible all -m ping setup 模块查看主机参数配置filter 过滤参数，相当于grep功能1[root@vm00 ~]# ansible vm02 -m setup 将所有主机的信息输入到/tmp/facts目录下，每台主机的信息输入到主机名文件中（/etc/ansible/hosts里的主机名）1[root@vm00 ~]# ansible all -m setup --tree /tmp/facts 获取主机ip地址1[root@vm00 ~]# ansible vm02 -m setup -a &apos;filter=ansible_default_ipv4&apos; 获取主机内存使用情况1[root@vm00 ~]# ansible vm02 -m setup -a &apos;filter=ansible_memory_mb&apos; 获取主机名1ansible vm02 -m setup -a &apos;filter=ansible_nodename&apos; file 模块file模块主要用于远程主机上的文件操作，file模块包含如下选项：force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|nogroup：定义文件/目录的属组mode：定义文件/目录的权限owner：定义文件/目录的属主path：必选项，定义文件/目录的路径recurse：递归的设置文件的属性，只对目录有效src：要被链接的源文件的路径，只应用于state=link的情况dest：被链接到的路径，只应用于state=link的情况state： directory：如果目录不存在，创建目录 file：即使文件不存在，也不会被创建 link：创建软链接 hard：创建硬链接 touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间 absent：删除目录、文件或者取消链接文件 12345[root@vm00 ~]# ansible nsxq -m file -a &apos;src=/etc/hosts dest=/tmp/hosts&apos;[root@vm00 ~]# ansible nsxq -a &apos;ls -lh /tmp/hosts&apos;[root@vm00 ~]# ansible nsxq -m file -a &quot;path=/tmp/file1 state=touch&quot;[root@vm00 ~]# ansible nsxq -m file -a &quot;dest=/tmp/hosts mode=600 owner=airmodel group=airmodel&quot;[root@vm00 ~]# ansible nsxq -m file -a &quot;dest=/opt/test mode=755 owner=airmodel group=airmodel state=directory&quot; copy模块复制文件到远程主机，copy模块包含如下选项：backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|nocontent：用于替代”src”,可以直接设定指定文件的值dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录directory_mode：递归的设定目录的权限，默认为系统默认权限force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yesothers：所有的file模块里的选项都可以在这里使用src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用”/“来结尾，则只复制目录里的内容，如果没有使用”/“来结尾，则包含目录在内的整个内容全部复制，类似于rsync。12[root@vm00 ~]# ansible nsxq -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot;[root@vm00 ~]# ansible test -m copy -a &apos;src=/etc/fstab dest=/tmp/fstab owner=airmodel group=airmodel mode=644 backup=yes&apos; service 模块管理服务，该模块包含如下选项：arguments：给命令行提供一些选项enabled：是否开机启动 yes|noname：必选项，服务名称pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行runlevel：运行级别sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）ansible nsxq -m service -a ‘name=nginx state=started enabled=yes’1[root@vm00 ~]# ansible test -m service -a &apos;name=httpd state=started enabled=yes&apos; cron 模块用于管理计划任务包含如下选项：backup：对远程主机上的原任务计划内容修改之前做备份cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划day：日（1-31，，/2,……）hour：小时（0-23，，/2，……）minute：分钟（0-59，，/2，……）month：月（1-12，，/2，……）weekday：周（0-7，，……）job：要执行的任务，依赖于state=presentname：该任务的描述special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourlystate：确认该任务计划是创建还是删除user：以哪个用户的身份执行时间不特意指定的话，默认是 123[root@vm00 ~]# ansible nsxq -m cron -a &apos;name=&quot;update ntp time&quot; hour=2 user=root job=&quot;/usr/sbin/ntpdate cn.ntp.org.cn&quot;&apos;[root@vm00 ~]# ansible nsxq -m cron -a &apos;name=&quot;update ntp time&quot; state=absent&apos;[root@vm00 ~]# ansible test -m cron -a &quot;name=&apos;show date&apos; job=&apos;/root/test.sh&apos; backup=&apos;True&apos; hour=2 minute=*/5&quot; yum 模块使用yum包管理器来管理软件包，其选项有：config_file：yum的配置文件disable_gpg_check：关闭gpg_checkdisablerepo：不启用某个源enablerepo：启用某个源name：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径state：状态（present，absent，latest，installed）1234[root@vm00 ~]# ansible nsxq -m yum a &apos;name=httpd state=latest&apos;[root@vm00 ~]# ansible nsxq -m yum a &apos;name=&quot;@Development Tools&quot; state=present&apos;卸载操作[root@vm00 ~]# ansible test -m yum -a &quot;name=httpd state=absent&quot; user模块user模块是请求的是useradd, userdel, usermod三个指令。 home：指定用户的家目录，需要与createhome配合使用groups：指定用户的属组uid：指定用的uidpassword：指定用户的密码name：指定用户名createhome：是否创建家目录 yes|nosystem：是否为系统用户remove：当state=absent时，remove=yes则表示连同家目录一起删除，等价于userdel -rstate：是创建还是删除shell：指定用户的shell环境指定password的时候，需要指定加密后的密码，明文会直接写到/etc/shadow文件中，用户无法登陆123[root@vm00 ~]# echo &quot;ffffff&quot; | openssl passwd -1 -salt $(&lt; /dev/urandom tr -dc &apos;[:alnum:]&apos; | head -c 32) -stdin[root@vm00 ~]# ansible test -m user -a &apos;createhome=yes home=/home/user1 password=&quot;$1$01a9gEpb$nlv.OmSa1c4jDaGgeoDKi0&quot; name=user1 state=present shell=/bin/bash&apos;[root@vm00 ~]# ansible test -m user -a &apos;name=user1 state=absent remove=yes&apos; group 模块goup模块请求的是groupadd, groupdel, groupmod 三个指令。1[root@vm00 ~]# ansible test -m group -a &apos;name=group1 gid=700 state=present&apos; synchronize 模块使用rsync同步文件，其参数如下：archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启checksum: 跳过检测sum值，默认关闭compress:是否开启压缩copy_links：复制链接文件，默认为no ，注意后面还有一个links参数delete: 删除不存在的文件，默认nodest：目录路径dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议dirs：传速目录不进行递归，默认为no，即进行目录递归rsync_opts：rsync参数部分set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况mode: push或pull 模块，缺省模式是push；push模的话，一般用于从本机向远程主机上传文件，push的时候src是本机上的文件或目录; pull 模式用于从远程主机上取文件；pull的时候src是目标主机上的文件或目录目录后边跟/表示同步目录下内容，不加/把目录同步过去12[root@vm00 ~]# ansible test -m synchronize -a &apos;src=/etc/hosts dest=/tmp mode=push&apos;[root@vm00 ~]# ansible test -m synchronize -a &apos;src=/etc/fstab dest=/tmp mode=pull&apos; filesystem 模块在块设备上创建文件系统选项：dev：目标块设备force：在一个已有文件系统 的设备上强制创建fstype：文件系统的类型opts：传递给mkfs命令的选项123[root@vm00 ~]# ansible test -a &apos;dd if=/dev/zero of=/abc.img bs=4k count=10000&apos;[root@vm00 ~]# ansible test -a &apos;losetup /dev/loop0 /abc.img&apos;[root@vm00 ~]# ansible test -m filesystem -a &apos;fstype=ext4 dev=/dev/loop0 force=yes opts=-F&apos; mount 模块配置挂载点选项：dumpfstype：必选项，挂载文件的类型name：必选项，挂载点opts：传递给mount命令的参数src：必选项，要挂载的文件state：必选项 present：只处理fstab中的配置 absent：删除挂载点 mounted：自动创建挂载点并挂载之 umounted：卸载 1[root@vm00 ~]# ansible test -m mount -a &apos;name=/opt/abc src=/abc.img fstype=ext4 opts=loop state=mounted&apos; 模块的参数太多了，这篇文章基本上是copy过来的，这里贴一下出处：http://breezey.blog.51cto.com/2400275/1555530]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ansible 入门篇]]></title>
    <url>%2Farlo%2F40fad05f%2F</url>
    <content type="text"><![CDATA[Ansible (is Simple IT Automation) ,是一款自动化运维工具，基于强大的模块功能通过SSH协议推送到被管理端，可以实现的批量系统部署，批量程序部署，批量执行命令等 特性 不需要安装客户端，基于ssh连接管理 不需要配置服务，安装Ansible工具，可以执行命令就可以 拥有大量的模块 支持YAML语法 安装配置简单(门槛低) 被管理机器支持Windows 组成部分 Ansible 核心 Inventory Ansible管理主机的清单 Modules 包括Ansible自带的核心模块和自定义模块 Plugins 完成模块功能的补充，包括连接插件、邮件插件等 Playbooks 编排文件，定义Ansible多任务配置文件，实现Ansible自动执行 安装ansible软件需要主机有python环境，这个安装没啥说的，一键搞定，so easy！1yum -y install ansible 配置管理主机清单默认的主机清单文件是/etc/ansible/hosts 可以修改/etc/ansible/ansible.cfg文件中[defaults]下的#inventory参数来修改， 可以在执行命令时候使用-i参数来指定hosts文件 最简单的配置主机和组配置成主机名的时候，要确保主机名可以被解析(hosts或dns)123456[web]vm01vm02[db]192.168.6.100192.168.6.101 自定义参数ansible_ssh_user 用于指定管理远程主机的账号ansible_ssh_pass 用于指定管理远程主机的密码ansible_ssh_host 用于指定被管理的主机ansible_ssh_port 用于指定ssh的端口ansible_sudo_pass 用于sudo连接用户时的密码ansible_sudo_exec 如果sudo命令不在默认路径，需要指定sudo命令路径ansible_shell_type 目标系统的shell的类型，默认shansible_ssh_private_key_file 指定key文件1234[webservers]192.168.10.12 ansible_ssh_pass=123456 ansible_ssh_user=root192.168.10.13 ansible_ssh_pass=123456 ansible_ssh_user=root ansible_ssh_port=3055vm03 ansible_ssh_pass=123567 ansible_ssh_user=root 指定主机范围01:20 表示192.168.6.1到192.168.6.20共20台主机a:f 表示dba.islocal.cc 到dbf.islocal.cc共6台主机123[db]192.168.6.[01:20]db[a:f].islocal.cc 主机组嵌套，使用children关键字12345678910[mfs:children]mfs_amfs_bmfs_c[mfs_a]vm01[mfs_b]vm02[mfs_c]vm03 测试一下12ansible mfs -m pingansible mfs_c -m ping 调用匹配主机或主机组匹配所有all 或者 *1ansible all -m ping 匹配组直接写组名就ok1ansible test -m ping 逻辑非目标主机在nsxq组不在test组中，逻辑非使用！1ansible nsxq:!test -m ping 逻辑与目标主机在nsxq组并在test中，逻辑与使用&amp;1ansible nsxq:&amp;test -m ping 支持正则匹配匹配一web或者db开头.islocal.cc 的主机1ansible ~(web|db).*\.islocal\.cc -m ping 设置主机互信，配置SSH免密码登录由于ansible是基于ssh来远程管理，执行操作命令的，每次输入密码的话会很繁琐，配置ssh免密码就显得很方便 -k 命令会提示输入密码 修改配置文件/etc/ansible/ansible.cfghost_key_checking=False #当第一次连接远程主机时，会提示输入yes/no,跳过此环节 配置ssh免密码登录，可以参考我之前的另一篇文章SSH免密码验证 模块查看模块ansible-doc -l查看模块参数用法ansible-doc -s moduleansible-doc help module setup 模块查看主机参数配置ansible all -m setup ping 模块测试主机连通性ansible all -m ping file 模块[root@vm00 ~]# ansible nsxq -m file -a ‘src=/etc/hosts dest=/tmp/hosts’[root@vm00 ~]# ansible nsxq -a ‘ls -lh /tmp/hosts’[root@vm00 ~]# ansible nsxq -m file -“path=/tmp/file1 state=touch”[root@vm00 ~]# ansible nsxq -m file -a “dest=/tmp/hosts mode=600 owner=airmodel group=airmodel”[root@vm00 ~]# ansible nsxq -m file -a “dest=/opt/test mode=755 owner=airmodel group=airmodel state=directory” copy模块ansible nsxq -m copy -a “src=/etc/hosts dest=/tmp/hosts” command 模块【默认模块】ansible all -m command -a “/bin/echo ‘hello,sir.’”ansible all -a ‘chdir=/usr/local/src/ tar -cvzf test.tgz file’ shell 模块和command一样；支持管道 raw 模块和command一样 service 模块ansible nsxq -m service -a ‘name=nginx state=started enabled=yes’ cron 模块ansible nsxq -m cron -a ‘name=”update ntp time” hour=2 user=root job=”/usr/sbin/ntpdate cn.ntp.org.cn”‘ansible nsxq -m cron -a ‘name=”update ntp time” state=absent’ filesystem 模块yum 模块ansible nsxq -m yum a ‘name=httpd state=installed’ansible nsxq -m yum a ‘name=”@Development Tools” state=present’ user 模块ansible nsxq -m user -a ‘createhome=yes home=/home/user1 password=”ffffff” name=user1 state=present shell=/bin/bash’ synchronize 模块目录后边跟/表示同步目录下内容，不加/把目录同步过去ansible nsxq -m synchronize -a ‘src=/etc/hosts dest=/opt/‘ filesystem 模块ansible test -m filesystem -a ‘dev=/disk.img fstype=ext4 opts=-F’ mount 模块ansible test -m mount -a ‘fstype=ext4 name=/aaa src=/dev/loop0 state=mounted’]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Except实践之 修改主机密码&添加用户&ssh免密码验证]]></title>
    <url>%2Farlo%2F45fa6416%2F</url>
    <content type="text"><![CDATA[最近运维工作中遇到大批量的主机需要添加账户，修改密码，实现无密码验证等工作，由于这种工作完全是重复性的，可以借助脚本（更好的方式是自动化运维工具）来解决，主要是使用到expect工具，该工具主要用来处理自动交互式任务进行通信，不需要人为干预；今天就把用到的脚本在此记录一下，以备后用。 批量修改主机密码脚本内容如下：1234567891011121314151617181920[root@vm00 ~]# cat chpasswd.sh #!/bin/bashfile=&quot;iplist.txt&quot;for ip in `awk &apos;/^[^#]/&#123;print $1&#125;&apos; $file`; do port=`awk -v I=$ip &apos;&#123;if(I==$1)print $3&#125;&apos; $file` user=`awk -v I=$ip &apos;&#123;if(I==$1)print $2&#125;&apos; $file` pass=`awk -v I=$ip &apos;&#123;if(I==$1)print $4&#125;&apos; $file` newpass=`awk -v I=$ip &apos;&#123;if(I==$1)print $5&#125;&apos; $file`expect -c &quot; spawn ssh -p$port $user@$ip set timeout 2 expect &#123; \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;;exp_continue&#125; \&quot;password:\&quot; &#123;send \&quot;$pass\r\&quot;;exp_continue&#125; \&quot;$user@*\&quot; &#123;send \&quot;echo \&apos;$newpass\&apos; |passwd --stdin $user\r exit\r\&quot;;exp_continue&#125;#\&quot;$user@*\&quot; &#123;send \&quot;df -h\r exit\r\&quot;;exp_continue&#125; &#125;&quot;done iplist.txt 格式如下12345[root@vm00 ~]# cat iplist.txt # ip user port passwd newpasswd#------------------------------------------------192.168.6.101 root 22 ffffff gggggg192.168.6.102 root 22 ffffff gggggg 批量主机ssh免密码验证手动操作ssh无密码验证设置hosts记录123456[root@vm00 ~]# cat /etc/hosts\#127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 oracle11g\#::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.6.100 vm00192.168.6.101 vm01192.168.6.102 vm02 新建用户并设置密码（每台机器都执行）1234[root@vm00 ~]# useradd -u 600 airmodel[root@vm00 ~]# echo &quot;ffffff&quot; |passwd --stdin airmodelChanging password for user airmodel.passwd: all authentication tokens updated successfully. 配置无密码访问key1234567891011121314151617181920212223[root@vm00 ~]# su - airmodel[airmodel@vm00 ~]$ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/home/airmodel/.ssh/id_rsa): Created directory &apos;/home/airmodel/.ssh&apos;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/airmodel/.ssh/id_rsa.Your public key has been saved in /home/airmodel/.ssh/id_rsa.pub.The key fingerprint is:3a:d9:04:80:20:6a:90:8a:cd:c7:ee:fb:2d:d9:03:cd airmodel@vm00The key&apos;s randomart image is:+--[ RSA 2048]----+|+o .. ||= . . ||++ . . ||+ o o . || o oS || . .=E || . ++. || . ooo || .o.... |+-----------------+ 将生成的公钥拷贝到其他主机标准命令格式：ssh-copy-id -i ~/.ssh/id_rsa.pub user@server偷懒可以写成下边这种：1234567[airmodel@vm00 ~]$ ssh-copy-id -i vm02airmodel@vm02&apos;s password: Now try logging into the machine, with &quot;ssh &apos;vm02&apos;&quot;, and check in: .ssh/authorized_keysto make sure we haven&apos;t added extra keys that you weren&apos;t expecting. 验证1.公钥会被拷贝到目标主机的 /home/user/.ssh/authorized_keys 文件中2.[airmodel@vm00 ~]$ ssh vm02 无密码访问 多主机自动化配置ssh免密脚本添加用户脚本12345678910111213141516171819[root@vm00 ~]# cat padduser.sh #!/bin/bashfile=&quot;iplist2.txt&quot;newuser=&quot;airmodel&quot;newpass=&quot;ffffff&quot;for ip in `awk &apos;/^[^#]/&#123;print $1&#125;&apos; $file`; do port=`awk -v I=$ip &apos;&#123;if(I==$1)print $3&#125;&apos; $file` loginuser=`awk -v I=$ip &apos;&#123;if(I==$1)print $2&#125;&apos; $file` pass=`awk -v I=$ip &apos;&#123;if(I==$1)print $4&#125;&apos; $file`expect -c &quot; spawn ssh -p$port $loginuser@$ip set timeout 2 expect &#123; \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;;exp_continue&#125; \&quot;password:\&quot; &#123;send \&quot;$pass\r\&quot;;exp_continue&#125; \&quot;$user@*\&quot; &#123;send \&quot;useradd -u 600 $newuser &amp;&amp; echo \&apos;$newpass\&apos; |passwd --stdin $newuser\r exit\r\&quot;;exp_continue&#125;#\&quot;$user@*\&quot; &#123;send \&quot;df -h\r exit\r\&quot;;exp_continue&#125; &#125;&quot;done iplist2.txt内容123# ip user port passwd #--------------------------------------192.168.6.102 root 22 ffffff 多主机拷贝ssh公钥12345678910111213141516#!/bin/bash#批量ssh无密码验证for p in $(cat /opt/iplist3.txt)doip=$(echo &quot;$p&quot;|cut -f1 -d &quot;:&quot;)password=$(echo &quot;$p&quot;|cut -f2 -d &quot;:&quot;)expect -c &quot; spawn ssh-copy-id -i /home/airmodel/.ssh/id_rsa.pub airmodel@$ip expect &#123; \&quot;*yes/no*\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125; \&quot;*password*\&quot; &#123;send \&quot;$password\r\&quot;; exp_continue&#125; \&quot;*Password*\&quot; &#123;send \&quot;$password\r\&quot;;&#125; &#125; &quot; done iplist3.txt 格式1234567#user:passwd#-----------vm01:ffffffvm02:ffffffvm03:ffffffvm04:ffffffvm05:ffffff 参考连接：http://zqscm.qiniucdn.com/data/20110709133541/index.htmlhttps://blog.slogra.com/post-674.htmlhttp://blog.csdn.net/fanren224/article/details/63250184]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>expect</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 下使用expdp自动备份多用户oracle脚本]]></title>
    <url>%2Farlo%2F85974653%2F</url>
    <content type="text"><![CDATA[Windows下多Oracle实例，根据用户自动备份12345678910111213141516171819@echo off echo ================================================ echo Windows环境下Oracle数据库的自动备份脚本 echo 1. 使用当前日期命名备份文件。 echo 2. 自动删除30天前的备份。 echo ================================================ ::以“YYYYMMDD”格式取出当前时间。 set BACKUPDATE=%date:~0,4%%date:~5,2%%date:~8,2% set DATADIR=E:\database_backup\%BACKUPDATE%echo 本次备份目录是%DATADIR%echo ================================================ echo 开始备份数据库for %%u in (AIR_FORECAST,ALK,AIR_FZ,TSUBJECT,TMAIN,TCODE,AIR_YBYJ,AIR_FXPT,INVENTORY,TENV,NEWMBGL) do expdp userid=&apos;sys/密码@实例 as sysdba&apos; schemas=%%u directory=DATA_PUMP_DIR dumpfile=%%u.dmpecho 移动文件到数据库备份目录if not exist &quot;E:\database_backup\%BACKUPDATE%&quot; mkdir E:\database_backup\%BACKUPDATE% MOVE /Y E:\app\Administrator\admin\SX21\dpdump\* E:\database_backup\%BACKUPDATE%::删除30天前的备份forfiles /p E:\database_backup\ /m 201* /d -30 /c &quot;cmd /c if @isdir==TRUE (rmdir /q /s @path) else (del /f @path)&quot; exit 参考：http://www.cnblogs.com/peterpanzsy/p/3442784.htmlhttp://blog.csdn.net/smasegain/article/details/46759267]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NIS 服务器搭建记录]]></title>
    <url>%2Farlo%2F3e02ce74%2F</url>
    <content type="text"><![CDATA[概述NIS是Network Information Services (NIS server)的缩写，是为了管理一个网络中的用户账号 ，以方便用户在不同的主机上登录时只需要一个账号即可，它将用户的账号保存在一个主机上，用户登录时只需向其发送请求确认账号是否正确。 NIS 的主要功能：管理帐户信息服务器端文件名 档案内容/etc/passwd 提供用户账号、UID、GID、家目录所在、Shell 等等/etc/group 提供群组数据以及 GID 的对应，还有该群组的加入人员/etc/hosts 主机名与 IP 的对应，常用于 private IP 的主机名对应/etc/services 每一种服务 (daemons) 所对应的埠口 (port number)/etc/protocols 基础的 TCP/IP 封包协定，如 TCP, UDP, ICMP 等/etc/rpc 每种 RPC 服务器所对应的程序号码/var/yp/ypservers NIS 服务器所提供的数据库 NIS Server端配置yp-tools ：提供 NIS 相关的查寻指令功能。ypbind ：提供 NIS Client 端的设定软件。ypserv ：提供 NIS Server 端的设定软件。rpcbind ：就是 RPC ，系统一般会安装上。 安装NIS Server 端软件12[root@sg010 ~]# yum -y install yp-tools ypbind ypserv rpcbind[root@sg010 ~]# rpm -qa | grep &apos;^yp&apos; ypbind-1.20.4-33.el6.x86_64yp-tools-2.9-12.el6.x86_64ypserv-2.19-31.el6.x86_641[root@sg010 ~]# rpm -qa | grep rpcbind rpcbind-0.2.0-13.el6_9.x86_64 配置hosts文件Hosts文件中之前的记录不要动，新增包含nis server 和 nis client 的主机与ip对应记录1234[[root@sg010 ~]# vim /etc/sysconfig/network\#增加以下两行NISDOMAIN=hpcnisYPSERV_ARGS=&quot;-p 1011&quot; 配置nis服务12345678910[root@sg010 ~]# egrep -v &apos;^$|#&apos; /etc/ypserv.conf dns: nofiles: 30xfr_check_port: yes\* : * : shadow.byname : port\* : * : passwd.adjunct.byname : port127.0.0.0/255.0.0.0 :*:*:none218.193.126.128/255.255.255.128 :*:*:none59.77.252.0/255.255.255.192 :*:*:none\* :*:*:deny 12[root@sg010 ~]# vim /etc/sysconfig/yppasswddYPPASSWDD_ARGS=&quot;--port 1012&quot; 启动服务启动后查看一下三个服务状态1[root@sg010 ~]# /etc/init.d/rpcbind status rpcbind (pid 18813) is running…1[root@sg010 ~]# /etc/init.d/ypserv status ypserv (pid 21054) is running…1[root@sg010 ~]# /etc/init.d/yppasswdd status rpc.yppasswdd (pid 23087) is running…并设置开机自启动123[root@sg010 ~]# chkconfig --level 35 ypserv on[root@sg010 ~]# chkconfig --level 35 yppasswdd on[root@sg010 ~]# chkconfig --level 35 rpcbind on 添加用户，设置密码[root@sg010 ~]# useradd -u 1001 nisuser1[root@sg010 ~]# echo ffffff|passwd –stdin nisuser1[root@sg010 ~]# /usr/lib64/yp/ypinit -m Client 端配置[root@sg011 ~]# yum -y install ypbind yp-tools[root@sg011 ~]# rpm -qa |grep ‘^yp’yp-tools-2.9-12.el6.x86_64ypbind-1.20.4-30.el6.x86_64 配置NIS1[root@sg011 ~]# setup xshell 的配色方案修改过，所以这里看到的图片颜色也不是那种蓝底色的勾选NIS，启用NIS验证填写NIS的服务器域名和服务器地址Starting rpcbind: [ OK ]Starting NIS service: [ OK ]Binding NIS service: . [ OK ]刚才的步骤其实就是做了以下操作 /etc/sysconfig/network (加入 NISDOMAIN 项目) /etc/yp.conf (亦即是 ypbind 的配置文件) /etc/nsswitch.conf (修改许多主机验证功能的顺序) /etc/sysconfig/authconfig (CentOS 的认证机制) /etc/pam.d/system-auth (许多登入所需要的 PAM 认证过程) 启动了rpcbind 和 ypbind服务 /etc/sysconfig/network /etc/yp.conf /etc/nsswitch.conf主机验证顺序12345passwd: files nisshadow: files nisgroup: files nis\#hosts: db files nisplus nis dnshosts: files nis dns /etc/sysconfig/authconfig启用NIS1USENIS=yes /etc/pam.d/system-auth在pam验证过程中增加了nis1password sufficient pam_unix.so sha512 shadow nis nullok try_first_pass use_authtok 客户端简单粗暴的验证方法切换用户验证12[root@sg011 ~]# grep nisuser1 /etc/passwd[root@sg011 ~]# su - nisuser1 su: warning: cannot change directory to /home/nisuser1: No such file or directory-bash-4.1$ 没有用户主目录两种解决方式 新建一个/home/nisuser1目录,cp /etc/skel/* /home/niuser1 使用nfs，挂载nis server的home目录，客户端和服务器使用的是同一个用户目录，保持一致性（推荐）修改用户的默认shell在客户端执行 ypchsh 参考：http://cn.linux.vbird.org/linux_server/0430nis.php]]></content>
      <tags>
        <tag>NIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NFS 服务器搭建记录]]></title>
    <url>%2Farlo%2Fdd17c5bd%2F</url>
    <content type="text"><![CDATA[系统环境Centos 6.5Iptables：offSelinux：disabled 由于MBR分区表只支持2T的硬盘，/dev/sdb是一块10T的硬盘，使用GPT分区表，需要使用parted工具分区 使用fdisk查看磁盘ps：这个之后又增加了一块10T的硬盘，这个截图早一点，没提现出来 使用parted工具分区1[root@sg020 ~]# parted /dev/sdb GNU Parted 2.1Using /dev/sdbWelcome to GNU Parted! Type ‘help’ to view a list of commands.(parted) printModel: VMware Virtual disk (scsi)Disk /dev/sdb: 9896GBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags (parted) mkpart primary 0 10TWarning: The resulting partition is not properly aligned for best performance.Ignore/Cancel? Ignore (parted) print Model: VMware Virtual disk (scsi)Disk /dev/sdb: 9896GBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags 1 17.4kB 9896GB 9896GB primary (parted) quit Information: You may need to update /etc/fstab.(parted) set 1 lvm on (parted) print Model: VMware Virtual disk (scsi)Disk /dev/sdb: 9896GBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags 1 17.4kB 9896GB 9896GB ext4 primary lvm(parted) quit Information: You may need to update /etc/fstab.1[root@sg020 ~]# parted /dev/sdc GNU Parted 2.1Using /dev/sdcWelcome to GNU Parted! Type ‘help’ to view a list of commands.(parted) print Error: /dev/sdc: unrecognised disk label(parted) mklabel gpt (parted) print Model: VMware Virtual disk (scsi)Disk /dev/sdc: 11.0TBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags (parted) mkpart primary 0 10995G Warning: The resulting partition is not properly aligned for best performance.Ignore/Cancel? Ignore (parted) print Model: VMware Virtual disk (scsi)Disk /dev/sdc: 11.0TBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags 1 17.4kB 11.0TB 11.0TB primary (parted) set 1 lvm on (parted) print Model: VMware Virtual disk (scsi)Disk /dev/sdc: 11.0TBSector size (logical/physical): 512B/512BPartition Table: gpt Number Start End Size File system Name Flags 1 17.4kB 11.0TB 11.0TB primary lvm (parted) quit Information: You may need to update /etc/fstab. lvm 划分创建pv1[root@sg020 ~]# pvcreate /dev/sdb1 /dev/sdc1 dev_is_mpath: failed to get device for 8:17 Physical volume “/dev/sdb1” successfully created dev_is_mpath: failed to get device for 8:33 Physical volume “/dev/sdc1” successfully created1[root@sg020 ~]# pvdisplay — Physical volume — PV Name /dev/sda2 VG Name vg_sg020 PV Size 193.51 GiB / not usable 3.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 49538 Free PE 0 Allocated PE 49538 PV UUID BF6Ikw-eYtl-HfNM-Nnmt-WLK4-xb8O-KAnZtB “/dev/sdb1” is a new physical volume of “9.00 TiB” — NEW Physical volume — PV Name /dev/sdb1 VG Name PV Size 9.00 TiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID aPPVxz-oeWE-lP9l-AeZU-p699-pffd-O7T3dW “/dev/sdc1” is a new physical volume of “10.00 TiB” — NEW Physical volume — PV Name /dev/sdc1 VG Name PV Size 10.00 TiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID MWbqIl-WI66-JCsc-x0Re-UqjL-HgXB-Vw1jge 创建vg1[root@sg020 ~]# vgcreate vg_fuz /dev/sdb1 /dev/sdc1 Volume group “vg_fuz” successfully created1[root@sg020 ~]# vgdisplay — Volume group — VG Name vg_fuz System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 1 VG Access read/write VG Status resizable MAX LV 0 Cur LV 0 Open LV 0 Max PV 0 Cur PV 2 Act PV 2 VG Size 19.00 TiB PE Size 4.00 MiB Total PE 4980734 Alloc PE / Size 0 / 0 Free PE / Size 4980734 / 19.00 TiB VG UUID ruDcio-mmt5-z6YD-7HS0-fbst-GIlT-SwmvcF — Volume group — VG Name vg_sg020 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 4 VG Access read/write VG Status resizable MAX LV 0 Cur LV 3 Open LV 3 Max PV 0 Cur PV 1 Act PV 1 VG Size 193.51 GiB PE Size 4.00 MiB Total PE 49538 Alloc PE / Size 49538 / 193.51 GiB Free PE / Size 0 / 0 VG UUID 2E6Hdt-xWhi-DyLX-pDva-3WTw-fDNx-Qytoqg 创建lv1[root@sg020 ~]# lvcreate -n lv_fuz -l 4980734 vg_fuz Logical volume “lv_fuz” created1[root@sg020 ~]# lvdisplay — Logical volume — LV Path /dev/vg_fuz/lv_fuz LV Name lv_fuz VG Name vg_fuz LV UUID JTUEVa-9JPb-0VaD-5JH8-fwov-MuUS-gp1Gdr LV Write Access read/write LV Creation host, time sg020, 2017-06-14 09:27:14 +0800 LV Status available # open 0 LV Size 19.00 TiB Current LE 4980734 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:3 — Logical volume — LV Path /dev/vg_sg020/lv_root LV Name lv_root VG Name vg_sg020 LV UUID 5yHVBf-Qt3u-fzb2-gwNL-opy3-0ewQ-0ypYsc LV Write Access read/write LV Creation host, time livedvd.centos, 2017-06-09 15:49:11 +0800 LV Status available # open 1 LV Size 50.00 GiB Current LE 12800 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 — Logical volume — LV Path /dev/vg_sg020/lv_home LV Name lv_home VG Name vg_sg020 LV UUID d1bsIq-ZeVr-mxk1-Mu2U-7H1R-wXMX-rWZ9hj LV Write Access read/write LV Creation host, time livedvd.centos, 2017-06-09 15:49:19 +0800 LV Status available # open 1 LV Size 124.11 GiB Current LE 31772 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:2 — Logical volume — LV Path /dev/vg_sg020/lv_swap LV Name lv_swap VG Name vg_sg020 LV UUID wGW4BB-KB5g-UUZ8-FwLQ-pTYy-Eoc2-ji102r LV Write Access read/write LV Creation host, time livedvd.centos, 2017-06-09 15:49:37 +0800 LV Status available # open 1 LV Size 19.40 GiB Current LE 4966 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 格式化分区1[root@sg020 ~]# mkfs.ext4 /dev/vg_fuz/lv_fuz mke2fs 1.41.12 (17-May-2010)mkfs.ext4: Size of device /dev/vg_fuz/lv_fuz too big to be expressed in 32 bits using a blocksize of 4096. ext4格式的分区，不支持大于16TB的硬盘分区，我们使用xfs格式12[root@sg020 ~]# yum install xfsprogs[root@sg020 ~]# mkfs.xfs /dev/vg_fuz/lv_fuz 查找分区UUID1[root@sg020 ~]# blkid /dev/vg_fuz/lv_fuz /dev/vg_fuz/lv_fuz: UUID=”3c2731e9-eac4-4e05-b103-be061e4c009c” TYPE=”xfs” 添加到fstab12[root@sg020 ~]# mkdir /data[root@sg020 ~]# echo &apos;UUID=3c2731e9-eac4-4e05-b103-be061e4c009c /data xfs defaults 0 0&apos; &gt;&gt; /etc/fstab 挂载分区12[root@sg020 ~]# mount –a[root@sg020 ~]# mount |column –t 查看安装nfs软件12[root@sg020 ~]# yum -y install nfs-utils rpcbind[root@sg020 ~]# rpm -qa |grep nfs nfs-utils-1.2.3-39.el6.x86_64nfs-utils-lib-1.1.5-6.el6.x86_64nfs4-acl-tools-0.3.3-6.el6.x86_61[root@sg020 ~]# rpm -qa |grep rpcbind rpcbind-0.2.0-11.el6.x86_6412/etc/exports文件内容格式：&lt;输出目录&gt; [客户端1 选项（访问权限,用户映射,其他）] [客户端2 选项（访问权限,用户映射,其他）] 12[root@sg020 ~]# cat /etc/exports /data 218.193.126.128/25(insecure,rw,async,no_root_squash) 59.77.252.0/26(insecure,rw,async,no_root_squash) NFS的常用目录/etc/exports NFS服务的主要配置文件/usr/sbin/exportfs NFS服务的管理命令/usr/sbin/showmount 客户端的查看命令/var/lib/nfs/etab 记录NFS分享出来的目录的完整权限设定值/var/lib/nfs/xtab 记录曾经登录过的客户端信息 启动服务1[root@sg020 ~]# /etc/init.d/rpcbind start Starting rpcbind: [ OK ]1[root@sg020 ~]# /etc/init.d/nfs start Starting NFS services: [ OK ]Starting NFS quotas: [ OK ]Starting NFS mountd: [ OK ]Starting NFS daemon: [ OK ]Starting RPC idmapd: [ OK ]12[root@sg020 ~]# chkconfig --level 35 rpcbind on[root@sg020 ~]# chkconfig --level 35 nfs on 重新共享所有目录并输出详细信息1[root@sg020 ~]# exportfs -rv exporting 218.193.126.128/25:/dataexporting 59.77.252.0/26:/data 卸载所有共享目1[root@sg020 ~]# exportfs -au 客户端挂载1234[root@sg011 ~]# mount -t nfs sg020:/data/ /data[root@sg011 ~]# echo “sg020:/data /data nfs nolock 0 0” &gt;&gt; /etc/fstab[root@sg011~]# mount –a[root@sg011 ~]# mount |column –t user &amp; group 是nobody的问题由于centos6以后采用的是nfs v4，所以在挂载后，服务端和客户端看到的信息不一致，客户端看到文件的user和group都是nobody 或nfsnobody，以下是解决办法 服务端修改配置文件12# vi /etc/idmapd.confDomain = hpcnfs 重启服务12/etc/init.d/rpcidmapd restart chkconfig --level 35 rpcidmapd on 客户端修改配置文件12# vi /etc/idmapd.confDomain = hpcnfs 清除缓存1nfsidmap -c 重启服务12/etc/init.d/rpcidmapd restart chkconfig --level 35 rpcidmapd on 问题解决重启之后，如果客户端提示“Stale file handle”，三种解决方法：1231. umount /data;mount -a2. fuser -km /data; mount -a3. umount -lv /data; mount -a lvm扩容，“resize2fs: Device or resource busy while trying to open”，解决方法如下：其实做lvm不需要分区，直接将整个盘做成pv；扩容的vg时候，可以更懒一点，pv都不用做，直接vgextend；1vgextend vg_fuz /dev/sdc 在扩容lv的时候，更加方便的做法是使用pe扩容，而不是容量（-L是容量，-l是PE，可以通过vgdisplay查看剩余）；1lvextend -l +3000 /dev/vg_fuz/lv_fuz fdisk可以看到到容量已经变化了，但是df还看不出来，我们可以使用resize2fs命令重设；1resize2fs /dev/vg_fuz/lv_fuz xfs 文件系统 resize2fs已经不适用了，需要用到一个新的命令xfs_growfs； xfs_growfs /dev/vg_fuz/lv_fuz 因为整个环境是内网环境，需要拨vpn才能访问，我没有配置iptables，nfs的iptables配置也比较麻烦，回头研究一下；另，今天遇到一个很有意思的情况（其实就是自己学艺不精），由于Nfs给两个网段提供服务，牵扯到一个跨网段的问题；我看了下服务器上的配置的网络情况，根据ip地址所在的网段（218.193.126.x和59.77.252.x）和子网掩码（25和26），配置了/data 218.193.126.0/25(insecure,rw,async,no_all_squash) 59.77.252.0/26(insecure,rw,async,no_all_squash)，之后的情况就很诡异，59这个网络是可以正常访问的，218这个网络提示没有权限（mount.nfs: access denied by server while mounting sg020:/data/），搞得我很纳闷，配置到精确的ip地址就没有问题；后来经群里高手点播，网络和掩码的计算（218.193.126.0/25意思应该是218.193.126.1~218.193.126.127），我的服务器ip是不在范围内的，回头需要补习一下网络基础。]]></content>
      <tags>
        <tag>Nfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle TNS-12541、TNS-00511 无监听程序]]></title>
    <url>%2Farlo%2F6e04db84%2F</url>
    <content type="text"><![CDATA[一台Windows服务器上安装的oralce服务器很卡，于是同事就重启了一下，然后……，你想到了，起不来了。折腾了好久，服务器终于起来了，oracle起不来，记录一下故障原因 提示错误信息如下：12345678910111213141516Fatal NI connect error 12541, connecting to: (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=WIN-EPRQ7FK9EK2)(PORT=1521))(CONNECT_DATA=(SID=orcl)(CID=(PROGRAM=E:\app\Administrator\product\11.2.0\dbhome_4\bin\emagent.exe)(HOST=WIN-EPRQ7FK9EK2)(USER=SYSTEM)))) VERSION INFORMATION: TNS for 64-bit Windows: Version 11.2.0.1.0 - Production Windows NT TCP/IP NT Protocol Adapter for 64-bit Windows: Version 11.2.0.1.0 - Production Time: 13-6月 -2017 10:58:58 Tracing not turned on. Tns error struct: ns main err code: 12541 TNS-12541: TNS: 无监听程序 ns secondary err code: 12560 nt main err code: 511 TNS-00511: 无监听程序 nt secondary err code: 61 nt OS err code: 0 故障原因oracle运行时间过长，listener.log日志超过4G导致，此为oracle bug；BUG号为9879101 : THE CONNECT THROUGH LISTENER WAS SLOW WHEN LISTNER LOG GROWED 4GB 解决方法 找到日志文件 E:\app\Administrator\diag\tnslsnr*WIN-EPRQ7FK9EK2*\listener\trace\listener.log 经查看，该日志大小为4.00 GB (4,294,967,340 字节) 删除该文件，启动监听、服务，恢复正常 顺手写个脚本放计划任务里12345678910111213141516@echo off echo ================================================ echo E:\app\Administrator\diag\tnslsnr\WIN-EPRQ7FK9EK2\listener\trace\listener.log 备份文件，用来解决日志问超过4G，数据库监听死掉问题 echo ================================================ ::以“YYYYMMDD”格式取出当前时间。 set BACKUPDATE=%date:~0,4%%date:~5,2%%date:~8,2% set DATADIR=E:\app\Administrator\diag\tnslsnr\WIN-EPRQ7FK9EK2\listener\trace\echo 备份日志文件e:cd %DATADIR%lsnrctl set log_status offrename listener.log listener.log_%BACKUPDATE%lsnrctl set log_status onecho 删除30天以前的日志文件forfiles -p %DATADIR% -s -m listener.log_* -d -30 -c &quot;cmd /c del @path&quot;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在已存在的目录中增加一层路径]]></title>
    <url>%2Farlo%2Fffa6a879%2F</url>
    <content type="text"><![CDATA[由于之前项目上考虑不周，路径配置的有问题，现在需要在已有的目录中某一级增加一层目录，需要解决几个问题；12/data/Model3/WeatherForecast/CAMX/2017/05/01/&#123;d1,d2,d3&#125;/data/Model3/WeatherForecast/CAMX/2017/05/01/00/&#123;d1,d2,d3&#125; 多级目录，多个参数，CAMX/2017/05/01 这四个参数是变化的 判断父级目录是否存在，存在后增加一层目录 移动之前的数据到当前目录 以下是我写的脚本，能满足使用，稍显繁琐，求优化！123456789101112131415161718192021222324#!/bin/bashdir=&apos;/data/Model3/WeatherForecast&apos;#dir1=&quot;NAQMPSDAY&quot;dir1=&quot;CAMX CAMxDAY CMAQDAY CMAQ.WRF NAQMPS NAQMPSDAY WRF WRFCHEM WRFCHEMDAY&quot;dir2=&quot;2016 2017&quot;for i1 in $dir1;do for i2 in $dir2; do for i3 in &#123;01..12&#125;; do for i4 in &#123;01..31&#125;; do dir4=&quot;$dir/$i1/$i2/$i3/$i4&quot;# echo $dir4 if [ -d $dir4 ];then cd $dir4 mkdir $dir4/00 mv d* $dir4/00 fi done done donedone 以下是执行前后的效果对比图（使用tree -L 5 &gt; 2.txt生成）]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>脚本</tag>
        <tag>linux常识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 多实例启动]]></title>
    <url>%2Farlo%2F6b9bbb19%2F</url>
    <content type="text"><![CDATA[oracle 服务器上配置了两个实例，orcl和sx21，启动服务的时候需要手动修改一下环境变量ORACLE_SID,在此记录一下。 手动启动oracle 用户的环境变量.bash_profile12345678ORACLE_BASE=/u01/app/oracleORACLE_HOME=$ORACLE_BASE/product/11.1.0/db_1ORACLE_SID=orclPATH=$PATH:$ORACLE_HOME/bin:$HOME/binLD_LIBRARY_PATH=$ORACLE_HOME/libexport PATH ORACLE_BASE ORACLE_HOME ORACLE_SID PATH LD_LIBRARY_PATHexport LANG=zh_CN.UTF-8export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK 查看环境变量1234[oracle@localhost ~]$ echo $ORACLE_HOME/u01/app/oracle/product/11.1.0/db_1[oracle@localhost ~]$ echo $ORACLE_SIDorcl 启动oracle服务12345su - oraclesqlplus /nologsql&gt; conn /as sysdbasql&gt; startupsql&gt; exit 修改ORACLE_SID环境变量，再次执行第3步的启动操作1export ORACLE_SID=SX21 启动监听服务1lsnrctl start 验证1[oracle@localhost ~]$ sqlplus sys/password@SX21 as sysdba 自动启动修改控制文件1234vim /etc/orataborcl:/u01/app/oracle/product/11.1.0/db_1:Ysx21:/u01/app/oracle/product/11.1.0/db_1:YCQ:/u01/app/oracle/product/11.1.0/db_1:Y 修改dbstart文件修改第80行: ORACLE_HOME_LISTNER=$1为ORACLE_HOME_LISTNER=$ORACLE_HOME1234vim /u01/app/oracle/product/11.1.0/db_1/bin/dbstart……ORACLE_HOME_LISTNER=$ORACLE_HOME …… 修改dbshut文件修改第50行: ORACLE_HOME_LISTNER=$1为ORACLE_HOME_LISTNER=$ORACLE_HOME1234vim /u01/app/oracle/product/11.1.0/db_1/bin/dbshut……ORACLE_HOME_LISTNER=$ORACLE_HOME…… 修改开机启动文件123vim /etc/rc.localsu - oracle -lc &quot;/u01/app/oracle/product/11.1.0/db_1/bin/lsnrctl start&quot;su - oracle -lc &quot;/u01/app/oracle/product/11.1.0/db_1/bin/dbstart&quot; 常用的三个图形控制如下启动em控制台123emctl start dbconsole#添加到开机启动文件中su - oracle -lc &quot;$ORACLE_HOME/bin/emctl start dbconsole&quot; 创建数据库1dbca 配置监听12netcanetmgr]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle入门]]></title>
    <url>%2Farlo%2F9f698189%2F</url>
    <content type="text"><![CDATA[服务、监听启动oracle服务12345su - oraclesqlplus /nologsql&gt; conn /as sysdbasql&gt; startupsql&gt; exit 启动监听服务1lsnrctl start 配置监听1netca 启动em控制台1emctl start dbconsole 创建数据库1dbca 连接数据库12sqlplus /nologconn / as sysdba; 连接数据库1conn system/password; 断开数据库连接1disc[onnect] 将屏幕上的内容输入到文件中123spool d:\a.txt……spool off; 创建用户 密码必须以字母开头1create user xiaoming identified by m123; sys用户：超级管理员，权限最高，dba角色，默认密码：change_on_installsystem用户：系统管理员，没有create database权限，默认密码：manager普通用户：新建的用户无登录数据库权限查看当前用户1show user； 修改密码121. passw[ord]2. alter user 用户名 identified by 新密码; 删除用户如果用户已经创建表，删除的时候加一个cascade参数1drop user 用户名 cascade 如果一个用户正在被占用，报错ORA-01940: cannot drop a user that is currently connected1SELECT &apos;ALTER SYSTEM KILL SESSION &apos;||&apos;&apos;&apos;&apos;||SID||&apos;&apos;&apos;&apos;||&apos;,&apos;||&apos;&apos;&apos;&apos;||SERIAL#||&apos;&apos;&apos;&apos;||&apos;;&apos; as KILLER FROM V$SESSION WHERE USERNAME=&apos;USER&apos;; 授予权限12grant select on emp to xiaoming;grant all on emp to xiaoming; 收回权限1revoke all on emp to xiaoming; 收回上级权限，下级权限也相应取消对象权限授权123grant select on emp to xiaoming with grant option;conn xiaoming/m1234;grant select on scott.emp to xiaohong; 系统权限授权123grant connect to xiaoming with admin option;conn xiaoming/1234;grant connect to xiaohong; 用户口令管理建立数据库时候，oracle会建立默认的default的profile，当没有给用户指定profile的时候，oracle会将default的profile分配给用户创建profile文件用户输入3次错误密码后被锁定2天12create profile lock_account limit failed_login_attempts 3 password_lock_time 2;alter user xiaoming profile lock_account; 用户解锁1alter user xiaoming account unlock; 定期修改密码要求用每隔30天修改登录密码，宽限期为2天，32天后没有修改将不能登录12create profile myprofile limit password_life_time 30 password_grace_time 2;alter user xiaoming profile myprofile; 口令历史希望用户修改密码的时候，不能使用之前的密码；使用口令历史，oracle会将之前的密码存在数据字典中，当用户修改密码时，oracle会将新输入的密码和旧密码进行比对，如果一样，会提示重新输入。不能使用10内使用过的密码12create profile password_history limit password_life_time 10 password_grace_time 2 password_reuse_time 10alter user xiaoming profile password_history; 删除profile文件1drop profile password_history [cascade] ###############Day2############创建表必须以字母开头长度不能超过30个字符不能使用oracle保留字只能使用a-zA-Z0-9$# 字符型char 2000varchar2 4000clob 4000+数字型number 整数，小数 -(10^38) ~ 10^38日期类型date 包含年月日和时分秒timestamp 时间戳，精度更高图片blob 创建student表1234567create table student(xh number(4),xm varchar2(20),sex char(2),birthday date,sal num(7,2)); 添加一个字段1alter table student add(classID number(2)); 修改字段长度1alter table student modify(xm varchar2(30)); 修改字段的类型/或者名字（不能有数据）1alter table student modify (xm char(30)); 删除一个字段1alter table student drop column sal; 修改表名字1rename student to stu; 删除表1drop table student; 修改日期默认格式1alter session set nls_date_format=&apos;mm-dd-yyyy&apos; 插入数据插入所有字段1insert into student values(1,&apos;小明&apos;,&apos;男&apos;,&apos;03-14-2017&apos;,3200.00) 插入部分字段1insert into student(xh,xm,sex) values(&apos;23&apos;,小张&apos;,&apos;男&apos;) 插入空值修改数据1update student set sex=&apos;女&apos; where xm=&apos;小明&apos;; 修改多个字段，用逗号隔开 将一行数据复制多条1insert into users (userid,username,userpass) select * from users; 查询字段为[非]空1select * from student where brithday is [not] null; 删除数据,不删除表结构，记录在日志中，删除之前建立一个回滚点savepoint aa;可恢复1delete from student; 删除数据后回滚1rollback to aa; 删除表的结构和数据1drop table student; 删除表数据，不删除表结构，不记录在日志中，不可恢复，速度快；1truncate table student; 查看表结构1desc table_name; 查询所有列1select * from dept; 查询指定列1select ename,sal,job,deption from dept; 取消重复行1select distinct deptno,job from emp; 打开显示操作时间1set timing on; nvl处理null值，当字段为null，当0处理1select sal*13+nvl(comm,0)*13 &quot;年工资&quot;,ename,comm from emp; like%表示0到多个字符_表示任意单个字符 多个值匹配1select * from emp where empno in(123,234,500); or &amp; and1select * from emp where (sal&gt;500 or job=&apos;Manager&apos;) and ename like &apos;J%&apos;; 默认排序低到高123order by [asc/desc]select * from emp order by sal;` 按部门编号升序，薪水降序列；1select * from emp order by depto, sal desc; 列别名排序1select ename,(sal+nvl(comm,0))*12 [as] &quot;年薪&quot; from emp order by &quot;年薪&quot;; 复杂查询max，min，avg，sum，count查询一个最高工资，最低工资1select max(sal),min(sal) from emp; 查出最高工资员工1select ename,sal from emp where sal=(select max(sal) from emp); 显示工资高于平均工资的员工1select * from emp where sal&gt;(select avg(sal) from emp); group by按部门分组，查出部门平均工资和最高工资1select avg(sal),max(sal),deptno from emp group by deptno; 显示每个部门的每种岗位的平均工资，最高工资1select avg(sal),max(sal),deptno,job from emp group by deptno,job; having 1select avg(sal),max(sal),deptno from emp group by deptno having avg(sal)&gt;2000; 同一条语句出现顺序，优先级group by &gt; having &gt; order by在选择列中，如果有列，表达式和分组函数，那么这些列和表达式中必须有一个出现在group by字句中，否则会报错 多表查询多表查询的条件是至少不能少于表的个数-1笛卡尔集1select a1.ename,a1.sal,a2.dname from emp a1, dept a2 where a1.deptno=a2.deptno; between 在两者之间1select a1.ename,a1.sal,a2.grade from emp a1,salgrade a2 where a1.sal between a2.losal and a2.hisal; 多表排序1select a1.ename,a2.dname,a1.sal from emp a1,dept a2 where a1.deptno=a2.deptno order by a1.deptno; 自连接 子查询数据库执行sql语句从左到右单行子查询1select * from emp where deptno=(select deptno from emp where ename=&apos;SMITH&apos;); 多行子查询1select * from emp where job in(select distinct job from emp where deptno=10); all查出工资比部门30的所有员工的工资都高的员工的姓名，工资和部门号12select ename,sal,deptno from emp where sal&gt;all(select all from emp where deptno=30);select * from emp where sal&gt;(select max(sal) from emp where deptno=30) any查出工资比部门30的任意一个员工的工资高的员工的姓名，工资和部门号12select ename,sal,dept from emp where sal&gt;any(select all from emp where deptno=30);select * from emp where sal&gt;(select min(sal) from emp where deptno=30) 多列子查询查出与SMITH部门和岗位完全相同的所有职员1select * from emp where (deptno,job)=(select deptno,job from emp where ename=&apos;SMITH&apos;); 查询高于自己部门平均工资的员工的信息1select a2.ename,a2.sal,a2.deptno,a1.mysal from emp a2,(select deptno,avg(sal) mysql from emp group by deptno) a1 where a2.deptno=a1.deptno and a2.sal &gt; a1.mysal; 内嵌视图就是子查询当一个表使用，当在from子句中使用子查询时，必须给子查询指定别名；列加别名可以加as，表加别名不能加as 分页查询一共有三种方式 rownum 分页 1select * from (select a1.*,rownum rn from (select * from emp) a1 where rownum&lt;=10) where rn&gt;6; ROWID 分页速度最快 按分析函数分页速度最慢 查询结果创建新表1create table mytable (id,name,sal,job,deptno) as select empno,ename,sal from emp; 合并查询为了合并多个select语句的结果，可以使用集合操作符号union，union all，intersect，minus.union去多个select查询结果的并集，取消重复行union all和union 类似，不取消重复行，or关系intersect取交集结果minus取差集（一个集合完全包含另一个集合，取没有的部分） 数据库管理员职责： 安装和升级oracle数据库 建库，表空间，表，视图，索引…… 指定并实施备份和恢复计划 数据库权限管理，调优，故障排除， 对于高级dba，要求能参与项目开发，会编写sql语句，存储过程，触发器，规则，约束，包 sys用户：所有oracle的数据字典的基表和动态视图都存在sys用户中；sys拥有dba（数据库管理员角色），sysdba（系统管理员），sysoper（系统操作员） 角色和权限；是oracle最高权限用户，必须以as sysdba或as sysoper形式登录，不能以normal方式登录数据库 system 用户：存放次级用户内部数据;拥有dba，sysdba角色及权限； 显示oracle 初始化参数show parameter; 数据库的逻辑备份和恢复 导出表1exp userid=username/passwd@sid tables=(table1,table2,table3) file=/path/x.dmp 导入表1imp userid=username/passwd@sid tables=(table1,table2,table3) file=/path/x.dmp 使用直接导出方式这种方式比默认常规的方式速度要快，当数据量大时，可以考虑这种方法，这时需要数据库的字符集要与客户端的字符集完全一致，否则报错1exp userid=username/passwd@sid tables=(table1,table2,table3) file=/path/x.dmp direct=y 导出表结构1exp userid=username/passwd@sid tables=(table1,table2,table3) file=/path/x.dmp rows=n 导出方案1exp username/passwd@sid owner=username file=/path/x.dmp 导出数据库12exp userid=system/passwd@sid full=y inctype=complete file=/path/xx.dmpimp userid=system/manager full=y file=/path/xx.dmp 数据字典记录了数据库的系统信息，它是只读表和视图的集合，数据字典的所有者为sys用户，用户只能在数据字典上执行查询操作，而其维护和修改是由系统自动完成的数据字典包括字典基表和数据字典动态视图，其中基表存储数据库的基本信息，普通用户不能直接访问数据字典的基表，数据字典视图是基于数据字典基表所建立的视图，普通用户可以通过查询数据字典的视图取得系统信息数据字典视图主要包括user_xxx,all_xxx,dba_xxx三种类型 user_tables;用于显示当前用户拥有的所有表，只返回用户所对应方案的所有表；select table_name from user_tables;all_tables;用于显示当前用户可以访问的所有表;select table_name from all_tables;dba_tables;用户显示所有方案拥有的数据库表。但是查询这种数据库字典视图，要求用户必须是dba角色或是有select any table系统权限。select table_name from dba_tables; 用户名，权限，角色dba_users 可以显示所有数据库用户的详细信息；dba_sys_privs 可以显示用户所具有的系统权限；dba_tab_privs 可以显示用户具有的对象权限;dba_col_privs 可以显示用户具有的列权限；dba_role_privs 可以显示用户所具有的角色。 查询oracle中所有的系统权限，一般是dbaselect from system_privilege_map order by name;查询oracle中所有的角色，一般是dbaselect from dba_roles;查询oracle中所有的对象权限，一般是dbaselect distinct privilege from dba_tab_privs;查询数据表的表空间select tablespace_name from dba_tablespaces; oracle 有多少种角色？select from dba_roles;查询一种角色有多少种权限？a. 一个角色包含的系统权限select from dba_sys_privs where grantee=’CONNECT’;select from role_sys_privs where role=’CONNECT’;b. 一个角色包含的对象权限select from dba_tab_privs where grantee=’CONNECT’;如何查看某个用户具有什么样的角色？select * from dba_role_privs where grantee=’SCOTT’; 显示当前用户可以访问的所有数据字典视图select from dict where comments like ‘%grant%’显示当前数据库的全称select from global_name;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ecFlow安装小记]]></title>
    <url>%2Farlo%2F8af01e65%2F</url>
    <content type="text"><![CDATA[在数值天气预报系统中有大量的计算机任务，这些任务之间又存在错综复杂的关系，如何管理和维护大量的复杂的任务成为一个难题，ecFlow正是为解决这一问题而诞生的。ecFlow是为欧洲中期天气预报中心（ECMWF）制作的产品，作为气象应用软件项目的一部分，用于工作流的管理和监控。它具有如下功能： 提供基于文本的任务定义语言以及python接口对计算机任务进行定义 可以设定任务间的依赖关系，并在依赖关系满足时触发任务 提供任务出错时的容错机制 提供图形化的界面实时查看任务运行状况以及报错信息，用不同颜色来表示任务的运行状态，还可以根据需要自定义显示任务运行的进度。 ecFlow是基于客户端/服务端的模式工作的，即先启动一个ecFlow的服务端，计算机任务作为客户端，客户端任务在运行过程中将自己的状态发送到服务端，服务端根据收到的信息更新作业状态。 本来是就Centos 6.9来安装ecflow的，由于ecflow要求Python版本必须大于2.7，而默认的是2.6.6，自行升级了python，编译后是各种报错，qt也装不上，实在是折腾累了，于是更换为centos7.2操作系统，默认python版本2.7.5，编译一切正常； 依赖关系 cmake g++ Python 2.7 or Python3 Xlib, X11, XMotif for ecflowview Qt for ecFlowUI 下载地址ecFlow：https://software.ecmwf.int/wiki/display/SUP/Releasesboost： http://www.boost.org/users/download/Motif： http://www.ist.co.uk/motif/download/index.htmlQt： http://mirrors.ustc.edu.cn/qtproject/archive/qt/ 安装cmake、g++1[root@vm01 ~]# yum -y install cmake g++ glibc gcc gcc-c++ python-devel openssl-devel zlib-devel ncurses-devel 安装python3 Centos 7默认的python版本是2.7.5，满足要求；不需要安装python3 12345678[root@vm01 ~]# wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tar.xz[root@vm01 ~]# tar xvf Python-3.5.0.tar.xz[root@vm01 ~]# cd Python-3.5.0[root@vm01 ~]# ./configure --prefix=/usr/local/python3[root@vm01 ~]# make &amp;&amp; make install[root@vm01 ~]# mv /usr/bin/python /usr/bin/python_old[root@vm01 ~]# ln -s /usr/local/python3/bin/python3 /usr/bin/python[root@vm01 ~]# cp -R /usr/local/python3/lib/* /usr/lib64/ 修改yum中的python版本1234[root@vm01 ~]# vim /usr/bin/yum#!/usr/bin/python 更改为 #!/usr/bin/python_old 安装Xlib, X11, XMotif1[root@vm01 ecFlow]# yum localinstall openmotif-2.1.32-2_IST.x86_64.rpm ecFlowUI 需要图形界面QT支持1234[root@vm01 ecFlow]# yum -y install mesa-libGL-devel mesa-libGLU-devel freeglut-devel git gflags gflags-devel[root@vm01 ecFlow]# yum groupinstall &quot;GNOME Desktop&quot;[root@vm01 ecFlow]# chmod +x qt-opensource-linux-x64-5.8.0.run[root@vm01 ecFlow]# ./qt-opensource-linux-x64-5.8.0.run 安装ecFlow环境12345[root@vm01 ~]# cd /usr/local/src/ecFlow/[root@vm01 ecFlow]# tar xf boost_1_64_0.tar.gz[root@vm01 ecFlow]# tar xf ecFlow-4.5.0-Source.tar.gz[root@vm01 ecFlow]# export WK=/usr/local/src/ecFlow/ecFlow-4.5.0-Source[root@vm01 ecFlow]# export BOOST_ROOT=/usr/local/src/ecFlow/boost_1_64_0 安装boost基于bjam安装boost1234[root@vm01 boost_1_64_0]# cd $BOOST_ROOT[root@vm01 boost_1_64_0]# ./bootstrap.sh[root@vm01 boost_1_64_0]# ./b2[root@vm01 boost_1_64_0]# ./b2 install --prefix=/usr/local 基于python安装boost123[root@vm01 boost_1_64_0]# ./bootstrap.sh --with-python=/usr/bin/python3[root@vm01 boost_1_64_0]# ./b2[root@vm01 boost_1_64_0]# ./b2 install --prefix=/usr/local 如果不需要ecflow的python接口，可以通过下面的设置避免编译boost的python库，在调用$WK/build_scripts/boost_build.sh前设置export ECF_NO_PYTHON=1 123[root@vm01 boost_1_64_0]# cd $BOOST_ROOT[root@vm01 boost_1_64_0]# $WK/build_scripts/boost_1_53_fix.sh[root@vm01 boost_1_64_0]# $WK/build_scripts/boost_build.sh 编译安装ecflow推荐使用cmake 编译ecflow12[root@vm01 boost_1_64_0]# cd $WK[root@vm01 build]# mkdir build; cd build; 1[root@vm01 build]# export CMAKE_PREFIX_PATH=/opt/Qt5.8.0/5.8/gcc_64/lib/cmake/Qt5Network 1234567[root@vm01 build]# vim ../CMakeLists.txt #在最底下添加这行代码set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -fPIC&quot;) [root@vm01 build]# cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/ecflow -DCMAKE_BUILD_TYPE=Release -DENABLE_GUI=OFF[root@vm01 build]# CPUS=$(lscpu -p | grep -v &apos;#&apos; | wc -l)[root@vm01 build]# make -j$&#123;CPUS&#125;[root@vm01 build]# make check[root@vm01 build]# make install 参考链接：https://software.ecmwf.int/wiki/display/ECFLOW/Installationhttp://windrocblog.sinaapp.com/?p=1602https://wenku.baidu.com/view/fda9af29bfd5b9f3f90f76c66137ee06eff94e8d.html?re=viewhttp://blog.csdn.net/u013121305/article/details/49853713]]></content>
      <categories>
        <category>大气模型</category>
      </categories>
      <tags>
        <tag>ecFlow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7下KVM 虚拟机搭建]]></title>
    <url>%2Farlo%2F8ae03ce9%2F</url>
    <content type="text"><![CDATA[KVM（Kernel-based Virtual Machine）是支持虚拟化扩展（Intel VT 或 AMD-V技术）x86硬件的Linux完全虚拟化解决方案。它包括了一个可加载的内核模块kvm.ko，提供了核心的虚拟化架构以及一个处理器特定模块（kvm-intel.ko或kvm-amd.ko）。使用KVM，用户可以运行多个无需修改的Linux或Windows虚拟机。每个虚拟机有自己私有的虚拟硬件：网卡、磁盘、显卡等等。 系统化境iptables offselinux disabled 安装kvm虚拟化查看cpu是否支持全虚拟化1grep -E &apos;(vmx|svm)&apos; /proc/cpuinfo 安装虚拟化组件1yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer bridge-utils 启动并设置开机自启动虚拟化服务12systemctl start libvirtdsystemctl enable libvirtd 检查虚拟化模块是否加载1lsmod | grep kvm 安装图形界面1yum -y groupinstall &quot;GNOME Desktop&quot; 图形化管理工具1virt-manager 配置桥接网络拷贝一个br0网络配置文件cd /etc/sysconfig/network-scripts/cp ifcfg-em1 ifcfg-br0配置ifcfg-em112345TYPE=EthernetBOOTPROTO=staticDEVICE=em1ONBOOT=yesBRIDGE=br0 配置ifcfg-br012345678TYPE=BridgeBOOTPROTO=staticDEVICE=br0ONBOOT=yesIPADDR=192.168.6.122NETMASK=255.255.255.0GATEWAY=192.168.6.1DNS1=223.5.5.5 重启网络1systemctl restart network 查看br0状态12ip addr show br0brctl show 创建一个存储池centos7操作系统安装的时候，自动分区时，大部分空间划分给/home分区了，默认的存储在/var/lib/libvirt/images目录下，在创建虚拟机之前我需要创建一个存储池；规划在/home/kvm/images 目录下新建目录并设置权限1mkdir -p /home/kvm/images;chown root:root /home/kvm/images;chmod 755 /home/kvm/images; 创建存储池12345678910111213#定义一个存储池绑定目录virsh pool-define-as StoragePool --type dir --target /home/kvm/images;#建立基于文件夹的存储池virsh pool-build StoragePool;#激活StoragePoolvirsh pool-start StoragePool;#存储池开机自动运行,使用virsh pool-autostartvirsh pool-autostart StoragePool;#查看存储池的信息virsh pool-info StoragePool#查看创建的所有存储池virsh pool-list 创建一个数据卷1virsh vol-create-as --pool StoragePool --name sql_server_2012.qcow2 100G --format qcow2 查看存储卷信息12virsh vol-info --pool StoragePool sql_server_2012.qcow2 virsh vol-info /home/kvm/images/sql_server_2012.qcow2 删除一个数据卷1virsh vol-delete --pool StoragePool sql_server_2012.qcow2 创建虚拟机命令行创建虚拟机1virt-install --name sql_server_2012 --memory 4096 --vcpus sockets=1,cores=2,threads=2 --disk device=cdrom,path=/home/cn_windows_server_2012_r2_x64_dvd_2707961.iso --disk path=/home/kvm/images/sql_server_2012.qcow2 --network bridge=br0,model=e1000 --noautoconsole --accelerate --hvm --graphics vnc,listen=0.0.0.0,password=123456,port=20007 --cpu host-passthrough --autostart 图形界面创建安虚拟机1virt-manager （过程略） virtsh 常用指令1）virsh list 列出当前虚拟机列表，不包括未启动的2）virsh list –all 列出所有虚拟机，包括所有已经定义的虚拟机3）virsh destroy vm-name 关闭虚拟机4）virsh start vm-name 启动虚拟机5）virsh edit vm-name 编辑虚拟机xml文件6）virsh undefine vm-name 删除虚拟机7）virsh shutdown vm-name 停止虚拟机8）virsh reboot vm-name 重启虚拟机9）virsh autostart vm-name 虚拟机随宿主机启动 virsh pool与vol命令帮助1234567891011121314151617181920212223242526272829303132333435363738Storage Pool (help keyword &apos;pool&apos;) find-storage-pool-sources-as 找到潜在存储池源 find-storage-pool-sources 发现潜在存储池源 pool-autostart 自动启动某个池 pool-build 建立池 pool-create-as 从一组变量中创建一个池 pool-create 从一个 XML 文件中创建一个池 pool-define-as 在一组变量中定义池 pool-define define an inactive persistent storage pool or modify an existing persistent one from an XML file pool-delete 删除池 pool-destroy 销毁（删除）池 pool-dumpxml XML 中的池信息 pool-edit 为存储池编辑 XML 配置 pool-info 存储池信息 pool-list 列出池 pool-name 将池 UUID 转换为池名称 pool-refresh 刷新池 pool-start 启动一个（以前定义的）非活跃的池 pool-undefine 取消定义一个不活跃的池 pool-uuid 把一个池名称转换为池 UUID Storage Volume (help keyword &apos;volume&apos;) vol-clone 克隆卷。 vol-create-as 从一组变量中创建卷 vol-create 从一个 XML 文件创建一个卷 vol-create-from 生成卷，使用另一个卷作为输入。 vol-delete 删除卷 vol-download 将卷内容下载到文件中 vol-dumpxml XML 中的卷信息 vol-info 存储卷信息 vol-key 为给定密钥或者路径返回卷密钥 vol-list 列出卷 vol-name 为给定密钥或者路径返回卷名 vol-path 为给定密钥或者路径返回卷路径 vol-pool 为给定密钥或者路径返回存储池 vol-resize 创新定义卷大小 vol-upload 将文件内容上传到卷中 vol-wipe 擦除卷 参考：http://www.linuxtechi.com/install-kvm-hypervisor-on-centos-7-and-rhel-7/http://wangying.sinaapp.com/archives/1893http://wangying.sinaapp.com/archives/1914]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat多实例部署]]></title>
    <url>%2Farlo%2F42b916ee%2F</url>
    <content type="text"><![CDATA[同一个tomcat下部署多个项目，重启会影响到其他项目的正常运行，为了使各项目独立，一般会使用安装多个tomcat，这样很耗费系统资源；创建tomcat多实例，有效的解决这一问题； 常见部署方式单实例单应用：比较常用的一种方式，只需要把你打好的 war 包丢在 webapps目录下，执行启动 Tomcat 的脚本就行了。单实例多应用：有两个不同的 Web 项目 war 包，还是只需要丢在webapps目录下，执行启动 Tomcat 的脚本，访问不同项目加上不同的虚拟目录。这种方式要慎用在生产环境，因为重启或挂掉 Tomcat 后会影响另外一个应用的访问。多实例单应用：多个 Tomcat 部署同一个项目，端口号不同，可以利用 Nginx 这么做负载均衡，当然意义不大。多实例多应用：多个 Tomcat 部署多个不同的项目。这种模式在服务器资源有限，或者对服务器要求并不是很高的情况下，可以实现多个不同项目部署在同一台服务器上的需求，来实现资源使用的最大化。 目录作用bin 主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本conf 主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xmllib 主要存放tomcat运行所依赖的包logs 主要存放运行时产生的日志文件，例如catalina.{date}.log等temp 存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件webapps 部署web应用程序的默认目录work 主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件） CATALINA_HOME：即指向Tomcat安装路径的系统变量CATALINA_BASE：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。 将tomcat复制为以下目录结构 修改$CATALINA_HOME/conf/server.xml在server.xml中配置了四个监听端口，分别是：Server Port： 该端口用于监听关闭tomcat的shutdown命令，默认为8005Connector Port： 该端口用于监听HTTP的请求，默认为8080AJP Port： 该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，默认为8009Redirect Port： 重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，默认为8443 修改第22行Server Port （三个tomcat依次修改为8005,8006,8007）1&lt;Server port=&quot;8007&quot; shutdown=&quot;SHUTDOWN&quot;&gt; 修改第71行Connector Port(三个tomcat依次修改为8080,8081,8082)1&lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot; 修改第93行AJP Port (三个tomcat依次修改为8009,8019,8029)1&lt;Connector port=&quot;8029&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; 虚拟主机配置name： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，默认为localhost，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上appBase： web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，默认情况下为$CATALINA_HOME/webappsunpackWARs： 表示是否自动解压war包autoDeploy： 所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作deployOnStartup： 表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false 修改第125-127行虚拟主机配置 (三个tomcat参考以下内容依次修改)123&lt;Host name=&quot;c.com&quot; appBase=&quot;/data/tomcat/c.com/&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;false&quot;&gt;&lt;Context path=&quot;/hello&quot; docBase=&quot;/data/tomcat/c.com/hello.war&quot; /&gt; 启动&amp;关闭脚本脚本放在CATALINA_BASE(如：/opt/tomcat1/)下123456789101112131415161718192021222324252627#!/bin/sh# description: 启动tomcat多实例.. /etc/init.d/functionsRETVAL=$?# tomcat实例目录export CATALINA_BASE=&quot;$PWD&quot;# tomcat安装目录export CATALINA_HOME=&quot;/opt/&quot;case &quot;$1&quot; instart)if [ -f $CATALINA_HOME/bin/startup.sh ];thenecho $&quot;Start Tomcat&quot;$CATALINA_HOME/bin/startup.shfi;;stop)if [ -f $CATALINA_HOME/bin/shutdown.sh ];thenecho $&quot;Stop Tomcat&quot;$CATALINA_HOME/bin/shutdown.shfi;;*)echo $&quot;Usage: $0 &#123;start|stop&#125;&quot;exit 1;;esacexit $RETVAL 因为启动脚本中有获取当前路径的操作，一定需要cd到tomcat.sh的当前目录下执行才可以 123456cd /opt/tomcat1./tomcat.sh start|stopcd /opt/tomcat2./tomcat.sh start|stopcd /opt/tomcat3./tomcat.sh start|stop 访问8080,8081,8082端口验证 参考地址：http://www.jianshu.com/p/0b549d00ecc2http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins 持续集成环境搭建]]></title>
    <url>%2Farlo%2Fc0b31722%2F</url>
    <content type="text"><![CDATA[持续集成 持续集成（CI）是一种软件工程流程，将所有工程师对于软件的工作复本，每天集成数次到共用主线（mainline）上。 依赖以下原则达到目标 维护一个代码库 自动建置 让建置时会自我测试 所有人每天至少提交一次 应该要建置每一个提交 让建置维持快速 用在线环境的复本测试 让获取最新发布版本更容易 任何人都可以查看最后建置的结果 自动部署 产生的效益 及早发现集成错误且由于修订的内容较小所以易于追踪，这可以节省项目的时间与成本。 避免发布日期的前一分钟发生混乱，当每个人都会尝试为他们所造成的那一点点不兼容的版本做检查。 当单元测试失败或发生错误，若开发人员需要在不除错的情况下还原代码库到一个没有问题的状态，只需要放弃一小部分的更改 (因为集成的次数频繁)。 让 “最新” 的程序可保持可用的状态供测试、展示或发布用。 频繁的提交代码会促使开发人员创建模块化，低复杂性的代码。 Jenkins是一个用Java编写的开源的持续集成工具，前身是Hudson (软件)项目，有丰富的插件支持； Jenkins安装安装jdkjdk下载地址： http://www.oracle.com/technetwork/java/archive-139210.html1tar xf jdk-8u112-linux-x64.tar.gz -C /usr/local/ 配置jdk环境变量vim /etc/profile123export JAVA_HOME=/usr/local/jdk1.8.0_112export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export PATH=$JAVA_HOME/bin:$PATH 安装jenkins123wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.reporpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.keyyum install jenkins 添加java路径到jenkins启动脚本中vim /etc/init.d/jenkins1/usr/local/jdk1.8.0_112/bin/java 修改jenkins默认时区12vim /etc/sysconfig/jenkinsJENKINS_JAVA_OPTIONS=&quot;-Djava.awt.headless=true -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai&quot; 启动jenkins12/etc/init.d/jenkins startchkconfig --level 35 jenkins on 访问路径 http://192.168.6.102:8080默认密码存在这个文件中 /var/lib/jenkins/secrets/initialAdminPassword创建一个管理用户 Jenkins 配置安装mavenjdk下载地址： http://apache.mirrors.lucidnetworks.net/maven/maven-3/1tar xf apache-maven-3.3.9-bin.tar.gz -C /usr/local/ 配置maven环境变量vim /etc/profile1234export JAVA_HOME=/usr/local/jdk1.8.0_112export CLASSPATH=.:$JAVA_HOME/lib/:$JAVA_HOME/jre/lib/export M3_HOME=/usr/local/apache-maven-3.3.9export PATH=$JAVA_HOME/bin:$PATH:$M3_HOME/bin 全局工具配置点击系统配置-Global Tool Configuration针对项目中使用的jdk和maven情况添加对应的版本 插件安装配置点击系统配置-插件管理 可选插件直接安装右上角的过滤功能很好用，可以直接搜索安装安装以下插件Hudson SCP publisher pluginDeploy to container PluginMaven Integration pluginPublish Over SSHPublish Over CIFSBackup plugin / ThinBackupEmail Ext Recipients Column PluginLocalization: Chinese (Simplified) 高级选项中上传插件安装http://mirrors.jenkins-ci.org/plugins/安装完插件之后，建议重启一下jenkins，防止插件未加载上，不生效； 发布一个静态网站配置Hudson SCP publisher plugin插件此插件用于发布静态网站，拷贝文件很方便配置需要发布的服务器hostname，端口，路径，用户名，密码（如果是正式环境，不建议使用root用户） ps:这里有个小技巧，如果这台机器上有多个静态网站目录的话，可以在服务器设置多个hosts记录，这里使用主机名来分区不同的路径 新建一个软件项目test源码管理：填写svn路径有获取代码权限的用户名密码构建后操作：选择需要scp的路径Source ** 表示所有Keep Hierarchy 保持目录结构（否则不能拷贝文件夹）点击立即构建通过 Console Output可以看到详细日志至此，一个静态网站就发布完成了！ 发布一个java后台工程安装Deploy to container Plugin插件此插件可以将war/ear 包发布到tomcat，glassfish，jetty，weblogic等中间件上 配置tomcat web管理vim /usr/local/apache-tomcat-7.0.77/conf/tomcat-users.xml123456&lt;role rolename=&quot;tomcat&quot;/&gt;&lt;role rolename=&quot;role1&quot;/&gt;&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;manager-gui,manager-script,manager-jmx,manager-status&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui&quot;/&gt;&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status&quot;/&gt; 由于jenkins把8080端口占用，我这里修改tomcat端口为8081vim /usr/local/apache-tomcat-7.0.77/conf/server.xml1&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot; tomcat8之后的版本，为了安全，默认只有本机可以访问管理控制台，因此需要修改$TOMCAT/webapp/manager/META-INF和$TOMCAT/webapp/host-manager/META-INF目录下的content.xml修改12&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt; 为12&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;\d+\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt; 一个简单的maven工程代码https://github.com/nsxq/hello-world-war maven 的简单使用查看版本1mvn -version 查看详细信息1mvn X 测试1mvn test 清理（target目录下的编译内容）1mvn clean 编译项目1mvn compile 打包发布1mvn package 生成eclipse项目文件1mvn eclipse:eclipse 产生site1mvn site 安装当前工程的jar安装到本地仓库1mvn install 安装jar包到本地仓库1mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -Dfile=/usr/local/src/ojdbc14-10.2.0.4.0.jar 分析项目的依赖信息1mvn dependency:analyze / mvn dependency:tree 新建一个maven工程获取代码编译参数构建后发布点击立即构建查看日志，已经发布完成了访问项目http://192.168.6.102:8081/hello至此，一个maven工程已经实现自动化编译、打包、发布！ 版本回退有时候发布一个新版本失败或发布有问题，我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是退 对文件进行存档为了能够进行版本回退，构建完成的需要对文件进行存档 使用参数化构建过程让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回退的版本号。 构建选择“Execute Shell”的方式自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。12345678910111213141516case $deploy_env in deploy) echo &quot;deploy:$deploy_env&quot; mvn clean test compile install package ;; rollback) echo &quot;rollback:$deploy_env&quot; echo &quot;version: $version&quot; rm -fr target/hello-1.war cp -R $&#123;JENKINS_HOME&#125;/jobs/myapp/builds/$&#123;version&#125;/com.efsavage\$hello/archive/com.efsavage/hello/1/hello-1.war . pwd &amp;&amp; ls ;; *) exit ;;esac 执行回退操作点击构建，根据不同的参数选择发布还是版本回退，回退的时候填写要回退到的历史版本号 PS: Tomcat8配置web管理后，Tomcat访问 manager页面 报403的解决办法：https://blog.52itstyle.com/archives/274/]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Cobbler 自动化和管理系统安装]]></title>
    <url>%2Farlo%2Fbb0f7c70%2F</url>
    <content type="text"><![CDATA[Cobbler是一套快速搭建网络自动化安装操作系统的软件，个人感觉是PXE的升级版;提供cli和web两种管理方式，还提供API接口系统环境：Centos7_x64Iptables offSelinux disabled Cobbler对象类型发行版（distro）：表示一个操作系统。它承载了内核和 initrd 的信息，以及内核参数等其他数据。配置文件（profile）：包含一个发行版、一个 kickstart 文件以及可能的存储库，还包含更多特定的内核参数等其他数据。系统（system）：表示要配给的机器。它包含一个配置文件或一个镜像，还包含 IP 和 MAC 地址、电源管理（地址、凭据、类型）以及更为专业的数据等信息。存储库（repository）：保存一个 yum 或 rsync 存储库的镜像信息。镜像（image）：可替换一个包含不属于此类别的文件的发行版对象（例如，无法分为内核和 initrd 的对象）。基于注册的对象以及各个对象之间的关联，Cobbler 知道如何更改文件系统以反映具体配置。因为系统配置的内部是抽象的，所以您可以仅关注想要执行的操作。 Cobbler安装安装系统扩展包安装后报错可以参考http://islocal.cc/2017/04/06/yum-安装epel扩展后报错/1yum -y install epel-release 安装需要的其他组件1yum -y install rsync tftp httpd pykickstart xinetd 安装cobbler程序包和fence代理包fence代理包是执行电源管理活动的1yum -y install cobbler fence-agents 启动cobbler 服务1systemctl start cobblerd httpd 检查配置文件1cobbler check Q1：修改cobbler服务器地址1server: 192.168.6.103 Q2：修改dhcp服务器地址1next_server: 192.168.6.103 Q3：修改/etc/selinux/config配置1SELINUX=disabled Q4：修改/etc/xinetd.d/tftp 配置1disable = no Q5：下载需要的网络引导文件1cobbler get-loaders Q6：启动并设置开机启动rsyncd服务12systemctl start rsyncd.servicesystemctl enable rsyncd.service Q7：这个是基于debian操作系统的错误centos系统下忽略，不予处理 Q8：修改安装系统后默认的root密码为’ffffff’123openssl passwd -1 -salt &apos;random123&apos; &apos;ffffff&apos;vim /etc/cobbler/settingsdefault_password_crypted: &quot;$1$random12$KuDtGsOHnRfzasr7D4qI40&quot; 配置Cobbler编辑主配置文件vim /etc/cobbler/settings12345678manage_dhcp: 1 manage_dns: 1manage_tftpd: 1restart_dns: 1restart_dhcp: 1pxe_just_once: 1next_server: &lt;dhcp服务器地址，即本机&gt;server:&lt;cobbler 服务器地址&gt; 以上部分选项之前已经配置或者默认选项已符合要求manage cobbler可以管理服务restart cobbler 可以重启服务pxe_just_once 预防将机器中的安装循环配置为始终从网络引导。激活此选项时，机器告诉 Cobbler 安装已完成 指定cobbler管理服务使用的程序vim /etc/cobbler/modules.conf123456[dns]module = manage_dnsmasq[dhcp]module = manage_dnsmasq[tftpd]module = manage_in_tftpd 配置dhcp服务使用dnsmasq提供dns和dhcp服务这里要保证dhcp设置的ip网段要和本机在同一网段，否则client找不到dhcp服务器 通常，您希望阻止未注册的客户端从服务器引导。为此，添加参数 dhcp-ignore=tag:!known。（在以前的版本中，语法可能有所不同：dhcp-ignore=#known。如果有疑问，您可以同时插入两个版本。） vim /etc/cobbler/dnsmasq.template1dhcp-range=192.168.6.200,192.168.6.210,255.255.255.0 同步cobbler数据1cobbler sync 重启服务1systemctl restart httpd cobblerd xinetd rsyncd dnsmasq 客户机从网络启动，可以看到已经可以获取到ip地址了 创建操作系统创建一个发行版本123mkdir /opt/centos6.9/mount -o loop /opt/CentOS-6.9-x86_64-bin-DVD1.iso /opt/centos6.9/cobbler import --path=/opt/centos6.9/ --name=&quot;Centos6.9&quot; 查看发行版本12cobbler distro listcobbler distro report 查看配置文件可以看到这里默认的ks文件是sample_end.ks12cobbler profile listcobbler profile report 使用自定义ks文件 使用图形化system-config-kickstart工具创建ks文件 使用系统生成的ks文件模板修改kiskstart 文件内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# kickstart template for Fedora 8 and later.# (includes %end blocks)# do not use with earlier distros#platform=x86, AMD64, or Intel EM64T# System authorization informationauth --useshadow --enablemd5# System bootloader configurationbootloader --location=mbr# Partition clearing informationclearpart --all --initlabel# Use text mode installtext# Firewall configurationfirewall --disable# Run the Setup Agent on first bootfirstboot --disable# System keyboardkeyboard us# System languagelang en_US# Use network installationurl --url=$tree# If any cobbler repo definitions were referenced in the kickstart profile, include them here.$yum_repo_stanza# Network information$SNIPPET(&apos;network_config&apos;)# Reboot after installationreboot#Root passwordrootpw --iscrypted $default_password_crypted# SELinux configurationselinux --disabled# Do not configure the X Window Systemskipx# System timezonetimezone Asia/Shanghai# Install OS instead of upgradeinstall# Clear the Master Boot Recordzerombr# Allow anaconda to partition the system as neededautopart%pre$SNIPPET(&apos;log_ks_pre&apos;)$SNIPPET(&apos;kickstart_start&apos;)$SNIPPET(&apos;pre_install_network_config&apos;)# Enable installation monitoring$SNIPPET(&apos;pre_anamon&apos;)%end%packages$SNIPPET(&apos;func_install_if_enabled&apos;)@base@development%end%post --nochroot$SNIPPET(&apos;log_ks_post_nochroot&apos;)%end%post$SNIPPET(&apos;log_ks_post&apos;)# Start yum configuration$yum_config_stanza# End yum configuration$SNIPPET(&apos;post_install_kernel_options&apos;)$SNIPPET(&apos;post_install_network_config&apos;)$SNIPPET(&apos;func_register_if_enabled&apos;)$SNIPPET(&apos;download_config_files&apos;)$SNIPPET(&apos;koan_environment&apos;)$SNIPPET(&apos;redhat_register&apos;)$SNIPPET(&apos;cobbler_register&apos;)# Enable post-install boot notification$SNIPPET(&apos;post_anamon&apos;)# Start final steps$SNIPPET(&apos;kickstart_done&apos;)# End final steps%end 添加一个profile12cobbler profile add --distro=&quot;Centos6.9-x86_64&quot; --name=centos6.9_customized \--kickstart=/var/lib/cobbler/kickstarts/CentOS6.9_cust.cfg ### 修改已有的profile1cobbler profile edit --name=centos6.9_customized --kickstart=/var/lib/cobbler/kickstarts/CentOS6.9_cust.cfg 添加第三方yum仓库这一步好像有点问题会报错，网上资料说这是一个bug123cobbler repo add --name=163mirrors --mirror=http://mirrors.163.com/centos/6.9/os/x86_64/cobbler reposynccobbler repo report 将仓库文件与配置文件（profile）关联起来1cobbler profile edit --name=Centos6.9-x86_64 --repos=163mirros 安装web管理界面安装cobbler-web包1yum -y install cobbler-web Cobbler Web 界面的身份验证和授权配置/etc/cobbler/modules.conf123[authentication]module = authn_pam[authorization] = authz_ownership 新建系统账号并设置密码12useradd cobbler echo &quot;cobbler&quot; | passwd --stdin cobbler 添加用户到管理组vim /etc/cobbler/users.conf12[admins]admin = &quot;cobbler&quot; 重启服务1systemctl restart cobblerd httpd 使用https url访问https://192.168.6.103/cobbler_web12user：cobblerpasswd：cobbler 安装操作系统 开机 选择从网络引导，dhcp获取ip地址 选择profile，通过tftp获取引导内核文件 调用ks文件进行无人值守安装操作系统 重装操作系统这个是针对已经安装操作系统的服务器进行重新安装，个人感觉这种方式除了不用调整从网络启动之外，没看出来比较实用的特性 在客户端机器安装koan软件12yum -y install epelyum -y install koan Koan 用法查看cobbler server 上的profile文件列表1koan --server=192.168.6.250 --list=profiles 查看profile详细信息1koan --server=192.168.6.250 --display --profile=Centos6.9-x86_64 下次重启时重装操作系统12koan --server=192.168.6.250 -replace-self --profile=Centos6.9-x86_64reboot 安装windows操作系统制作PE iso镜像下载一个PE系统上传至cobbler服务器/data目录 创建一个distro1cobbler distro add --name=&quot;WePe_x64&quot; --kernel=/var/lib/tftpboot/memdisk --initrd=/data/WePE_64_V2.0.iso --kopts=&quot;raw iso&quot; 创建空白kickstart文件，并对winPE发行版添加profile12touch /var/lib/cobbler/kickstarts/WePe_x64.xmlcobbler profile add --name=WePe_x64 --distro=WePe_x64 --kickstart=/var/lib/cobbler/kickstarts/WePe_x64.xml 同步cobbler1cobbler sync windows 操作系统安装这个，目前只是做了一个网络版的PE，网上有教程说使用samba共享镜像，我这里没有成功，可以参考这篇文章;到这里一个最基本的cobbler自动化安装操作系统的环境就搭建完成了，只是完成了distro和profile部分，后期在学习system部分。 参考资料：https://www.ibm.com/developerworks/cn/linux/l-cobbler/http://blog.codecp.org/2016/11/02/Centos7部署cobbler/]]></content>
      <categories>
        <category>自动化运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>自动化</tag>
        <tag>Cobbler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WRF模型学习（1）--安装篇]]></title>
    <url>%2Farlo%2F7943f5da%2F</url>
    <content type="text"><![CDATA[WRF简介WRF全称Weather Research and Forecasting Model, 是一个先进的大气建模系统，专为气象研究和数值天气预报而设计。它为大气过程提供了许多选项，可以在各种计算平台上运行。WRF在数千米到数千公里范围内的应用范围广泛，包括以下内容。 气象研究 实时NWP 理想模拟 数据同化 地球系统模型耦合 示范训练和教育支持 官方网站：http://www.wrf-model.org/index.phphttps://www2.ucar.edu/https://zh.wikipedia.org/wiki/NetCDF 系统环境VMware Wrokstation 12 proCentOS 6.4 x64 软件环境zlib-1.2.11.tar.gzhdf5-1.8.18.tarnetcdf-4.4.1.1.tar.gznetcdf-fortran-4.4.4.tar.gzpgilinux-2016-1610-x86_64.tar.gzWRFV3.8.1.TAR.gzWPSV3.8.1.TAR.gz WRF 模型安装安装WRF模型的的顺序为：WRF–&gt;WPS–&gt;WRF-chem等WRF模拟系统主要包含WPS和WRF两部分模块： WPS模块全称为WRF Pre-processing System，即WRF预处理系统，用来为WRF模型准备输入数据；如果只是做理想实验(idealized modeling)，就不需要用WPS处理真实数据。WRF模块就是数值求解的模块，它有两个版本：ARW(Advanced Research WRF) 和 NMM(Nonhydrostatic Mesoscale Model)。大多数研究者主要用的都是ARW版本。 除了WPS与WRF两大核心模块外，WRF系统还有很多附加模块：比如用于数据同化的WRF-DA，用于化学传输的WRF-chem，用于林火模拟的WRF-fire。 安装依赖zlib1234# tar xf zlib-1.2.11.tar.gz# cd zlib-1.2.11# ./configure --prefix=/usr/local/zlib/# make &amp;&amp; make install 安装依赖hdf51234# tar xf hdf5-1.8.18.tar# cd hdf5-1.8.18#./configure --prefix=/usr/local/hdf5/ --with-zlib=/usr/local/zlib/# make &amp;&amp; make install 安装依赖netcdf1234# tar xf netcdf-4.4.1.1.tar.gz# cd netcdf-4.4.1.1# ./configure --prefix=/usr/local/netcdf/ --enable-netcdf-4 LDFLAGS=&quot;-L/usr/local/hdf5/lib/&quot; CPPFLAGS=&quot;-I/usr/local/hdf5/include/&quot;# make &amp;&amp; make install 安装依赖netcdf-fortran1234# tar xf netcdf-fortran-4.4.4.tar.gz # cd netcdf-fortran-4.4.4# ./configure --prefix=/usr/local/netcdf/ LDFLAGS=&quot;-L/usr/local/netcdf/lib&quot; CPPFLAGS=&quot;-I/usr/local/netcdf/include&quot; FC=gfortran# make &amp;&amp; make install 此步骤中报错可以查看日志文件config.log 进行解决我遇到的问题configure: error: cannot compute sizeof (off_t)，最终是设置了环境变量解决的123export LDFLAGS=&quot;-L/usr/local/netcdf/lib/&quot;export CPPFLAGS=&quot;-I/usr/local/netcdf/include/&quot;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/netcdf/lib/ 安装WRF模型1234# tar xf WRFV3.8.1.TAR.gz # cd WRFV3# export NETCDF=/usr/local/netcdf/# ./configure 这里我选择的32，使用gfortran/gcc编译。serial 表示串行计算；smpar 表示内存共享并行计算(shared memory option)，即使用openMP，大部分多核电脑都支持这项功能；dmpar 表示分布式并行计算(distributed memory option)，即使用MPI 进行并行计算，主要用在计算集群，单个电脑就没必要用了；dm+sm 表示同时使用openMP与MPI两种并行方式. 如果使用pgi（选择1）编译的话，需要自行安装pgilinux包，否则会报错”pgf90: Command not found.”1# ./compile em_real &gt;&amp; compile.log 编译类型有以下几种WRF-Chem（WRF大气化学模型）em_real （3D真实情况）em_quarter_ss （3D理想的情况下）em_b_wave （3D理想的情况下）em_les （3D理想的情况下）em_heldsuarez （3D理想的情况下）em_tropical_cyclone （3D理想的情况下）em_hill2d_x （2D理想的情况下）em_squall2d_x （2D理想的情况下）em_squall2d_y （ 2d理想情况）em_grav2d_x （2d理想情况）em_seabreeze2d_x （2d理想情况）em_scm_xy （1d理想情况） 真实情况编译完成后，在main目录下会出现ndown.exe,real.exe, tc.exe, wrf.exe这4个可执行程序；理想情况编译后会生成wrf.exe，ideal.exe 这2个可执行程序。 安装WPS模型要保证WPS和WRFV3在同级目录，configure.wps文件中有相对路径安装依赖包123456# yum -y install libpng libpng-devel jasper jasper-devel libjpeg libjpeg-devel# export COMPRESSION_LIBS=-L/usr/lib64/# export COMPRESSION_INC=-I/usr/lib64/# tar xf WPSV3.8.1.TAR.gz# cd WPS# ./configure 这里选择1即可1# ./compile 编译完成后再当前目录下会出现geogrid.exe、metgrid.exe、ungrib.exe 三个可执行程序到这里WRF模型的安装工作就已经完成了，第一次安装，记录一下! 参考链接：https://xg1990.com/blog/archives/190http://www2.mmm.ucar.edu/wrf/OnLineTutorial/compilation_tutorial.php]]></content>
      <categories>
        <category>大气模型</category>
      </categories>
      <tags>
        <tag>WRF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum 安装epel扩展后报错]]></title>
    <url>%2Farlo%2Fef6f2f28%2F</url>
    <content type="text"><![CDATA[安装epel扩展后出现的几个问题 A1：Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again编辑/etc/yum.repo/epel.repo文件,12345#baseurlmirrorlist改成baseurl#mirrorlist A2:PYCURL ERROR 7 - “Failed to connect to 2001:4178:5:200::10: Network is unreachable”123vim /etc/yum.conf[main]ip_resolve=4 A3:[Errno 14] problem making ssl connection[Errno 14] PYCURL ERROR 7 - Failed to connect to 2605:bc80:3010:600:dead:beef:cafe:fed9: Network is unreachable123yum install ca-certificates -yyum clean allyum list A4：There are unfinished transactions remaining. You might consider running yum-complete-transaction, or “yum-complete-transaction –cleanup-only” and “yum history redo last”, first to finish them. If those don’t work you’ll have to try removing/installing packages by hand (maybe package-cleanup can help).The program yum-complete-transaction is found in the yum-utils package.1234yum install yum-utilsyum-complete-transaction --cleanup-onlypackage-cleanup --dupespackage-cleanup --problems]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>Linux</tag>
        <tag>epel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MPICHI3 并行计算环境搭建]]></title>
    <url>%2Farlo%2Fundefined%2F</url>
    <content type="text"><![CDATA[新工作接触到HPC高性能计算项目，最近看了一些HPC高性能计算的理论资料，今天搭建MPICHI 并行计算环境，算是开始HPC的学习之路吧！ 系统环境CentOS 6_x64 设置hostsvim /etc/hosts123192.168.6.100 vm00192.168.6.101 vm01192.168.6.102 vm02 新建用户12# useradd -u 600 pxb# echo ffffff|passwd --stdin pxb 配置机器ssh无密码连接12345678# su - pxb$ ssh-keygen 默认一直回车$ ssh-copy-id vm00$ ssh-copy-id vm01$ ssh-copy-id vm02$ ssh vm00$ ssh vm01$ ssh vm03 安装MPICHI（三台服务器上执行以下相同操作）获取mpichihttps://www.mpich.org/downloads/ 安装配置MPICHI1234# tar -xf mpich-3.2.tar.gz# cd mpich-3.2# ./configure --prefix=/usr/local/mpich/# make &amp;&amp; make install $ vim ~/.bash_profile$ export PATH=$PATH:/usr/local/mpich/bin/$ source ~/.bash_profile$ echo $PATH 新建machinefile$ vim ~/machinefile123vm00vm01vm02 测试MPICHI，跑圆周率程序1$ /usr/local/mpich/bin/mpiexec -n 3 -machinefile machinefile ~/mpich-3.2/examples/cpi -n 是使用多少节点-machinefile 集群节点文件]]></content>
      <categories>
        <category>HPC</category>
      </categories>
      <tags>
        <tag>HPC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mailx 发送邮件小计]]></title>
    <url>%2Farlo%2F670d97dc%2F</url>
    <content type="text"><![CDATA[安装postfix服务yum install postfix/etc/init.d/postfix startchkconfig postfix on 发送格式mailx -s subject user@xxx.com &lt; message_fileecho “内容” | mailx -s “邮件标题” user@xxx.com 其他选项-r 指定发件人-c 指定抄送人-b 指定密送人多个收件人使用逗号分隔有些邮箱（如qq邮箱）会当成垃圾邮件拦截，日志中可以看到500错误 监控服务脚本是否运行正常监控脚本内容123456#!/bin/bashcount=`ssh m1 ps -ef|grep real_wrf.csh |grep -v &quot;grep&quot; |wc -l`#echo $countif [ 0 == $count ];then mailx -s &quot;the real_wrf.csh is not running &quot; a1@xxx.com.cn,a2@xxx.com.cn &lt; t.txt fi 监测目录下是否有文件12345678910111213141516171819#!/bin/bash#每天6:00~7:00检查前一天00时的数据，每天16:00~18:00检查前一天12时的数据Date1=`date -d &quot;1 day ago&quot; +&quot;%Y%m%d00&quot;`Date2=`date -d &quot;1 day ago&quot; +&quot;%Y%m%d_06&quot;`file=&quot;\/data/Model3/WRF/data/output/wrf/$Date1/wrfout_d03 \/data/Model3/CMAQ4.7/data/cctm-wrf/$Date1/CCTM_CONC.cn03.*.ncf \/data/Model3/CAMx6/data/post_save/$Date1/camxsave_d03* \/data/em/result/predictions/SHAANXI/$Date2/POST/naqpms_d03.* \/data/Model3/WRF/data/output/wrfchem/$Date1/wrfout_d03* \&quot;for i in $filedo if [ ! -f &quot;$i&quot; ]; then echo &quot;$i 文件不存在&quot; &gt;&gt; check_00mx_$Date1.txt mailx -s &quot;00时文件数据模型数据不存在&quot; b@xx.com.cn &lt; check_00mx_$Date1.txt fidone 监测目录是否存在，目录是否为空123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#!/bin/bash#每天6:00~7:00检查前一天00时的数据，每天16:00~18:00检查前一天12时的数据Date1=`date +&quot;%Y&quot;`Date2=`date +&quot;%m&quot;`Date3=`date -d &apos;-1 day&apos; +&quot;%d&quot;`Date4=`date +&quot;%Y%m%d00&quot;`Dir=/data/Model3/WeatherForecastWRF_Dir=&quot;$Dir/WRF/$Date1/$Date2/$Date3/d3/500/ \$Dir/WRF/$Date1/$Date2/$Date3/d3/700/ \$Dir/WRF/$Date1/$Date2/$Date3/d3/850/ \$Dir/WRF/$Date1/$Date2/$Date3/d3/srf/&quot;WRFCHEM_Dir=&quot;$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/co \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/WRFCHEM/$Date1/$Date2/$Date3/00/d3/so2&quot;WRFCHEMDAY_Dir=&quot;$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/co \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/WRFCHEMDAY/$Date1/$Date2/$Date3/00/d3/so2&quot;CAMX_Dir=&quot;$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/co \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/CAMX/$Date1/$Date2/$Date3/00/d3/so2 &quot;CAMxDAY_Dir=&quot;$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/co \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/CAMxDAY/$Date1/$Date2/$Date3/00/d3/so2 &quot;CMAQ_WRF_Dir=&quot;$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/co \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/CMAQ.WRF/$Date1/$Date2/$Date3/00/d3/so2 &quot;CMAQDAY_Dir=&quot;$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/co \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/CMAQDAY/$Date1/$Date2/$Date3/00/d3/so2 &quot;NAQMPS_Dir=&quot;$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/co \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/NAQMPS/$Date1/$Date2/$Date3/00/d3/so2 &quot;NAQMPSDAY_Dir=&quot;$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/aqi \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/co \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/no2 \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/o3 \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/pm10 \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/pm25 \$Dir/NAQMPSDAY/$Date1/$Date2/$Date3/00/d3/so2 &quot;Dir2=&quot;$WRF_Dir $WRFCHEM_Dir $WRFCHEMDAY_Dir $CAMX_Dir $CAMxDAY_Dir $CMAQ_WRF_Dir $CMAQDAY_Dir $NAQMPS_Dir $NAQMPSDAY_Dir&quot;for d in $Dir2do if [ ! -d $d ]; then echo &quot;$d 目录不存在&quot; &gt;&gt; /tmp/check_00tp_$Date4.txt elif [ `ls $d |wc -l` -eq 0 ]; then echo &quot;$d 目录下文件不存在&quot; &gt;&gt; /tmp/check_00tp_$Date4.txt fidonemailx -s &quot;$Date4 00时 模型出图情况&quot; c@xx.com.cn &lt; /tmp/check_00tp_$Date4.txt 设置crontab12301 13,17,01,04 * * * /data/tool/DRAW/shell/check_status/check_wrf.sh01 07 * * * /data/tool/DRAW/shell/check_status/check_00mx.sh01 08 * * * /data/tool/DRAW/shell/check_status/check_00tp.sh 另附短信发送脚本1234567891011121314#!/bin/bashdatedir1=`date +%Y%d`datedir2=`date +%Y%d%y`un=&quot;xxxxxxxx&quot;pw=&quot;xxxxxxxxxx&quot;phone=&quot;xxxxxxxxxxx&quot;msg=&quot;this is a test mes,please ignore&quot;if [ ! -d &quot;/data/em/data/GFS/$datedir1/$datedir2&quot; ];then curl --data &quot;un=$un&amp;pw=$pw&amp;phone=$phone&amp;msg=$msg&amp;rd=1&quot; &quot;http://sms.253.com/msg/send&quot; echo -e &quot;\n query balance:&quot; curl --data &quot;un=$un&amp;pw=$pw&quot; &quot;http://sms.253.com/msg/balance&quot;fiecho &quot;send sms:&quot; 短信参考：https://www.253.com/api-docs-13.html]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>mail</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH 奇淫技巧之隧道模式]]></title>
    <url>%2Farlo%2Fda9b9fcb%2F</url>
    <content type="text"><![CDATA[用了ssh这么久，今天才知道ssh还有这么强大的功能，穿透内外网，来去自如；其实最重要的还是方便平时工作中的调试，在此简单的记录一下。 使用条件一台拥有ssh端口连接的外网linux服务器 本地转发场景：公网有一台服务器的公网ip，ssh端口(已修改为2012)没有对外开放，本地想直接连接此端口，可以通过公网一台开放ssh端口的服务器跳转过去ssh -p 2012 -CNg -L 2222:namenode:2012 nsxq@1.2.3.4将namenode服务器的2012端口通过1.2.3.4服务器映射到本地2222端口 ssh -p 2222 localhost 即可连接-p 指定跳转机端口-L 本地转发 远程转发场景：本地开发环境需要被外网访问，之前一直使用花生壳，ngrok之类的程序；现在只需要本地执行一条ssh命令，将本地的端口映射到一台外网的服务器上去将本地内网192.168.1.5:80 映射到1.2.3.4服务器的8888端口，访问1.2.3.4:8888 即可访问192.168.1.5:80 内容ssh -p 2012 -CNfg -R 0.0.0.0:8888:192.168.1.5:80 nsxq@1.2.3.4 打开1.2.3.4服务器需要sshd_config 配置中的GatewayPorts yes记得顺手打开防火墙端口-p 指定跳转机端口-R 远程转发ssh -CNfg -R 0.0.0.0:3306:10.71.36.123:3306 dczf@10.71.36.121在10.71.36.123上执行此命令，将10.71.36.123的3306映射到10.71.36.121的3306端口 动态转发场景：相对于上边两种单一端口转发，此功能就是在本地启动一个端口，其他机器可以设置代理，通过此端口进行流量转发（俗称翻墙）。ssh -D 5000 nsxq@1.2.3.4我这里没有能上google的服务器，没法测试，按道理来说，其他机器就可以将代理设置为1.2.3.4:5000 进行商上网了 参考资料[实战ssh端口转发]http://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/[SSH的三种端口转发（Port forwarding）/ 隧道协议概要]https://blog.twofei.com/528/]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给下拉菜单和鼠标右键截图]]></title>
    <url>%2Farlo%2F8fb14fc6%2F</url>
    <content type="text"><![CDATA[调用常用的QQ软件截图1. 登陆qq2. 同时按住Crtl+Alt+Shift3. 松开Shift，其他两个手指不用松开4. 按住A5. 截图]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用阿里云Docker镜像库加速]]></title>
    <url>%2Farlo%2F42c94ca5%2F</url>
    <content type="text"><![CDATA[开发者账号由于docker官方的镜像下载太慢了，于是开通了阿里云的开发者账号；申请开发者账号http://console.d.aliyun.com/join.htm?spm=0.0.0.0.Xx1dX0#/docker/booster本人的专属加速器地址https://4c2kkvb9.mirror.aliyuncs.com阿里云docker镜像搜索地址：https://cr.console.aliyun.com/#/imageSearch阿里云docker加速器使用加速器将会提升您在国内获取Docker官方镜像的速度！https://cr.console.aliyun.com/#/accelerator 加速器操作文档安装或升级Docker您可以通过阿里云的镜像仓库下载：mirrors.aliyun.com/help/docker-engine1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - 配置Docker加速器 您可以使用如下的脚本将mirror的配置添加到docker daemon的启动参数中。系统要求 CentOS 7 以上，Docker 1.9 以上。1234cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service sed -i &quot;s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/docker daemon --registry-mirror=https://4c2kkvb9.mirror.aliyuncs.com|g&quot; /etc/systemd/system/docker.service systemctl daemon-reload systemctl restart docker QAQ: docker pull 时候报错“ x509: certificate has expired or is not yet valid”A: 此问题是由于主机的时间不同步造成的，使用ntpdate cn.ntp.org.cn 同步网络时间即可。]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用kubernetes 1.4 新特性kubeadm创建集群]]></title>
    <url>%2Farlo%2Ff9f5730%2F</url>
    <content type="text"><![CDATA[背景kubernetes 发布的最新版本1.4，增加了很多新特性，据说只用两条命令就可以创建一个k8s集群，比起之前的搭建起来简单很多。[官方文档][ http://kubernetes.io/docs/getting-started-guides/kubeadm/ ] 环境主机资源192.168.234.139 dc01192.168.234.140 dc02192.168.234.141 dc03 操作系统推荐使用ubuntu 16 和centos 7 以上版本（我个人使用的是centos 7.2 x64） 软件安装在三台机器上上分别安装docker 和 kubelet、kubectl和kubeadm 安装docker1curl -sS https://get.docker.io/ |sh 安装kubelet、kubectl和kubeadm需要安装的kubelet、kubeadm、kubectl、 kubernetes-cni这四个rpm包是google的源，正常情况下国内是连接不上的，qq群(319807078)里已经有热心网友下载下来了，安装的时候会依赖一个socat的软件包,使用1yum localinstall *.rpm 启动服务三台机器都需要启动docker和kubelet 启动docker1systemctl enable docker &amp;&amp; systemctl start docker 启动kubelet1systemctl enable kubelet &amp;&amp; systemctl start kubelet # **此时启动kubelet是失败的，因为在/etc/kubernetes下还没有生成配置文件** 下载images123456images=(kube-proxy-amd64:v1.4.0 kube-discovery-amd64:1.0 kubedns-amd64:1.7 kube-scheduler-amd64:v1.4.0 kube-controller-manager-amd64:v1.4.0 kube-apiserver-amd64:v1.4.0 etcd-amd64:2.2.5 kube-dnsmasq-amd64:1.3 exechealthz-amd64:1.1 pause-amd64:3.0 kubernetes-dashboard-amd64:v1.4.0)for imageName in $&#123;images[@]&#125; ; do docker pull mritd/$imageName docker tag mritd/$imageName gcr.io/google_containers/$imageName docker rmi mritd/$imageNamedone 搭建集群初始化集群1kubeadm init --api-advertise-addresses=192.168.234.139 查看日志1journalctl -fu kubelet 漠然大神给出的此错误排错步骤NO.1、保证 hostname 中主机名为 xxxx.com 等这种域名格式NO.2、保证 hosts 文件中 有 127.0.0.1 与之对应NO.3、保证 gcr 相关镜像 已经 load 到本地NO.4、保证 iptables规则没问题，必要时候 -FNO.5、保证 selinux 已经关闭NO.6、init 之前保证 启动 kubelet，虽然启动后显示启动失败NO.7、重新 init 保证用 官方 clean 步骤做下清理官方清理脚本1234systemctl stop kubelet;docker rm -f -v $(docker ps -q);find /var/lib/kubelet | xargs -n 1 findmnt -n -t tmpfs -o TARGET -T | uniq | xargs -r umount -v;rm -r -f /etc/kubernetes /var/lib/kubelet /var/lib/etcd; 加入集群节点保证节点上启动了docker 和kubectl1kubeadm join --token 0ab76c.b59aaa1d1ab3cf93 192.168.234.139 查看加入的节点1kubectl get nodes 本文参考漠然大神链接漠然大神博客地址github build k8s rpm]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOs 7 firewalld 防火墙无法启动]]></title>
    <url>%2Farlo%2F5a65cdf4%2F</url>
    <content type="text"><![CDATA[CentOs 7 无法启动，提示“Job for firewalld.service failed because a timeout was exceeded. See “systemctl status firewalld.service” and “journalctl -xe” for details.” 排错启动报错提示如下图排错很久，发现服务没有启动，但是有一个firewall的进程kill掉这个进程，顺利启动 常用firewall命令firewall-cmd –list-servicesfirewall-cmd –list-portsfirewall-cmd –add-port 80/tcp 添加端口firewall-cmd –add-service http 添加服务firewall-cmd –zone=external –add-masquerade 开启端口转发firewall-cmd –zone=external –add-forward-port=port=80:proto=tcp:toport=8080 本机80转发到本机8080firewall-cmd –zone=external –add-forward=port=9090:proto=tcp:toaddr=192.168.234.130 9090转发到另外一台机器的9090firewall-cmd –zone=external –add-forward=port=23:proto=tcp:toport=2003:toaddr=192.168.234.130 23转发到另外一台机器的2003firewall-cmd –zone=public –add-port=5060-5059/udp –permanent 范围端口，永久生效firewall-cmd –permanent –add-icmp-block=echo-reply 允许ICMP响应应答报文 顺便推荐一篇firewalld写的很好，很全的文章CentOS 7下使用FirewallD构建动态防火墙 参考链接]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jumpserver跳转机搭建过程中的疑问]]></title>
    <url>%2Farlo%2Fef870e7c%2F</url>
    <content type="text"><![CDATA[跳转机跳转机又名堡垒机，主要作用是在终端连接服务器之间加一层防护保障，保障连接到服务器的方式更加安全，更加透明，更加可控。Jumpserver官网的wiki、图解、视频教程做的已经很详细了，参考地址如下：[Jumpserver 官网地址:]http://www.jumpserver.org/[Jumpserver WiKi]https://github.com/jumpserver/jumpserver/wiki[Jumpserver v3 视频教程]http://bbs.jumpserver.org/read/639.html 记录问题以下是我在安装搭建过程中遇到的几个问题，在此记录一下。 用户用户管理中的用户: 用于登陆jumpserver跳转机和jumpserver web平台的用户；表示该类用户拥有登陆跳转机权限。设置中的默认管理员用户: 只适用于设置资产管理的时候，管理账号，使用默认选项；其实是一个缺省的管理员用户，只有大规模客户端使用相同的管理员用户名和密码是作用最大。添加资产时候的管理用户: 必须是真实存在于被添加的资产上，拥有管理权限（或sudo权限）的用户；被连接的资产设备上真是存在的管理员用户，如root。授权管理中的系统用户: 此用户是在添加jumpserver平台，通过推送在服务器上真是创建的用户； 服务器，客户端服务器：jms，安装jumpserver的这台服务器客户端：通过跳转机链接的资产，如被连接的服务器，网络设备等 推送推送是通过资产管理里的管理用户在服务器上建立系统用户和赋予sudo权限（如果管理sudo别名的话）]]></content>
      <tags>
        <tag>跳转机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xshell 使用技巧]]></title>
    <url>%2Farlo%2Fd1d8517a%2F</url>
    <content type="text"><![CDATA[Xshell 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。Xshell 通过互联网到远程主机的安全连接以及它创新性的设计和特色帮助用户在复杂的网络环境中享受他们的工作。Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。 主界面 添加链接。 可以保存的，以后不用输入用户名，密码，这个是putty没有的（有利有弊，从安全方面说，有风险哇。。。） 中文乱码，修改编码为 UTF-8 小键盘不能输入数字。 界面及字体颜色 看到这个真有点相见恨晚的感觉，右键粘贴功能，这个是用putty养成的习惯（虽然之前看到网上有说,选中后，使用ctrl+insert 复制，鼠标中键粘贴），在此感谢@ 吴天！最大的好处就是，你设置的这些，只需要设置一次就可以了，不用像putty里那种针对每个连接都设置一遍。xftp在这里就不说了，此处省去几十字。。。。。。。 xshell 5 每次exit退出时候，停留在本地shell界面，需要再次关闭，取消以下选项即可(ps：有强迫症的人可以顺手打上最后那个选项勾) Xshell选中文字复制时中断【转】在Xshell中设置了“自动将选中的文字复制到粘贴板”，之前一直没有问题，最近发现，只要选中屏幕上的文字，复制上了，但shell终端立即被中断了，即向终端发送了CTRL-C； 很可能是“选中文字复制”与词典软件的“划词翻译”相冲突。我的原因是，最近安装了必应词典，且开启了“划词翻译”功能。我在网上求助时，发现也有一些朋友遇到和我一样的问题，都是由于与词典的冲突导致的，如有道词典，关掉划译功能即可。 顺手分享一个xshell的配色方案将一些配置文件保存为x_shell.xcs格式1234567891011121314151617181920212223[x_shell]text(bold)=ffffffmagenta(bold)=ff00fftext=839496white(bold)=ffffffgreen=00c000red(bold)=ff0000green(bold)=00ff00black(bold)=808080red=808000blue=ff8040black=000000blue(bold)=8080ffyellow(bold)=ffff00cyan(bold)=00ffffyellow=c0c000magenta=c000c0background=002b35white=c0c0c0cyan=00c0c0[Names]count=1name0=x_shell 点击工具-配色方案-导入点击文件-属性-外观]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>常识</tag>
        <tag>xshell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用命令集合]]></title>
    <url>%2Farlo%2Fddba52eb%2F</url>
    <content type="text"><![CDATA[Windows进程查看123456789netstat -ano |findstr “8080” 查看端口netstat -ano |findstr “127.0.0.1”tasklist 查看进程tasklist |findstr “nginx”tskill 结束进程tskill nginxtskill 1130#查看文件被哪个进程占用打开资源管理器-CPU-关联的句柄-输入文件名称 映射网络驱动器1234net use Z: \\192.168.0.x\share /user:username password#断开网络驱动器net use Z: /del /ynet use * /del /y 桌面图标设置添加计算机到桌面1rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0 查看系统启动时间1systeminfo|find &quot;系统启动时间&quot; 常用快捷命令123456winver # 查看系统信息control.exe # 控制面板sysdm.cpl # 系统属性devmgmt.msc # 设备管理器compmgmt.msc # 计算机管理wf.msc # 防火墙管理 网络与共享中心1control.exe /name Microsoft.NetworkAndSharingCenter Linuxfree查看内存使用情况 可用内存=free+buffers+cached以用内存=used-buffers-cached所以看内存的使用不要看used 和free ，看 -/+ buffers/cache 就可以了查看内存插槽数1dmidecode|grep -P -A5 &quot;Memory\s+Device&quot;|grep Size|grep -v Range 查看内存最大容量1dmidecode | grep -P &apos;Maximum\s+Capacity&apos; 查看内存频率1dmidecode|grep -A16 &quot;Memory Device&quot;|grep &apos;Speed&apos; iostat查看磁盘性能 iostat -x 1 5%util 接近100%的时候，产生 的I/O 请求太多，I/O 系统已经满负荷，该磁盘可能存在瓶颈%idle 小于70%的时候，I/O 的 压力比较大，说明读取中有很多的wait du查看系统目录占用空间大小 在根目录下执行12du -hsx * |sort -rh |head -10du -ah --max-depth=1 推荐一款速度更快的工具ncdu uptime查看cpu的负载每cpu的核心当前活动进程数不大于3，表示性能良好，大于五表示严重。 物理CPU数1cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq 单个CPU的逻辑核心数量1cat /proc/cpuinfo | fgrep &quot;cores&quot; | uniq 系统CPU线程数1cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l 线程数=物理cpu数x单个逻辑cpu核心数，表示没有开启多线程 dd瞬间创建（1T）大文件1dd if=/dev/zero of=file bs=1G seek=1024 count=0 这个文件用ll -h 看着是1TB的，用du -sh 看着是空文件，随着写入的数据而增长 dd制作ISO镜像1dd if=/dev/cdrom of=/mnt/cd1.iso shopt选择性删除文件123shopt -s extglob 打开rm -fr !(file1|file2)shopt -u extglob #关闭 dstat监控系统状态1alias dstat=&apos;dstat -cdlmnpsy&apos; iftopn 显示ip/主机名p 显示端口l 输入过滤内容http://www.vpser.net/manage/iftop.html 网卡灯闪烁1ethtool -p eth0 查找局域网ip地址冲突12345678910#在局域网其他机器检测目标主机，不能在本机arping检验自己的iparping 192.168.1.120 #命令表示查看与本机在同一局域网内的所有机器的ip使用情况arp-scan -l#命令表示查看与本机在同一局域网内的所有主机的eth0网卡的ip使用情况arp-scan –I eth0 -l# windows下可以使用arp -a # 打印arp表arp -d # 清除arp对应关系arp -s 192.168.0.1 80-8f-1d-9f-5e-b7 #绑定arp 终端快捷键123456ctrl + a 移动光标到行首ctrl + e 移动光标到行尾（好像不生效）ctrl + r 查找历史命令ctrl + u 删除从光标到行首ctrl + k 删除从光标到行尾ctrl + l 清屏 更多参考：http://harttle.com/2015/11/09/bash-shortcuts.html]]></content>
      <categories>
        <category>常识</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>常识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[升级mysql数据库字符集为utf8mb4]]></title>
    <url>%2Farlo%2F3b439eff%2F</url>
    <content type="text"><![CDATA[之前公司的项目中一直使用的mysql版本(5.1.73)，使用utf8字符集，基本上没有什么问题的;现在开始做一些手机客户端之类的项目，发送表情(emoji)的时候会报错“ ‘\xF0\x9F\x98\xB1’ for column ‘body’ at row 1”；Google了一把，原因是因为表情存储需要4个字节，但是mysql的utf8字符集编码只支持1-3个字节，存储空间不够就报错了，因此需要升级一下字符集。MYSQL 5.5.3之后的版本支持UTF8MB4字符集，一个字符最多能有4字节，此字符集也是完全兼容utf8的，不存在兼容性问题。升级完mysql-server之后 修改配置文件123456789[client]default-character-set = utf8mb4[mysql]default-character-set = utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=&apos;SET NAMES utf8mb4&apos; 修改完这些配置文件后，之后创建的库、表就是utf8mb4格式了，但是之前的收据就需要手动修改一下了123ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;ALTER TABLE table_name CHANGE column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 重启mysql，查看字符集/etc/init.d/mysqld restart 使用utf8mb4，需注意：1.mysql-server 版本需要高于5.5.32.mysql-connector 版本需要高于5.1.3版本(建议升级到最新版，目前是5.1.39) 参考：http://www.wangyuxiong.com/blog/mysql-dbzi-fu-ji-sheng-ji-zhi-utf8mb4,24/https://segmentfault.com/a/1190000000616820]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正在启动windows卡住故障的填坑之路]]></title>
    <url>%2Farlo%2F4c7121ca%2F</url>
    <content type="text"><![CDATA[事件起因同事新买了一个ThinkPad E460，出厂系统为Windows8.1，希望修改为win7，于是开始了我的填坑之路，此故障之前在联想的S405上也遇到了一次。 故障现象安装完操作系统后，出现“正在启动windows卡住”，如图: 更换安装版镜像 BIOS中硬盘模式调整 PE中重新分区 使用mhdd工具扫描硬盘 做了以上步骤，实在是黔驴技穷啊，于是联系了ThinkPad的客服人员！ 使用安装版镜像，不能发现硬盘问题官方客服给出的故障原因是，“原生Win7系统不包含USB3.0的驱动，所以无法使用USB3.0的U盘在USB3.0的设备上引导，且安装完系统后还需要重新安装USB3.0驱动” 解决方案: 注：此方案仅适用于Intel芯片组的机型，AMD芯片组的机型将无法使用,文档中写明支持win7 32位系统，但是实测部分32位系统会存在问题，建议使用win7 64位系统安装 从Intel官网下载Windows7 USB3.0 Creator 实用程序 解压缩之前下载的软件，在解压缩路径下右键以管理员方式运行Installer_Creator.exe 在弹出界面中点击右侧的选择按钮，选中U盘所在分区 点击Create Image开始往U盘中添加程序，过程会比较长，Intel官方数据是15分钟，实测超过20分钟 在出现Upadte finished！后创建结束，现在就可以使用这个U盘在USB 3.0接口上安装系统了使用安装完补丁的U盘安装完系统USB3.0驱动会自动安装上。坑坑一：win7，win8.1，win10 均不能讲此驱动安装到U盘上，报错如下图坑二更换Ghost版本的镜像，安装完操作系统后依然是启动到“正在启动windows”卡主，进入安全模式卡在“\Windows\System32\drivers\ahcix64s.sys 界面”坑三 使用DG格式化整个硬盘 重建分区表 更换分区类型（MBR/GPT） 激活主分区其他坑预装Win8/8.1系统的电脑改装为Win7系统的操作步骤及常见问题 填坑使用Windows 7 USB DVD Download Tool或者软碟通（UltraISO）制作Win7原版安装盘（不要使用Ghost镜像制作，否则后续会有报错） 使用Win7光盘或者U盘（建议usb2.0的U盘）引导，进入系统安装界面 按Shift + F10打开命令提示符。(Edge系列机器需要按Fn+Shift+F10) 输入”Diskpart”(不用输入引号，下同)，并按回车，进入操作界面 输入：”list空格disk”，查看磁盘信息。注意看磁盘容量来选择。图中465G的Disk 0是硬盘，3852M的Disk 1是用于Win7安装的U盘 输入：”select 空格disk空格 0”，选择disk 0为当前操作的磁盘 输入：”Clean”，清空当前磁盘分区。 输入：”convert 空格 mbr”，转换为MBR分区。 操作完成，关闭此命令提示符窗口，继续按照正常的方法安装Win7系统即可（由于我坑一中的usb3.0 的驱动没有填好，就使用PE安装ghost版本的镜像安装了）。 总结这个故障是我在安装操作系统的时候遇到的最棘手的问题，最主要的步骤就是在dos模式下清空一下磁盘分区；这里只是记录了其中最主要的几个坑，希望给遇到的朋友一些参考。]]></content>
      <categories>
        <category>Troubleshooting</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建简记]]></title>
    <url>%2Farlo%2Fe5e5519a%2F</url>
    <content type="text"><![CDATA[背景博客是我记录学习过程最好的方式；我的第一个博客是百度空间，后来百度关闭了；第二个博客是ChinaUnix，最近ChinaUnix升级了安全，牛盾老是阻止我访问，再者ChinaUnix风格太老了，写出来的东西也不漂亮，于是就想自己搭建一个博客，现在的blog有很多，比如wordpress，ghost，等等，比较之下觉得hexo有逼格，高大上，就你了！ 环境搭建基础环境 Node.js Git Github MarkDown 编辑器 软件获取下载nodejs下载git 安装过程安装gitstart–&gt;next–&gt;end(详细过程略) 安装nodejsstart–&gt;next–&gt;end(详细过程略) 安装hexo 开始安装Hexonpm install -g hexo 初始化博客hexo init #默认路径为当前目录，可以在init后手动指定一个目录为博客根目录 生成静态页面hexo g #完整命令hexo generate 启动本地服务hexo s #完整命令hexo server，默认启动范围地址 http://localhost:4000 可以使用-p指定端口至此hexo 博客安装完毕 github注册并登陆github创建一个与自己用户名对应的项目(如：nsxq.github.io) 配置hexohexo的主配置文件就是blog主目录下的_config.yml文件咯打开文件，在配置文件最末尾，修改配置为：123type: gitrepo: git@github.com:nsxq/nsxq.github.io.gitbranch: master 安装插件，支持hexo提交到githubnpm install hexo-deployer-git --save 提交blog数据到githubhexo d** #完整命令 hexo deploy 更换皮肤next目前我看到的最漂亮的皮肤就是nextgit clone https://github.com/iissnan/hexo-theme-next复制hexo-theme-next目录到hexo\themes\为next修改_config.yml中配置项theme: nextnext主题默认的Next.Muse,可以在主题配置文件hexo\themes\next_config.yml中修改Schemes更换字体 图片居左修改E:\Hexo\themes\next\source\css_custom\custom.styl.post-body .fancybox img { margin-left: 0 !important; } 将blog发布到公网 我的在阿里云（原万网）上买的域名，设置一条CNAME即可CNAME @ 默认 nsxq.github.io 在hexo\source 目录下新建一个文件CNAME，内容为islocal.cc 修改_config.yml中url为url: http://islocal.cc hexo g hexo d浏览器就可以使用http://islocal.cc 访问blog了 文章链接唯一化修改站点配置文件E:\Hexo_config.ymlpermalink: arlo/:abbrlink/abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 编写第一篇博文 是不是终于搭建完成了，懵逼了，完全不知道干吗了？ 是不是搭建完发现blog上不能直接编写很惊讶？ 是不是终于google到可以使用markdown语法编写，从来没用过？ 这都不是事儿！教程奉上markdown快速入门Hexo博客的写作工具奉上马克飞象在线markdown编辑器让Baidu和Google收录Hexo博客 参考文档Hexo官方中文文档]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
